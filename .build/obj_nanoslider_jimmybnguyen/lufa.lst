   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB128:
  14               		.file 1 "tmk_core/protocol/lufa/lufa.c"
   1:tmk_core/protocol/lufa/lufa.c **** /*
   2:tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/lufa/lufa.c ****  */
   7:tmk_core/protocol/lufa/lufa.c **** 
   8:tmk_core/protocol/lufa/lufa.c **** /*
   9:tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/lufa/lufa.c **** 
  12:tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:tmk_core/protocol/lufa/lufa.c **** */
  15:tmk_core/protocol/lufa/lufa.c **** 
  16:tmk_core/protocol/lufa/lufa.c **** /*
  17:tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/lufa/lufa.c **** 
  20:tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:tmk_core/protocol/lufa/lufa.c **** 
  29:tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:tmk_core/protocol/lufa/lufa.c ****   this software.
  37:tmk_core/protocol/lufa/lufa.c **** */
  38:tmk_core/protocol/lufa/lufa.c **** 
  39:tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:tmk_core/protocol/lufa/lufa.c **** #endif
  50:tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:tmk_core/protocol/lufa/lufa.c **** 
  52:tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:tmk_core/protocol/lufa/lufa.c **** #include "rgblight_reconfig.h"
  58:tmk_core/protocol/lufa/lufa.c **** void CheckJoystickMovement(void);
  59:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  60:tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  61:tmk_core/protocol/lufa/lufa.c **** 
  62:tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  63:tmk_core/protocol/lufa/lufa.c **** #endif
  64:tmk_core/protocol/lufa/lufa.c **** 
  65:tmk_core/protocol/lufa/lufa.c **** 
  66:tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  67:tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  68:tmk_core/protocol/lufa/lufa.c **** #endif
  69:tmk_core/protocol/lufa/lufa.c **** 
  70:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  71:tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  72:tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  73:tmk_core/protocol/lufa/lufa.c ****   #else
  74:tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  75:tmk_core/protocol/lufa/lufa.c ****   #endif
  76:tmk_core/protocol/lufa/lufa.c **** #endif
  77:tmk_core/protocol/lufa/lufa.c **** 
  78:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  79:tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  80:tmk_core/protocol/lufa/lufa.c **** #endif
  81:tmk_core/protocol/lufa/lufa.c **** 
  82:tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  83:tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  84:tmk_core/protocol/lufa/lufa.c **** #endif
  85:tmk_core/protocol/lufa/lufa.c **** 
  86:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  87:tmk_core/protocol/lufa/lufa.c ****   #include "qmk_midi.h"
  88:tmk_core/protocol/lufa/lufa.c **** #endif
  89:tmk_core/protocol/lufa/lufa.c **** 
  90:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  91:tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  92:tmk_core/protocol/lufa/lufa.c **** #endif
  93:tmk_core/protocol/lufa/lufa.c **** //MidiDevice * midi_device;
  94:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  95:tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  96:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  97:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  98:tmk_core/protocol/lufa/lufa.c **** 
  99:tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
 100:tmk_core/protocol/lufa/lufa.c **** 
 101:tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 102:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 103:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 104:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 105:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 106:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 107:tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 108:tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 109:tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 110:tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 111:tmk_core/protocol/lufa/lufa.c ****     send_system,
 112:tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 113:tmk_core/protocol/lufa/lufa.c **** };
 114:tmk_core/protocol/lufa/lufa.c **** 
 115:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 116:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 117:tmk_core/protocol/lufa/lufa.c **** {
 118:tmk_core/protocol/lufa/lufa.c ****   .Config =
 119:tmk_core/protocol/lufa/lufa.c ****   {
 120:tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 121:tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 122:tmk_core/protocol/lufa/lufa.c ****     {
 123:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 124:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 125:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 126:tmk_core/protocol/lufa/lufa.c ****     },
 127:tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 128:tmk_core/protocol/lufa/lufa.c ****     {
 129:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 130:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 131:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 132:tmk_core/protocol/lufa/lufa.c ****     },
 133:tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 134:tmk_core/protocol/lufa/lufa.c ****     {
 135:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 136:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 137:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 138:tmk_core/protocol/lufa/lufa.c ****     },
 139:tmk_core/protocol/lufa/lufa.c ****   },
 140:tmk_core/protocol/lufa/lufa.c **** };
 141:tmk_core/protocol/lufa/lufa.c **** #endif
 142:tmk_core/protocol/lufa/lufa.c **** 
 143:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 144:tmk_core/protocol/lufa/lufa.c **** 
 145:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 146:tmk_core/protocol/lufa/lufa.c ****  *
 147:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 148:tmk_core/protocol/lufa/lufa.c ****  */
 149:tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 150:tmk_core/protocol/lufa/lufa.c **** {
 151:tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 152:tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 153:tmk_core/protocol/lufa/lufa.c **** 	{
 154:tmk_core/protocol/lufa/lufa.c **** 		return;
 155:tmk_core/protocol/lufa/lufa.c **** 	}
 156:tmk_core/protocol/lufa/lufa.c **** 
 157:tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 158:tmk_core/protocol/lufa/lufa.c **** 	{
 159:tmk_core/protocol/lufa/lufa.c **** 		return;
 160:tmk_core/protocol/lufa/lufa.c **** 	}
 161:tmk_core/protocol/lufa/lufa.c **** 
 162:tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 163:tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 164:tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 165:tmk_core/protocol/lufa/lufa.c **** 
 166:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 167:tmk_core/protocol/lufa/lufa.c **** 
 168:tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 169:tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 170:tmk_core/protocol/lufa/lufa.c **** 	{
 171:tmk_core/protocol/lufa/lufa.c **** 		// Write data
 172:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 173:tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 174:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 175:tmk_core/protocol/lufa/lufa.c **** 	}
 176:tmk_core/protocol/lufa/lufa.c **** 
 177:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 178:tmk_core/protocol/lufa/lufa.c **** }
 179:tmk_core/protocol/lufa/lufa.c **** 
 180:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 181:tmk_core/protocol/lufa/lufa.c ****  *
 182:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 183:tmk_core/protocol/lufa/lufa.c ****  */
 184:tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 185:tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 186:tmk_core/protocol/lufa/lufa.c **** {
 187:tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 188:tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 189:tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 190:tmk_core/protocol/lufa/lufa.c **** }
 191:tmk_core/protocol/lufa/lufa.c **** 
 192:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 193:tmk_core/protocol/lufa/lufa.c ****  *
 194:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 195:tmk_core/protocol/lufa/lufa.c ****  */
 196:tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 197:tmk_core/protocol/lufa/lufa.c **** {
 198:tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 199:tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 200:tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 201:tmk_core/protocol/lufa/lufa.c **** 
 202:tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 203:tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 204:tmk_core/protocol/lufa/lufa.c **** 	return;
 205:tmk_core/protocol/lufa/lufa.c **** 
 206:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 207:tmk_core/protocol/lufa/lufa.c **** 
 208:tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 209:tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 210:tmk_core/protocol/lufa/lufa.c **** 	{
 211:tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 212:tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 213:tmk_core/protocol/lufa/lufa.c **** 		{
 214:tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 215:tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 216:tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 217:tmk_core/protocol/lufa/lufa.c **** 		}
 218:tmk_core/protocol/lufa/lufa.c **** 
 219:tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 220:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 221:tmk_core/protocol/lufa/lufa.c **** 
 222:tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 223:tmk_core/protocol/lufa/lufa.c **** 		{
 224:tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 225:tmk_core/protocol/lufa/lufa.c **** 		}
 226:tmk_core/protocol/lufa/lufa.c **** 	}
 227:tmk_core/protocol/lufa/lufa.c **** }
 228:tmk_core/protocol/lufa/lufa.c **** #endif
 229:tmk_core/protocol/lufa/lufa.c **** 
 230:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 231:tmk_core/protocol/lufa/lufa.c ****  * Console
 232:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 233:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 234:tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 235:tmk_core/protocol/lufa/lufa.c ****  *
 236:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 237:tmk_core/protocol/lufa/lufa.c ****  */
 238:tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 239:tmk_core/protocol/lufa/lufa.c **** {
 240:tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 241:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 242:tmk_core/protocol/lufa/lufa.c ****         return;
 243:tmk_core/protocol/lufa/lufa.c **** 
 244:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 245:tmk_core/protocol/lufa/lufa.c **** 
 246:tmk_core/protocol/lufa/lufa.c **** #if 0
 247:tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 248:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 249:tmk_core/protocol/lufa/lufa.c **** 
 250:tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 251:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 252:tmk_core/protocol/lufa/lufa.c ****     {
 253:tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 254:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 255:tmk_core/protocol/lufa/lufa.c ****         {
 256:tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 257:tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 258:tmk_core/protocol/lufa/lufa.c **** 
 259:tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 260:tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 261:tmk_core/protocol/lufa/lufa.c **** 
 262:tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 263:tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 264:tmk_core/protocol/lufa/lufa.c ****         }
 265:tmk_core/protocol/lufa/lufa.c **** 
 266:tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 267:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 268:tmk_core/protocol/lufa/lufa.c ****     }
 269:tmk_core/protocol/lufa/lufa.c **** #endif
 270:tmk_core/protocol/lufa/lufa.c **** 
 271:tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 272:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 273:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 274:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 275:tmk_core/protocol/lufa/lufa.c ****         return;
 276:tmk_core/protocol/lufa/lufa.c ****     }
 277:tmk_core/protocol/lufa/lufa.c **** 
 278:tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 279:tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 280:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 281:tmk_core/protocol/lufa/lufa.c **** 
 282:tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 283:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 284:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 285:tmk_core/protocol/lufa/lufa.c ****     }
 286:tmk_core/protocol/lufa/lufa.c **** 
 287:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 288:tmk_core/protocol/lufa/lufa.c **** }
 289:tmk_core/protocol/lufa/lufa.c **** #endif
 290:tmk_core/protocol/lufa/lufa.c **** 
 291:tmk_core/protocol/lufa/lufa.c **** 
 292:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 293:tmk_core/protocol/lufa/lufa.c ****  * USB Events
 294:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 295:tmk_core/protocol/lufa/lufa.c **** /*
 296:tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 297:tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 298:tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 299:tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 300:tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 301:tmk_core/protocol/lufa/lufa.c **** */
 302:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 303:tmk_core/protocol/lufa/lufa.c ****  *
 304:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 305:tmk_core/protocol/lufa/lufa.c ****  */
 306:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 307:tmk_core/protocol/lufa/lufa.c **** {
 308:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 309:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 310:tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 311:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 312:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 313:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 314:tmk_core/protocol/lufa/lufa.c ****     }
 315:tmk_core/protocol/lufa/lufa.c **** }
 316:tmk_core/protocol/lufa/lufa.c **** 
 317:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 318:tmk_core/protocol/lufa/lufa.c ****  *
 319:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 320:tmk_core/protocol/lufa/lufa.c ****  */
 321:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 322:tmk_core/protocol/lufa/lufa.c **** {
 323:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 324:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 325:tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 326:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 327:tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 328:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 329:tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 330:tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 331:tmk_core/protocol/lufa/lufa.c ****     }
 332:tmk_core/protocol/lufa/lufa.c **** */
 333:tmk_core/protocol/lufa/lufa.c **** }
 334:tmk_core/protocol/lufa/lufa.c **** 
 335:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 336:tmk_core/protocol/lufa/lufa.c ****  *
 337:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 338:tmk_core/protocol/lufa/lufa.c ****  */
 339:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 340:tmk_core/protocol/lufa/lufa.c **** {
 341:tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 342:tmk_core/protocol/lufa/lufa.c **** }
 343:tmk_core/protocol/lufa/lufa.c **** 
 344:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 345:tmk_core/protocol/lufa/lufa.c ****  *
 346:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 347:tmk_core/protocol/lufa/lufa.c ****  */
 348:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 349:tmk_core/protocol/lufa/lufa.c **** {
 350:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 351:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 352:tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 353:tmk_core/protocol/lufa/lufa.c **** #endif
 354:tmk_core/protocol/lufa/lufa.c **** }
 355:tmk_core/protocol/lufa/lufa.c **** 
 356:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 357:tmk_core/protocol/lufa/lufa.c ****  *
 358:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 359:tmk_core/protocol/lufa/lufa.c ****  */
 360:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 361:tmk_core/protocol/lufa/lufa.c **** {
 362:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 363:tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 364:tmk_core/protocol/lufa/lufa.c **** 
 365:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 366:tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 367:tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 368:tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 369:tmk_core/protocol/lufa/lufa.c **** #endif
 370:tmk_core/protocol/lufa/lufa.c **** }
 371:tmk_core/protocol/lufa/lufa.c **** 
 372:tmk_core/protocol/lufa/lufa.c **** 
 373:tmk_core/protocol/lufa/lufa.c **** 
 374:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 375:tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 376:tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 377:tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 378:tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 379:tmk_core/protocol/lufa/lufa.c ****   } \
 380:tmk_core/protocol/lufa/lufa.c **** } while (0)
 381:tmk_core/protocol/lufa/lufa.c **** 
 382:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 383:tmk_core/protocol/lufa/lufa.c ****  *
 384:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 385:tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 386:tmk_core/protocol/lufa/lufa.c ****  */
 387:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 388:tmk_core/protocol/lufa/lufa.c **** {
 389:tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 390:tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 391:tmk_core/protocol/lufa/lufa.c ****     count = 0;
 392:tmk_core/protocol/lufa/lufa.c **** 
 393:tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 394:tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 395:tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 396:tmk_core/protocol/lufa/lufa.c **** }
 397:tmk_core/protocol/lufa/lufa.c **** 
 398:tmk_core/protocol/lufa/lufa.c **** #endif
 399:tmk_core/protocol/lufa/lufa.c **** 
 400:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 401:tmk_core/protocol/lufa/lufa.c ****  *
 402:tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 403:tmk_core/protocol/lufa/lufa.c ****  *
 404:tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 405:tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 406:tmk_core/protocol/lufa/lufa.c ****  */
 407:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 408:tmk_core/protocol/lufa/lufa.c **** {
 409:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 410:tmk_core/protocol/lufa/lufa.c **** 
 411:tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 412:tmk_core/protocol/lufa/lufa.c **** #ifndef KEYBOARD_SHARED_EP
 413:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 414:tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 415:tmk_core/protocol/lufa/lufa.c **** #endif
 416:tmk_core/protocol/lufa/lufa.c **** 
 417:tmk_core/protocol/lufa/lufa.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 418:tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 419:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 420:tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 421:tmk_core/protocol/lufa/lufa.c **** #endif
 422:tmk_core/protocol/lufa/lufa.c **** 
 423:tmk_core/protocol/lufa/lufa.c **** #ifdef SHARED_EP_ENABLE
 424:tmk_core/protocol/lufa/lufa.c ****     /* Setup Shared HID Report Endpoint */
 425:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(SHARED_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 426:tmk_core/protocol/lufa/lufa.c ****                                      SHARED_EPSIZE, ENDPOINT_BANK_SINGLE);
 427:tmk_core/protocol/lufa/lufa.c **** #endif
 428:tmk_core/protocol/lufa/lufa.c **** 
 429:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 430:tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 431:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 432:tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 433:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 434:tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 435:tmk_core/protocol/lufa/lufa.c **** #endif
 436:tmk_core/protocol/lufa/lufa.c **** 
 437:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 438:tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 439:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 440:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:tmk_core/protocol/lufa/lufa.c **** #if 0
 442:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 443:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 444:tmk_core/protocol/lufa/lufa.c **** #endif
 445:tmk_core/protocol/lufa/lufa.c **** #endif
 446:tmk_core/protocol/lufa/lufa.c **** 
 447:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 448:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 449:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 450:tmk_core/protocol/lufa/lufa.c **** #endif
 451:tmk_core/protocol/lufa/lufa.c **** 
 452:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 453:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 454:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 455:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 456:tmk_core/protocol/lufa/lufa.c **** #endif
 457:tmk_core/protocol/lufa/lufa.c **** }
 458:tmk_core/protocol/lufa/lufa.c **** 
 459:tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 460:tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 461:tmk_core/protocol/lufa/lufa.c **** 
 462:tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 463:tmk_core/protocol/lufa/lufa.c **** 
 464:tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 465:tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 466:tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 467:tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 468:tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 469:tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 470:tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 471:tmk_core/protocol/lufa/lufa.c **** */
 472:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 473:tmk_core/protocol/lufa/lufa.c ****  *
 474:tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 475:tmk_core/protocol/lufa/lufa.c ****  */
 476:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 477:tmk_core/protocol/lufa/lufa.c **** {
 478:tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 479:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 480:tmk_core/protocol/lufa/lufa.c **** 
 481:tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 482:tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 483:tmk_core/protocol/lufa/lufa.c ****     {
 484:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 485:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 486:tmk_core/protocol/lufa/lufa.c ****             {
 487:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 488:tmk_core/protocol/lufa/lufa.c **** 
 489:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 490:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 491:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 492:tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 493:tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 494:tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 495:tmk_core/protocol/lufa/lufa.c ****                     break;
 496:tmk_core/protocol/lufa/lufa.c ****                 }
 497:tmk_core/protocol/lufa/lufa.c **** 
 498:tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 499:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 500:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 501:tmk_core/protocol/lufa/lufa.c ****             }
 502:tmk_core/protocol/lufa/lufa.c **** 
 503:tmk_core/protocol/lufa/lufa.c ****             break;
 504:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 505:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 506:tmk_core/protocol/lufa/lufa.c ****             {
 507:tmk_core/protocol/lufa/lufa.c **** 
 508:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 509:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 510:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 511:tmk_core/protocol/lufa/lufa.c **** #if defined(SHARED_EP_ENABLE) && !defined(KEYBOARD_SHARED_EP)
 512:tmk_core/protocol/lufa/lufa.c ****                 case SHARED_INTERFACE:
 513:tmk_core/protocol/lufa/lufa.c **** #endif
 514:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 515:tmk_core/protocol/lufa/lufa.c **** 
 516:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 517:tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 518:tmk_core/protocol/lufa/lufa.c ****                           return;
 519:tmk_core/protocol/lufa/lufa.c ****                     }
 520:tmk_core/protocol/lufa/lufa.c **** 
 521:tmk_core/protocol/lufa/lufa.c ****                     if (Endpoint_BytesInEndpoint() == 2) {
 522:tmk_core/protocol/lufa/lufa.c ****                       uint8_t report_id = Endpoint_Read_8();
 523:tmk_core/protocol/lufa/lufa.c **** 
 524:tmk_core/protocol/lufa/lufa.c ****                       if (report_id == REPORT_ID_KEYBOARD || report_id == REPORT_ID_NKRO) {
 525:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 526:tmk_core/protocol/lufa/lufa.c ****                       }
 527:tmk_core/protocol/lufa/lufa.c ****                     } else {
 528:tmk_core/protocol/lufa/lufa.c ****                       keyboard_led_stats = Endpoint_Read_8();
 529:tmk_core/protocol/lufa/lufa.c ****                     }
 530:tmk_core/protocol/lufa/lufa.c **** 
 531:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 532:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 533:tmk_core/protocol/lufa/lufa.c ****                     break;
 534:tmk_core/protocol/lufa/lufa.c ****                 }
 535:tmk_core/protocol/lufa/lufa.c **** 
 536:tmk_core/protocol/lufa/lufa.c ****             }
 537:tmk_core/protocol/lufa/lufa.c **** 
 538:tmk_core/protocol/lufa/lufa.c ****             break;
 539:tmk_core/protocol/lufa/lufa.c **** 
 540:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 541:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 542:tmk_core/protocol/lufa/lufa.c ****             {
 543:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 544:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 545:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 546:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 547:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 548:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 549:tmk_core/protocol/lufa/lufa.c ****                 }
 550:tmk_core/protocol/lufa/lufa.c ****             }
 551:tmk_core/protocol/lufa/lufa.c **** 
 552:tmk_core/protocol/lufa/lufa.c ****             break;
 553:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 554:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 555:tmk_core/protocol/lufa/lufa.c ****             {
 556:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 557:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 558:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 559:tmk_core/protocol/lufa/lufa.c **** 
 560:tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 561:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 562:tmk_core/protocol/lufa/lufa.c ****                 }
 563:tmk_core/protocol/lufa/lufa.c ****             }
 564:tmk_core/protocol/lufa/lufa.c **** 
 565:tmk_core/protocol/lufa/lufa.c ****             break;
 566:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 567:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 568:tmk_core/protocol/lufa/lufa.c ****             {
 569:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 570:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 571:tmk_core/protocol/lufa/lufa.c **** 
 572:tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 573:tmk_core/protocol/lufa/lufa.c ****             }
 574:tmk_core/protocol/lufa/lufa.c **** 
 575:tmk_core/protocol/lufa/lufa.c ****             break;
 576:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 577:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 578:tmk_core/protocol/lufa/lufa.c ****             {
 579:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 580:tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 581:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 582:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 583:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 584:tmk_core/protocol/lufa/lufa.c ****             }
 585:tmk_core/protocol/lufa/lufa.c **** 
 586:tmk_core/protocol/lufa/lufa.c ****             break;
 587:tmk_core/protocol/lufa/lufa.c ****     }
 588:tmk_core/protocol/lufa/lufa.c **** 
 589:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 590:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 591:tmk_core/protocol/lufa/lufa.c **** #endif
 592:tmk_core/protocol/lufa/lufa.c **** }
 593:tmk_core/protocol/lufa/lufa.c **** 
 594:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 595:tmk_core/protocol/lufa/lufa.c ****  * Host driver
 596:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 597:tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 598:tmk_core/protocol/lufa/lufa.c ****  *
 599:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 600:tmk_core/protocol/lufa/lufa.c ****  */
 601:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 602:tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 602 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 603:tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 604:tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 604 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE128:
  27               		.section	.text.send_mouse,"ax",@progbits
  29               	send_mouse:
  30               	.LFB130:
 605:tmk_core/protocol/lufa/lufa.c **** 
 606:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 607:tmk_core/protocol/lufa/lufa.c ****  *
 608:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 609:tmk_core/protocol/lufa/lufa.c ****  */
 610:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 611:tmk_core/protocol/lufa/lufa.c **** {
 612:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 613:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 614:tmk_core/protocol/lufa/lufa.c **** 
 615:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 616:tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 617:tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 618:tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 619:tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 620:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 621:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x09);
 622:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x01);
 623:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->mods);
 624:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->reserved);
 625:tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 626:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->keys[i]);
 627:tmk_core/protocol/lufa/lufa.c ****       }
 628:tmk_core/protocol/lufa/lufa.c ****     #else
 629:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 630:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->mods);
 631:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->reserved);
 632:tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 633:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->keys[i]);
 634:tmk_core/protocol/lufa/lufa.c ****       }
 635:tmk_core/protocol/lufa/lufa.c ****     #endif
 636:tmk_core/protocol/lufa/lufa.c ****   }
 637:tmk_core/protocol/lufa/lufa.c **** #endif
 638:tmk_core/protocol/lufa/lufa.c **** 
 639:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 640:tmk_core/protocol/lufa/lufa.c ****       return;
 641:tmk_core/protocol/lufa/lufa.c ****     }
 642:tmk_core/protocol/lufa/lufa.c **** 
 643:tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 644:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = KEYBOARD_IN_EPNUM;
 645:tmk_core/protocol/lufa/lufa.c ****     uint8_t size = KEYBOARD_REPORT_SIZE;
 646:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 647:tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 648:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
 649:tmk_core/protocol/lufa/lufa.c ****         size = sizeof(struct nkro_report);
 650:tmk_core/protocol/lufa/lufa.c ****     }
 651:tmk_core/protocol/lufa/lufa.c **** #endif
 652:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 653:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 654:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 655:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 656:tmk_core/protocol/lufa/lufa.c **** 
 657:tmk_core/protocol/lufa/lufa.c ****     /* If we're in Boot Protocol, don't send any report ID or other funky fields */
 658:tmk_core/protocol/lufa/lufa.c ****     if (!keyboard_protocol) {
 659:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 660:tmk_core/protocol/lufa/lufa.c ****     } else {
 661:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, size, NULL);
 662:tmk_core/protocol/lufa/lufa.c ****     }
 663:tmk_core/protocol/lufa/lufa.c **** 
 664:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 665:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 666:tmk_core/protocol/lufa/lufa.c **** 
 667:tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 668:tmk_core/protocol/lufa/lufa.c **** }
 669:tmk_core/protocol/lufa/lufa.c **** 
 670:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 671:tmk_core/protocol/lufa/lufa.c ****  *
 672:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 673:tmk_core/protocol/lufa/lufa.c ****  */
 674:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 675:tmk_core/protocol/lufa/lufa.c **** {
  31               		.loc 1 675 0
  32               		.cfi_startproc
  33               	.LVL0:
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 0 */
  37               	.L__stack_usage = 0
  38 0000 0895      		ret
  39               		.cfi_endproc
  40               	.LFE130:
  42               		.section	.text.send_consumer,"ax",@progbits
  44               	send_consumer:
  45               	.LFB132:
 676:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 677:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 678:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 679:tmk_core/protocol/lufa/lufa.c **** 
 680:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 681:tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 682:tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 683:tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 684:tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 685:tmk_core/protocol/lufa/lufa.c ****     #else
 686:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 687:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 688:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 689:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 690:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 691:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 692:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 693:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 694:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 695:tmk_core/protocol/lufa/lufa.c ****     #endif
 696:tmk_core/protocol/lufa/lufa.c ****   }
 697:tmk_core/protocol/lufa/lufa.c **** #endif
 698:tmk_core/protocol/lufa/lufa.c **** 
 699:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 700:tmk_core/protocol/lufa/lufa.c ****       return;
 701:tmk_core/protocol/lufa/lufa.c ****     }
 702:tmk_core/protocol/lufa/lufa.c **** 
 703:tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 704:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 705:tmk_core/protocol/lufa/lufa.c **** 
 706:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 707:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 708:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 709:tmk_core/protocol/lufa/lufa.c **** 
 710:tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 711:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 712:tmk_core/protocol/lufa/lufa.c **** 
 713:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 714:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 715:tmk_core/protocol/lufa/lufa.c **** #endif
 716:tmk_core/protocol/lufa/lufa.c **** }
 717:tmk_core/protocol/lufa/lufa.c **** 
 718:tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 719:tmk_core/protocol/lufa/lufa.c ****  *
 720:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 721:tmk_core/protocol/lufa/lufa.c ****  */
 722:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 723:tmk_core/protocol/lufa/lufa.c **** {
 724:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 725:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 726:tmk_core/protocol/lufa/lufa.c **** 
 727:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 728:tmk_core/protocol/lufa/lufa.c ****         return;
 729:tmk_core/protocol/lufa/lufa.c **** 
 730:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 731:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 732:tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 733:tmk_core/protocol/lufa/lufa.c ****     };
 734:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 735:tmk_core/protocol/lufa/lufa.c **** 
 736:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 737:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 738:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 739:tmk_core/protocol/lufa/lufa.c **** 
 740:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 741:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 742:tmk_core/protocol/lufa/lufa.c **** #endif
 743:tmk_core/protocol/lufa/lufa.c **** }
 744:tmk_core/protocol/lufa/lufa.c **** 
 745:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 746:tmk_core/protocol/lufa/lufa.c ****  *
 747:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 748:tmk_core/protocol/lufa/lufa.c ****  */
 749:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 750:tmk_core/protocol/lufa/lufa.c **** {
  46               		.loc 1 750 0
  47               		.cfi_startproc
  48               	.LVL1:
  49               		.loc 1 750 0
  50 0000 0F93      		push r16
  51               	.LCFI0:
  52               		.cfi_def_cfa_offset 3
  53               		.cfi_offset 16, -2
  54 0002 1F93      		push r17
  55               	.LCFI1:
  56               		.cfi_def_cfa_offset 4
  57               		.cfi_offset 17, -3
  58 0004 CF93      		push r28
  59               	.LCFI2:
  60               		.cfi_def_cfa_offset 5
  61               		.cfi_offset 28, -4
  62 0006 DF93      		push r29
  63               	.LCFI3:
  64               		.cfi_def_cfa_offset 6
  65               		.cfi_offset 29, -5
  66 0008 00D0      		rcall .
  67 000a 1F92      		push __zero_reg__
  68               	.LCFI4:
  69               		.cfi_def_cfa_offset 9
  70 000c CDB7      		in r28,__SP_L__
  71 000e DEB7      		in r29,__SP_H__
  72               	.LCFI5:
  73               		.cfi_def_cfa_register 28
  74               	/* prologue: function */
  75               	/* frame size = 3 */
  76               	/* stack size = 7 */
  77               	.L__stack_usage = 7
  78 0010 8C01      		movw r16,r24
  79               	.LVL2:
 751:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 752:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 753:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
  80               		.loc 1 753 0
  81 0012 0E94 0000 		call where_to_send
  82               	.LVL3:
 754:tmk_core/protocol/lufa/lufa.c **** 
 755:tmk_core/protocol/lufa/lufa.c **** 
 756:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
  83               		.loc 1 756 0
  84 0016 8230      		cpi r24,lo8(2)
  85 0018 01F0      		breq .L4
  86               		.loc 1 756 0 is_stmt 0 discriminator 1
  87 001a 8430      		cpi r24,lo8(4)
  88 001c 01F4      		brne .L3
  89               	.L4:
 757:tmk_core/protocol/lufa/lufa.c ****       return;
 758:tmk_core/protocol/lufa/lufa.c ****     }
 759:tmk_core/protocol/lufa/lufa.c **** 
 760:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  90               		.loc 1 760 0 is_stmt 1
  91 001e 84E0      		ldi r24,lo8(4)
  92               	.LVL4:
  93 0020 8983      		std Y+1,r24
  94 0022 1B83      		std Y+3,r17
  95 0024 0A83      		std Y+2,r16
  96               	.LVL5:
  97               	.LBB102:
  98               	.LBB103:
  99               		.file 2 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 100               		.loc 2 270 0
 101 0026 82E0      		ldi r24,lo8(2)
 102 0028 8093 E900 		sts 233,r24
 103               	.LVL6:
 104 002c 8FEF      		ldi r24,lo8(-1)
 105               	.LVL7:
 106               	.L6:
 107               	.LBE103:
 108               	.LBE102:
 109               	.LBB104:
 110               	.LBB105:
 271:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 111               		.loc 2 360 0
 112 002e 9091 E800 		lds r25,232
 113 0032 8150      		subi r24,lo8(-(-1))
 114               	.LVL8:
 115               	.LBE105:
 116               	.LBE104:
 761:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 762:tmk_core/protocol/lufa/lufa.c ****         .usage = data
 763:tmk_core/protocol/lufa/lufa.c ****     };
 764:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 765:tmk_core/protocol/lufa/lufa.c **** 
 766:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 767:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 117               		.loc 1 767 0
 118 0034 95FD      		sbrc r25,5
 119 0036 00C0      		rjmp .L7
 120               	.LVL9:
 121               	.LBB106:
 122               	.LBB107:
 123               		.file 3 "d:\\program files\\msys2\\home\\bnguy\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\
   1:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 256:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 258:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 262:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 124               		.loc 3 276 0
 125 0038 95ED      		ldi r25,lo8(-43)
 126 003a 9A95      	1:	dec r25
 127 003c 01F4      		brne 1b
 128 003e 0000      		nop
 129               	.LVL10:
 130               	.LBE107:
 131               	.LBE106:
 132               		.loc 1 767 0
 133 0040 8111      		cpse r24,__zero_reg__
 134 0042 00C0      		rjmp .L6
 135               	.LVL11:
 136               	.L7:
 137               	.LBB108:
 138               	.LBB109:
 139               		.loc 2 360 0
 140 0044 8091 E800 		lds r24,232
 141               	.LBE109:
 142               	.LBE108:
 768:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 143               		.loc 1 768 0
 144 0048 85FF      		sbrs r24,5
 145 004a 00C0      		rjmp .L3
 769:tmk_core/protocol/lufa/lufa.c **** 
 770:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 146               		.loc 1 770 0
 147 004c 40E0      		ldi r20,0
 148 004e 50E0      		ldi r21,0
 149 0050 63E0      		ldi r22,lo8(3)
 150 0052 70E0      		ldi r23,0
 151 0054 CE01      		movw r24,r28
 152 0056 0196      		adiw r24,1
 153 0058 0E94 0000 		call Endpoint_Write_Stream_LE
 154               	.LVL12:
 155               	.LBB110:
 156               	.LBB111:
 361:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 157               		.loc 2 456 0
 158 005c 8091 E800 		lds r24,232
 159 0060 8E77      		andi r24,lo8(126)
 160 0062 8093 E800 		sts 232,r24
 161               	.LVL13:
 162               	.L3:
 163               	/* epilogue start */
 164               	.LBE111:
 165               	.LBE110:
 771:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 772:tmk_core/protocol/lufa/lufa.c **** #endif
 773:tmk_core/protocol/lufa/lufa.c **** }
 166               		.loc 1 773 0
 167 0066 0F90      		pop __tmp_reg__
 168 0068 0F90      		pop __tmp_reg__
 169 006a 0F90      		pop __tmp_reg__
 170 006c DF91      		pop r29
 171 006e CF91      		pop r28
 172 0070 1F91      		pop r17
 173 0072 0F91      		pop r16
 174               	.LVL14:
 175 0074 0895      		ret
 176               		.cfi_endproc
 177               	.LFE132:
 179               		.section	.text.send_system,"ax",@progbits
 181               	send_system:
 182               	.LFB131:
 723:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 183               		.loc 1 723 0
 184               		.cfi_startproc
 185               	.LVL15:
 186 0000 CF93      		push r28
 187               	.LCFI6:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 28, -2
 190 0002 DF93      		push r29
 191               	.LCFI7:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 29, -3
 194 0004 00D0      		rcall .
 195 0006 1F92      		push __zero_reg__
 196               	.LCFI8:
 197               		.cfi_def_cfa_offset 7
 198 0008 CDB7      		in r28,__SP_L__
 199 000a DEB7      		in r29,__SP_H__
 200               	.LCFI9:
 201               		.cfi_def_cfa_register 28
 202               	/* prologue: function */
 203               	/* frame size = 3 */
 204               	/* stack size = 5 */
 205               	.L__stack_usage = 5
 206               	.LVL16:
 727:tmk_core/protocol/lufa/lufa.c ****         return;
 207               		.loc 1 727 0
 208 000c 2091 0000 		lds r18,USB_DeviceState
 209 0010 2430      		cpi r18,lo8(4)
 210 0012 01F4      		brne .L20
 730:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 211               		.loc 1 730 0
 212 0014 23E0      		ldi r18,lo8(3)
 213 0016 2983      		std Y+1,r18
 214 0018 8058      		subi r24,-128
 215 001a 9109      		sbc r25,__zero_reg__
 216               	.LVL17:
 217 001c 9B83      		std Y+3,r25
 218 001e 8A83      		std Y+2,r24
 219               	.LVL18:
 220               	.LBB112:
 221               	.LBB113:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 222               		.loc 2 270 0
 223 0020 82E0      		ldi r24,lo8(2)
 224               	.LVL19:
 225 0022 8093 E900 		sts 233,r24
 226               	.LVL20:
 227 0026 8FEF      		ldi r24,lo8(-1)
 228               	.LVL21:
 229               	.L22:
 230               	.LBE113:
 231               	.LBE112:
 232               	.LBB114:
 233               	.LBB115:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 234               		.loc 2 360 0
 235 0028 9091 E800 		lds r25,232
 236 002c 8150      		subi r24,lo8(-(-1))
 237               	.LVL22:
 238               	.LBE115:
 239               	.LBE114:
 737:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 240               		.loc 1 737 0
 241 002e 95FD      		sbrc r25,5
 242 0030 00C0      		rjmp .L23
 243               	.LVL23:
 244               	.LBB116:
 245               	.LBB117:
 246               		.loc 3 276 0
 247 0032 95ED      		ldi r25,lo8(-43)
 248 0034 9A95      	1:	dec r25
 249 0036 01F4      		brne 1b
 250 0038 0000      		nop
 251               	.LVL24:
 252               	.LBE117:
 253               	.LBE116:
 737:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 254               		.loc 1 737 0
 255 003a 8111      		cpse r24,__zero_reg__
 256 003c 00C0      		rjmp .L22
 257               	.LVL25:
 258               	.L23:
 259               	.LBB118:
 260               	.LBB119:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 261               		.loc 2 360 0
 262 003e 8091 E800 		lds r24,232
 263               	.LBE119:
 264               	.LBE118:
 738:tmk_core/protocol/lufa/lufa.c **** 
 265               		.loc 1 738 0
 266 0042 85FF      		sbrs r24,5
 267 0044 00C0      		rjmp .L20
 740:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 268               		.loc 1 740 0
 269 0046 40E0      		ldi r20,0
 270 0048 50E0      		ldi r21,0
 271 004a 63E0      		ldi r22,lo8(3)
 272 004c 70E0      		ldi r23,0
 273 004e CE01      		movw r24,r28
 274 0050 0196      		adiw r24,1
 275 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 276               	.LVL26:
 277               	.LBB120:
 278               	.LBB121:
 279               		.loc 2 456 0
 280 0056 8091 E800 		lds r24,232
 281 005a 8E77      		andi r24,lo8(126)
 282 005c 8093 E800 		sts 232,r24
 283               	.LVL27:
 284               	.L20:
 285               	/* epilogue start */
 286               	.LBE121:
 287               	.LBE120:
 743:tmk_core/protocol/lufa/lufa.c **** 
 288               		.loc 1 743 0
 289 0060 0F90      		pop __tmp_reg__
 290 0062 0F90      		pop __tmp_reg__
 291 0064 0F90      		pop __tmp_reg__
 292 0066 DF91      		pop r29
 293 0068 CF91      		pop r28
 294 006a 0895      		ret
 295               		.cfi_endproc
 296               	.LFE131:
 298               		.section	.text.send_keyboard,"ax",@progbits
 300               	send_keyboard:
 301               	.LFB129:
 611:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 302               		.loc 1 611 0
 303               		.cfi_startproc
 304               	.LVL28:
 305 0000 CF93      		push r28
 306               	.LCFI10:
 307               		.cfi_def_cfa_offset 3
 308               		.cfi_offset 28, -2
 309 0002 DF93      		push r29
 310               	.LCFI11:
 311               		.cfi_def_cfa_offset 4
 312               		.cfi_offset 29, -3
 313               	/* prologue: function */
 314               	/* frame size = 0 */
 315               	/* stack size = 2 */
 316               	.L__stack_usage = 2
 317 0004 EC01      		movw r28,r24
 318               	.LVL29:
 613:tmk_core/protocol/lufa/lufa.c **** 
 319               		.loc 1 613 0
 320 0006 0E94 0000 		call where_to_send
 321               	.LVL30:
 639:tmk_core/protocol/lufa/lufa.c ****       return;
 322               		.loc 1 639 0
 323 000a 8230      		cpi r24,lo8(2)
 324 000c 01F0      		breq .L33
 639:tmk_core/protocol/lufa/lufa.c ****       return;
 325               		.loc 1 639 0 is_stmt 0 discriminator 1
 326 000e 8430      		cpi r24,lo8(4)
 327 0010 01F4      		brne .L32
 328               	.L33:
 329               	.LVL31:
 647:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
 330               		.loc 1 647 0 is_stmt 1
 331 0012 8091 0000 		lds r24,keyboard_protocol
 332               	.LVL32:
 333 0016 8823      		tst r24
 334 0018 01F0      		breq .L43
 647:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
 335               		.loc 1 647 0 is_stmt 0 discriminator 1
 336 001a 8091 0000 		lds r24,keymap_config
 337 001e 87FF      		sbrs r24,7
 338 0020 00C0      		rjmp .L43
 649:tmk_core/protocol/lufa/lufa.c ****     }
 339               		.loc 1 649 0 is_stmt 1
 340 0022 60E2      		ldi r22,lo8(32)
 648:tmk_core/protocol/lufa/lufa.c ****         size = sizeof(struct nkro_report);
 341               		.loc 1 648 0
 342 0024 82E0      		ldi r24,lo8(2)
 343 0026 00C0      		rjmp .L35
 344               	.L43:
 645:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 345               		.loc 1 645 0
 346 0028 68E0      		ldi r22,lo8(8)
 644:tmk_core/protocol/lufa/lufa.c ****     uint8_t size = KEYBOARD_REPORT_SIZE;
 347               		.loc 1 644 0
 348 002a 81E0      		ldi r24,lo8(1)
 349               	.L35:
 350               	.LVL33:
 351               	.LBB122:
 352               	.LBB123:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 353               		.loc 2 270 0
 354 002c 8093 E900 		sts 233,r24
 355               	.LVL34:
 356 0030 8FEF      		ldi r24,lo8(-1)
 357               	.LVL35:
 358               	.L36:
 359               	.LBE123:
 360               	.LBE122:
 361               	.LBB124:
 362               	.LBB125:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 363               		.loc 2 360 0
 364 0032 9091 E800 		lds r25,232
 365 0036 8150      		subi r24,lo8(-(-1))
 366               	.LVL36:
 367               	.LBE125:
 368               	.LBE124:
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 369               		.loc 1 654 0
 370 0038 95FD      		sbrc r25,5
 371 003a 00C0      		rjmp .L37
 372               	.LVL37:
 373               	.LBB126:
 374               	.LBB127:
 375               		.loc 3 276 0
 376 003c 95ED      		ldi r25,lo8(-43)
 377 003e 9A95      	1:	dec r25
 378 0040 01F4      		brne 1b
 379 0042 0000      		nop
 380               	.LVL38:
 381               	.LBE127:
 382               	.LBE126:
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 383               		.loc 1 654 0
 384 0044 8111      		cpse r24,__zero_reg__
 385 0046 00C0      		rjmp .L36
 386               	.LVL39:
 387               	.L37:
 388               	.LBB128:
 389               	.LBB129:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 390               		.loc 2 360 0
 391 0048 8091 E800 		lds r24,232
 392               	.LBE129:
 393               	.LBE128:
 655:tmk_core/protocol/lufa/lufa.c **** 
 394               		.loc 1 655 0
 395 004c 85FF      		sbrs r24,5
 396 004e 00C0      		rjmp .L32
 658:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 397               		.loc 1 658 0
 398 0050 8091 0000 		lds r24,keyboard_protocol
 399 0054 8111      		cpse r24,__zero_reg__
 400 0056 00C0      		rjmp .L40
 659:tmk_core/protocol/lufa/lufa.c ****     } else {
 401               		.loc 1 659 0
 402 0058 40E0      		ldi r20,0
 403 005a 50E0      		ldi r21,0
 404 005c 68E0      		ldi r22,lo8(8)
 405 005e 70E0      		ldi r23,0
 406               	.LVL40:
 407 0060 00C0      		rjmp .L56
 408               	.LVL41:
 409               	.L40:
 661:tmk_core/protocol/lufa/lufa.c ****     }
 410               		.loc 1 661 0
 411 0062 70E0      		ldi r23,0
 412 0064 40E0      		ldi r20,0
 413 0066 50E0      		ldi r21,0
 414               	.LVL42:
 415               	.L56:
 416 0068 CE01      		movw r24,r28
 417 006a 0E94 0000 		call Endpoint_Write_Stream_LE
 418               	.LVL43:
 419               	.LBB130:
 420               	.LBB131:
 421               		.loc 2 456 0
 422 006e 8091 E800 		lds r24,232
 423 0072 8E77      		andi r24,lo8(126)
 424 0074 8093 E800 		sts 232,r24
 425               	.LBE131:
 426               	.LBE130:
 667:tmk_core/protocol/lufa/lufa.c **** }
 427               		.loc 1 667 0
 428 0078 80E2      		ldi r24,lo8(32)
 429 007a FE01      		movw r30,r28
 430 007c A0E0      		ldi r26,lo8(keyboard_report_sent)
 431 007e B0E0      		ldi r27,hi8(keyboard_report_sent)
 432               		0:
 433 0080 0190      		ld r0,Z+
 434 0082 0D92      		st X+,r0
 435 0084 8A95      		dec r24
 436 0086 01F4      		brne 0b
 437               	.L32:
 438               	/* epilogue start */
 668:tmk_core/protocol/lufa/lufa.c **** 
 439               		.loc 1 668 0
 440 0088 DF91      		pop r29
 441 008a CF91      		pop r28
 442               	.LVL44:
 443 008c 0895      		ret
 444               		.cfi_endproc
 445               	.LFE129:
 447               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 448               	.global	EVENT_USB_Device_Connect
 450               	EVENT_USB_Device_Connect:
 451               	.LFB121:
 307:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 452               		.loc 1 307 0
 453               		.cfi_startproc
 454               	/* prologue: function */
 455               	/* frame size = 0 */
 456               	/* stack size = 0 */
 457               	.L__stack_usage = 0
 310:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 458               		.loc 1 310 0
 459 0000 8091 0000 		lds r24,USB_IsInitialized
 460 0004 8111      		cpse r24,__zero_reg__
 461 0006 00C0      		rjmp .L57
 311:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 462               		.loc 1 311 0
 463 0008 0E94 0000 		call USB_Disable
 464               	.LVL45:
 312:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 465               		.loc 1 312 0
 466 000c 0E94 0000 		call USB_Init
 467               	.LVL46:
 468               	.LBB132:
 469               	.LBB133:
 470               	.LBB134:
 471               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 472               		.loc 4 113 0
 473 0010 8091 E200 		lds r24,226
 474 0014 8460      		ori r24,lo8(4)
 475 0016 8093 E200 		sts 226,r24
 476               	.LVL47:
 477               	.L57:
 478 001a 0895      		ret
 479               	.LBE134:
 480               	.LBE133:
 481               	.LBE132:
 482               		.cfi_endproc
 483               	.LFE121:
 485               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 486               	.global	EVENT_USB_Device_Disconnect
 488               	EVENT_USB_Device_Disconnect:
 489               	.LFB122:
 322:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 490               		.loc 1 322 0
 491               		.cfi_startproc
 492               	/* prologue: function */
 493               	/* frame size = 0 */
 494               	/* stack size = 0 */
 495               	.L__stack_usage = 0
 325:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 496               		.loc 1 325 0
 497 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 498 0004 0895      		ret
 499               		.cfi_endproc
 500               	.LFE122:
 502               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 503               	.global	EVENT_USB_Device_Reset
 505               	EVENT_USB_Device_Reset:
 506               	.LFB144:
 507               		.cfi_startproc
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 0 */
 511               	.L__stack_usage = 0
 512 0000 0895      		ret
 513               		.cfi_endproc
 514               	.LFE144:
 516               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 517               	.global	EVENT_USB_Device_Suspend
 519               	EVENT_USB_Device_Suspend:
 520               	.LFB124:
 349:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 521               		.loc 1 349 0
 522               		.cfi_startproc
 523               	/* prologue: function */
 524               	/* frame size = 0 */
 525               	/* stack size = 0 */
 526               	.L__stack_usage = 0
 527 0000 0895      		ret
 528               		.cfi_endproc
 529               	.LFE124:
 531               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 532               	.global	EVENT_USB_Device_WakeUp
 534               	EVENT_USB_Device_WakeUp:
 535               	.LFB125:
 361:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 536               		.loc 1 361 0
 537               		.cfi_startproc
 538               	/* prologue: function */
 539               	/* frame size = 0 */
 540               	/* stack size = 0 */
 541               	.L__stack_usage = 0
 363:tmk_core/protocol/lufa/lufa.c **** 
 542               		.loc 1 363 0
 543 0000 0C94 0000 		jmp suspend_wakeup_init
 544               	.LVL48:
 545               		.cfi_endproc
 546               	.LFE125:
 548               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 549               	.global	EVENT_USB_Device_ConfigurationChanged
 551               	EVENT_USB_Device_ConfigurationChanged:
 552               	.LFB126:
 408:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 553               		.loc 1 408 0
 554               		.cfi_startproc
 555               	/* prologue: function */
 556               	/* frame size = 0 */
 557               	/* stack size = 0 */
 558               	.L__stack_usage = 0
 559               	.LVL49:
 560               	.LBB135:
 561               	.LBB136:
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 562               		.loc 2 210 0
 563 0000 42E0      		ldi r20,lo8(2)
 564 0002 61EC      		ldi r22,lo8(-63)
 565 0004 81E0      		ldi r24,lo8(1)
 566 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 567               	.LVL50:
 568               	.LBE136:
 569               	.LBE135:
 570               	.LBB137:
 571               	.LBB138:
 572 000a 42E2      		ldi r20,lo8(34)
 573 000c 61EC      		ldi r22,lo8(-63)
 574 000e 82E0      		ldi r24,lo8(2)
 575 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 576               	.LVL51:
 577               	.LBE138:
 578               	.LBE137:
 579               	.LBB139:
 580               	.LBB140:
 581 0014 42E3      		ldi r20,lo8(50)
 582 0016 61E8      		ldi r22,lo8(-127)
 583 0018 83E0      		ldi r24,lo8(3)
 584 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 585               	.LVL52:
 586               	.LBE140:
 587               	.LBE139:
 588               	.LBB141:
 589               	.LBB142:
 590 001e 42E3      		ldi r20,lo8(50)
 591 0020 60E8      		ldi r22,lo8(-128)
 592 0022 84E0      		ldi r24,lo8(4)
 593 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 594               	.LVL53:
 595               	.LBE142:
 596               	.LBE141:
 597               		.cfi_endproc
 598               	.LFE126:
 600               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 601               	.global	EVENT_USB_Device_ControlRequest
 603               	EVENT_USB_Device_ControlRequest:
 604               	.LFB127:
 477:tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 605               		.loc 1 477 0
 606               		.cfi_startproc
 607               	/* prologue: function */
 608               	/* frame size = 0 */
 609               	/* stack size = 0 */
 610               	.L__stack_usage = 0
 611               	.LVL54:
 482:tmk_core/protocol/lufa/lufa.c ****     {
 612               		.loc 1 482 0
 613 0000 8091 0000 		lds r24,USB_ControlRequest+1
 614 0004 8330      		cpi r24,lo8(3)
 615 0006 01F4      		brne .+2
 616 0008 00C0      		rjmp .L66
 617 000a 00F4      		brsh .L67
 618 000c 8130      		cpi r24,lo8(1)
 619 000e 01F0      		breq .L68
 620 0010 8230      		cpi r24,lo8(2)
 621 0012 01F4      		brne .+2
 622 0014 00C0      		rjmp .L69
 623 0016 0895      		ret
 624               	.L67:
 625 0018 8A30      		cpi r24,lo8(10)
 626 001a 01F4      		brne .+2
 627 001c 00C0      		rjmp .L70
 628 001e 8B30      		cpi r24,lo8(11)
 629 0020 01F4      		brne .+2
 630 0022 00C0      		rjmp .L71
 631 0024 8930      		cpi r24,lo8(9)
 632 0026 01F0      		breq .+2
 633 0028 00C0      		rjmp .L64
 634 002a 00C0      		rjmp .L95
 635               	.L68:
 485:tmk_core/protocol/lufa/lufa.c ****             {
 636               		.loc 1 485 0
 637 002c 8091 0000 		lds r24,USB_ControlRequest
 638 0030 813A      		cpi r24,lo8(-95)
 639 0032 01F0      		breq .+2
 640 0034 00C0      		rjmp .L64
 641               	.LBB143:
 642               	.LBB144:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 643               		.loc 2 444 0
 644 0036 8091 E800 		lds r24,232
 645 003a 877F      		andi r24,lo8(-9)
 646 003c 8093 E800 		sts 232,r24
 647               	.LBE144:
 648               	.LBE143:
 490:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 649               		.loc 1 490 0
 650 0040 8091 0000 		lds r24,USB_ControlRequest+4
 651 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 652 0048 892B      		or r24,r25
 653 004a 01F4      		brne .L92
 494:tmk_core/protocol/lufa/lufa.c ****                     break;
 654               		.loc 1 494 0
 655 004c 60E2      		ldi r22,lo8(32)
 493:tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 656               		.loc 1 493 0
 657 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 658 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 659 0052 00C0      		rjmp .L74
 660               	.L92:
 479:tmk_core/protocol/lufa/lufa.c **** 
 661               		.loc 1 479 0
 662 0054 60E0      		ldi r22,0
 478:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 663               		.loc 1 478 0
 664 0056 80E0      		ldi r24,0
 665 0058 90E0      		ldi r25,0
 666               	.L74:
 667               	.LVL55:
 499:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 668               		.loc 1 499 0
 669 005a 70E0      		ldi r23,0
 670 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 671               	.LVL56:
 672               	.LBB145:
 673               	.LBB146:
 457:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 674               		.loc 2 471 0
 675 0060 8091 E800 		lds r24,232
 676 0064 8B77      		andi r24,lo8(123)
 677 0066 8093 E800 		sts 232,r24
 678 006a 0895      		ret
 679               	.LVL57:
 680               	.L95:
 681               	.LBE146:
 682               	.LBE145:
 505:tmk_core/protocol/lufa/lufa.c ****             {
 683               		.loc 1 505 0
 684 006c 8091 0000 		lds r24,USB_ControlRequest
 685 0070 8132      		cpi r24,lo8(33)
 686 0072 01F0      		breq .+2
 687 0074 00C0      		rjmp .L64
 509:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 688               		.loc 1 509 0
 689 0076 8091 0000 		lds r24,USB_ControlRequest+4
 690 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 691 007e 0297      		sbiw r24,2
 692 0080 00F0      		brlo .+2
 693 0082 00C0      		rjmp .L64
 694               	.LBB147:
 695               	.LBB148:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 696               		.loc 2 444 0
 697 0084 8091 E800 		lds r24,232
 698 0088 877F      		andi r24,lo8(-9)
 699 008a 8093 E800 		sts 232,r24
 700               	.L78:
 701               	.LBE148:
 702               	.LBE147:
 703               	.LBB149:
 704               	.LBB150:
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 705               		.loc 2 419 0
 706 008e 8091 E800 		lds r24,232
 707               	.LBE150:
 708               	.LBE149:
 516:tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 709               		.loc 1 516 0
 710 0092 82FD      		sbrc r24,2
 711 0094 00C0      		rjmp .L96
 517:tmk_core/protocol/lufa/lufa.c ****                           return;
 712               		.loc 1 517 0
 713 0096 8091 0000 		lds r24,USB_DeviceState
 714 009a 8111      		cpse r24,__zero_reg__
 715 009c 00C0      		rjmp .L78
 716 009e 00C0      		rjmp .L64
 717               	.L96:
 718               	.LBB151:
 719               	.LBB152:
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 720               		.loc 2 227 0
 721 00a0 2091 F300 		lds r18,243
 722 00a4 8091 F200 		lds r24,242
 723               	.LBE152:
 724               	.LBE151:
 521:tmk_core/protocol/lufa/lufa.c ****                       uint8_t report_id = Endpoint_Read_8();
 725               		.loc 1 521 0
 726 00a8 90E0      		ldi r25,0
 727 00aa 922B      		or r25,r18
 728 00ac 0297      		sbiw r24,2
 729 00ae 01F4      		brne .L80
 730               	.LBB153:
 731               	.LBB154:
 732               	.LBB155:
 472:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 733               		.loc 2 542 0
 734 00b0 8091 F100 		lds r24,241
 735               	.LBE155:
 736               	.LBE154:
 524:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 737               		.loc 1 524 0
 738 00b4 8B7F      		andi r24,lo8(-5)
 739 00b6 8130      		cpi r24,lo8(1)
 740 00b8 01F4      		brne .L81
 741               	.L80:
 742               	.LBE153:
 743               	.LBB156:
 744               	.LBB157:
 745               		.loc 2 542 0
 746 00ba 8091 F100 		lds r24,241
 747               	.LBE157:
 748               	.LBE156:
 528:tmk_core/protocol/lufa/lufa.c ****                     }
 749               		.loc 1 528 0
 750 00be 8093 0000 		sts keyboard_led_stats,r24
 751               	.L81:
 752               	.LBB158:
 753               	.LBB159:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 754               		.loc 2 471 0
 755 00c2 8091 E800 		lds r24,232
 756 00c6 8B77      		andi r24,lo8(123)
 757 00c8 00C0      		rjmp .L93
 758               	.L66:
 759               	.LBE159:
 760               	.LBE158:
 541:tmk_core/protocol/lufa/lufa.c ****             {
 761               		.loc 1 541 0
 762 00ca 8091 0000 		lds r24,USB_ControlRequest
 763 00ce 813A      		cpi r24,lo8(-95)
 764 00d0 01F0      		breq .+2
 765 00d2 00C0      		rjmp .L64
 543:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 766               		.loc 1 543 0
 767 00d4 8091 0000 		lds r24,USB_ControlRequest+4
 768 00d8 9091 0000 		lds r25,USB_ControlRequest+4+1
 769 00dc 892B      		or r24,r25
 770 00de 01F0      		breq .+2
 771 00e0 00C0      		rjmp .L64
 772               	.LBB160:
 773               	.LBB161:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 774               		.loc 2 444 0
 775 00e2 8091 E800 		lds r24,232
 776 00e6 877F      		andi r24,lo8(-9)
 777 00e8 8093 E800 		sts 232,r24
 778               	.L82:
 779               	.LBE161:
 780               	.LBE160:
 781               	.LBB162:
 782               	.LBB163:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 783               		.loc 2 407 0 discriminator 1
 784 00ec 8091 E800 		lds r24,232
 785               	.LBE163:
 786               	.LBE162:
 545:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 787               		.loc 1 545 0 discriminator 1
 788 00f0 80FF      		sbrs r24,0
 789 00f2 00C0      		rjmp .L82
 546:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 790               		.loc 1 546 0
 791 00f4 8091 0000 		lds r24,keyboard_protocol
 792               	.LVL58:
 793 00f8 00C0      		rjmp .L94
 794               	.LVL59:
 795               	.L71:
 554:tmk_core/protocol/lufa/lufa.c ****             {
 796               		.loc 1 554 0
 797 00fa 8091 0000 		lds r24,USB_ControlRequest
 798 00fe 8132      		cpi r24,lo8(33)
 799 0100 01F4      		brne .L64
 556:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 800               		.loc 1 556 0
 801 0102 8091 0000 		lds r24,USB_ControlRequest+4
 802 0106 9091 0000 		lds r25,USB_ControlRequest+4+1
 803 010a 892B      		or r24,r25
 804 010c 01F4      		brne .L64
 805               	.LBB164:
 806               	.LBB165:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 807               		.loc 2 444 0
 808 010e 8091 E800 		lds r24,232
 809 0112 877F      		andi r24,lo8(-9)
 810 0114 8093 E800 		sts 232,r24
 811               	.LBE165:
 812               	.LBE164:
 558:tmk_core/protocol/lufa/lufa.c **** 
 813               		.loc 1 558 0
 814 0118 0E94 0000 		call Endpoint_ClearStatusStage
 815               	.LVL60:
 560:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 816               		.loc 1 560 0
 817 011c 8091 0000 		lds r24,USB_ControlRequest+2
 818 0120 8093 0000 		sts keyboard_protocol,r24
 561:tmk_core/protocol/lufa/lufa.c ****                 }
 819               		.loc 1 561 0
 820 0124 0C94 0000 		jmp clear_keyboard
 821               	.LVL61:
 822               	.L70:
 567:tmk_core/protocol/lufa/lufa.c ****             {
 823               		.loc 1 567 0
 824 0128 8091 0000 		lds r24,USB_ControlRequest
 825 012c 8132      		cpi r24,lo8(33)
 826 012e 01F4      		brne .L64
 827               	.LBB166:
 828               	.LBB167:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 829               		.loc 2 444 0
 830 0130 8091 E800 		lds r24,232
 831 0134 877F      		andi r24,lo8(-9)
 832 0136 8093 E800 		sts 232,r24
 833               	.LBE167:
 834               	.LBE166:
 570:tmk_core/protocol/lufa/lufa.c **** 
 835               		.loc 1 570 0
 836 013a 0E94 0000 		call Endpoint_ClearStatusStage
 837               	.LVL62:
 572:tmk_core/protocol/lufa/lufa.c ****             }
 838               		.loc 1 572 0
 839 013e 8091 0000 		lds r24,USB_ControlRequest+3
 840 0142 8093 0000 		sts keyboard_idle,r24
 841 0146 0895      		ret
 842               	.L69:
 577:tmk_core/protocol/lufa/lufa.c ****             {
 843               		.loc 1 577 0
 844 0148 8091 0000 		lds r24,USB_ControlRequest
 845 014c 813A      		cpi r24,lo8(-95)
 846 014e 01F4      		brne .L64
 847               	.LBB168:
 848               	.LBB169:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 849               		.loc 2 444 0
 850 0150 8091 E800 		lds r24,232
 851 0154 877F      		andi r24,lo8(-9)
 852 0156 8093 E800 		sts 232,r24
 853               	.L83:
 854               	.LBE169:
 855               	.LBE168:
 856               	.LBB170:
 857               	.LBB171:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 858               		.loc 2 407 0 discriminator 1
 859 015a 8091 E800 		lds r24,232
 860               	.LBE171:
 861               	.LBE170:
 580:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 862               		.loc 1 580 0 discriminator 1
 863 015e 80FF      		sbrs r24,0
 864 0160 00C0      		rjmp .L83
 581:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 865               		.loc 1 581 0
 866 0162 8091 0000 		lds r24,keyboard_idle
 867               	.L94:
 868               	.LVL63:
 869               	.LBB172:
 870               	.LBB173:
 543:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 871               		.loc 2 554 0
 872 0166 8093 F100 		sts 241,r24
 873               	.LVL64:
 874               	.LBE173:
 875               	.LBE172:
 876               	.LBB174:
 877               	.LBB175:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 878               		.loc 2 456 0
 879 016a 8091 E800 		lds r24,232
 880 016e 8E77      		andi r24,lo8(126)
 881               	.L93:
 882 0170 8093 E800 		sts 232,r24
 883               	.LBE175:
 884               	.LBE174:
 583:tmk_core/protocol/lufa/lufa.c ****             }
 885               		.loc 1 583 0
 886 0174 0C94 0000 		jmp Endpoint_ClearStatusStage
 887               	.LVL65:
 888               	.L64:
 889 0178 0895      		ret
 890               		.cfi_endproc
 891               	.LFE127:
 893               		.section	.text.sendchar,"ax",@progbits
 894               	.global	sendchar
 896               	sendchar:
 897               	.LFB133:
 774:tmk_core/protocol/lufa/lufa.c **** 
 775:tmk_core/protocol/lufa/lufa.c **** 
 776:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 777:tmk_core/protocol/lufa/lufa.c ****  * sendchar
 778:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 779:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 780:tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 781:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 782:tmk_core/protocol/lufa/lufa.c ****  *
 783:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 784:tmk_core/protocol/lufa/lufa.c ****  */
 785:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 786:tmk_core/protocol/lufa/lufa.c **** {
 787:tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 788:tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 789:tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 790:tmk_core/protocol/lufa/lufa.c **** 
 791:tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 792:tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 793:tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 794:tmk_core/protocol/lufa/lufa.c **** 
 795:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 796:tmk_core/protocol/lufa/lufa.c ****         return -1;
 797:tmk_core/protocol/lufa/lufa.c **** 
 798:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 799:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 800:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 801:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 802:tmk_core/protocol/lufa/lufa.c ****     }
 803:tmk_core/protocol/lufa/lufa.c **** 
 804:tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 805:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 806:tmk_core/protocol/lufa/lufa.c ****     }
 807:tmk_core/protocol/lufa/lufa.c **** 
 808:tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 809:tmk_core/protocol/lufa/lufa.c **** 
 810:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 811:tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 812:tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 813:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 814:tmk_core/protocol/lufa/lufa.c ****         }
 815:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 816:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 817:tmk_core/protocol/lufa/lufa.c ****         }
 818:tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 819:tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 820:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 821:tmk_core/protocol/lufa/lufa.c ****         }
 822:tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 823:tmk_core/protocol/lufa/lufa.c ****     }
 824:tmk_core/protocol/lufa/lufa.c **** 
 825:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 826:tmk_core/protocol/lufa/lufa.c **** 
 827:tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 828:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 829:tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 830:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 831:tmk_core/protocol/lufa/lufa.c ****     } else {
 832:tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 833:tmk_core/protocol/lufa/lufa.c ****     }
 834:tmk_core/protocol/lufa/lufa.c **** 
 835:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 836:tmk_core/protocol/lufa/lufa.c ****     return 0;
 837:tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 838:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 839:tmk_core/protocol/lufa/lufa.c ****     return -1;
 840:tmk_core/protocol/lufa/lufa.c **** }
 841:tmk_core/protocol/lufa/lufa.c **** #else
 842:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 843:tmk_core/protocol/lufa/lufa.c **** {
 898               		.loc 1 843 0
 899               		.cfi_startproc
 900               	.LVL66:
 901               	/* prologue: function */
 902               	/* frame size = 0 */
 903               	/* stack size = 0 */
 904               	.L__stack_usage = 0
 844:tmk_core/protocol/lufa/lufa.c ****     return 0;
 845:tmk_core/protocol/lufa/lufa.c **** }
 905               		.loc 1 845 0
 906 0000 80E0      		ldi r24,0
 907               	.LVL67:
 908 0002 0895      		ret
 909               		.cfi_endproc
 910               	.LFE133:
 912               		.section	.text.send_midi_packet,"ax",@progbits
 913               	.global	send_midi_packet
 915               	send_midi_packet:
 916               	.LFB134:
 846:tmk_core/protocol/lufa/lufa.c **** #endif
 847:tmk_core/protocol/lufa/lufa.c **** 
 848:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 849:tmk_core/protocol/lufa/lufa.c ****  * MIDI
 850:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 851:tmk_core/protocol/lufa/lufa.c **** 
 852:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 853:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 854:tmk_core/protocol/lufa/lufa.c **** {
 855:tmk_core/protocol/lufa/lufa.c ****   .Config =
 856:tmk_core/protocol/lufa/lufa.c ****   {
 857:tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 858:tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 859:tmk_core/protocol/lufa/lufa.c ****     {
 860:tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 861:tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 862:tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 863:tmk_core/protocol/lufa/lufa.c ****     },
 864:tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 865:tmk_core/protocol/lufa/lufa.c ****     {
 866:tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 867:tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 868:tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 869:tmk_core/protocol/lufa/lufa.c ****     },
 870:tmk_core/protocol/lufa/lufa.c ****   },
 871:tmk_core/protocol/lufa/lufa.c **** };
 872:tmk_core/protocol/lufa/lufa.c **** 
 873:tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t* event) {
 917               		.loc 1 873 0
 918               		.cfi_startproc
 919               	.LVL68:
 920               	/* prologue: function */
 921               	/* frame size = 0 */
 922               	/* stack size = 0 */
 923               	.L__stack_usage = 0
 874:tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, event);
 924               		.loc 1 874 0
 925 0000 BC01      		movw r22,r24
 926 0002 80E0      		ldi r24,lo8(USB_MIDI_Interface)
 927 0004 90E0      		ldi r25,hi8(USB_MIDI_Interface)
 928               	.LVL69:
 929 0006 0C94 0000 		jmp MIDI_Device_SendEventPacket
 930               	.LVL70:
 931               		.cfi_endproc
 932               	.LFE134:
 934               		.section	.text.recv_midi_packet,"ax",@progbits
 935               	.global	recv_midi_packet
 937               	recv_midi_packet:
 938               	.LFB135:
 875:tmk_core/protocol/lufa/lufa.c **** }
 876:tmk_core/protocol/lufa/lufa.c **** 
 877:tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t* const event) {
 939               		.loc 1 877 0
 940               		.cfi_startproc
 941               	.LVL71:
 942               	/* prologue: function */
 943               	/* frame size = 0 */
 944               	/* stack size = 0 */
 945               	.L__stack_usage = 0
 878:tmk_core/protocol/lufa/lufa.c ****   return MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, event);
 946               		.loc 1 878 0
 947 0000 BC01      		movw r22,r24
 948 0002 80E0      		ldi r24,lo8(USB_MIDI_Interface)
 949 0004 90E0      		ldi r25,hi8(USB_MIDI_Interface)
 950               	.LVL72:
 951 0006 0C94 0000 		jmp MIDI_Device_ReceiveEventPacket
 952               	.LVL73:
 953               		.cfi_endproc
 954               	.LFE135:
 956               		.section	.text.Init_ADC1,"ax",@progbits
 957               	.global	Init_ADC1
 959               	Init_ADC1:
 960               	.LFB138:
 879:tmk_core/protocol/lufa/lufa.c **** }
 880:tmk_core/protocol/lufa/lufa.c **** 
 881:tmk_core/protocol/lufa/lufa.c **** #endif
 882:tmk_core/protocol/lufa/lufa.c **** 
 883:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 884:tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 885:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 886:tmk_core/protocol/lufa/lufa.c **** 
 887:tmk_core/protocol/lufa/lufa.c **** 
 888:tmk_core/protocol/lufa/lufa.c **** 
 889:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 890:tmk_core/protocol/lufa/lufa.c ****  * main
 891:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 892:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 893:tmk_core/protocol/lufa/lufa.c ****  *
 894:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 895:tmk_core/protocol/lufa/lufa.c ****  */
 896:tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 897:tmk_core/protocol/lufa/lufa.c **** {
 898:tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 899:tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 900:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 901:tmk_core/protocol/lufa/lufa.c **** 
 902:tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 903:tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 904:tmk_core/protocol/lufa/lufa.c **** 
 905:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 906:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 907:tmk_core/protocol/lufa/lufa.c **** }
 908:tmk_core/protocol/lufa/lufa.c **** 
 909:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
 910:tmk_core/protocol/lufa/lufa.c ****  *
 911:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 912:tmk_core/protocol/lufa/lufa.c ****  */
 913:tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
 914:tmk_core/protocol/lufa/lufa.c **** {
 915:tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
 916:tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
 917:tmk_core/protocol/lufa/lufa.c **** 
 918:tmk_core/protocol/lufa/lufa.c ****     USB_Init();
 919:tmk_core/protocol/lufa/lufa.c **** 
 920:tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
 921:tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
 922:tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 923:tmk_core/protocol/lufa/lufa.c **** }
 924:tmk_core/protocol/lufa/lufa.c **** 
 925:tmk_core/protocol/lufa/lufa.c **** /** \brief Main
 926:tmk_core/protocol/lufa/lufa.c ****  *
 927:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 928:tmk_core/protocol/lufa/lufa.c ****  */
 929:tmk_core/protocol/lufa/lufa.c **** void Init_ADC1(void){
 961               		.loc 1 929 0
 962               		.cfi_startproc
 963               	/* prologue: function */
 964               	/* frame size = 0 */
 965               	/* stack size = 0 */
 966               	.L__stack_usage = 0
 930:tmk_core/protocol/lufa/lufa.c **** 
 931:tmk_core/protocol/lufa/lufa.c **** 	ADMUX = ( 1 << REFS0);   // External reference voltage on Avcc with capacitor
 967               		.loc 1 931 0
 968 0000 80E4      		ldi r24,lo8(64)
 969 0002 8093 7C00 		sts 124,r24
 932:tmk_core/protocol/lufa/lufa.c **** 	ADCSRB |= ( 1 << MUX5); //ADC 8
 970               		.loc 1 932 0
 971 0006 EBE7      		ldi r30,lo8(123)
 972 0008 F0E0      		ldi r31,0
 973 000a 8081      		ld r24,Z
 974 000c 8062      		ori r24,lo8(32)
 975 000e 8083      		st Z,r24
 933:tmk_core/protocol/lufa/lufa.c **** 	ADCSRA =(1 << ADPS2)| (1 << ADPS1) |(1 << ADPS0); // prescale /128 consider 8MHZ clock
 976               		.loc 1 933 0
 977 0010 EAE7      		ldi r30,lo8(122)
 978 0012 F0E0      		ldi r31,0
 979 0014 87E0      		ldi r24,lo8(7)
 980 0016 8083      		st Z,r24
 934:tmk_core/protocol/lufa/lufa.c **** 	ADCSRA |= ( 1 << ADEN );  // Enable ADC
 981               		.loc 1 934 0
 982 0018 8081      		ld r24,Z
 983 001a 8068      		ori r24,lo8(-128)
 984 001c 8083      		st Z,r24
 985 001e 0895      		ret
 986               		.cfi_endproc
 987               	.LFE138:
 989               		.section	.text.AMP_calculator,"ax",@progbits
 990               	.global	AMP_calculator
 992               	AMP_calculator:
 993               	.LFB139:
 935:tmk_core/protocol/lufa/lufa.c **** }
 936:tmk_core/protocol/lufa/lufa.c **** 
 937:tmk_core/protocol/lufa/lufa.c **** uint16_t AMP_calculator(void){
 994               		.loc 1 937 0
 995               		.cfi_startproc
 996               	/* prologue: function */
 997               	/* frame size = 0 */
 998               	/* stack size = 0 */
 999               	.L__stack_usage = 0
 938:tmk_core/protocol/lufa/lufa.c **** 	uint16_t sample_f;
 939:tmk_core/protocol/lufa/lufa.c **** 	ADCSRA |= (1<<ADSC);  //Start ADC conversion
 1000               		.loc 1 939 0
 1001 0000 8091 7A00 		lds r24,122
 1002 0004 8064      		ori r24,lo8(64)
 1003 0006 8093 7A00 		sts 122,r24
 1004               	.L102:
 940:tmk_core/protocol/lufa/lufa.c **** 	while((ADCSRA & (1 << ADSC))){;}
 1005               		.loc 1 940 0 discriminator 1
 1006 000a 8091 7A00 		lds r24,122
 1007 000e 86FD      		sbrc r24,6
 1008 0010 00C0      		rjmp .L102
 941:tmk_core/protocol/lufa/lufa.c **** 	sample_f = ADC ;
 1009               		.loc 1 941 0
 1010 0012 8091 7800 		lds r24,120
 1011 0016 9091 7900 		lds r25,120+1
 1012               	.LVL74:
 942:tmk_core/protocol/lufa/lufa.c **** 	return (sample_f >> 3);
 943:tmk_core/protocol/lufa/lufa.c **** }
 1013               		.loc 1 943 0
 1014 001a 23E0      		ldi r18,3
 1015               		1:
 1016 001c 9695      		lsr r25
 1017 001e 8795      		ror r24
 1018 0020 2A95      		dec r18
 1019 0022 01F4      		brne 1b
 1020               	.LVL75:
 1021 0024 0895      		ret
 1022               		.cfi_endproc
 1023               	.LFE139:
 1025               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 1026               	.global	CALLBACK_USB_GetDescriptor
 1028               	CALLBACK_USB_GetDescriptor:
 1029               	.LFB141:
 944:tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
 945:tmk_core/protocol/lufa/lufa.c **** int main(void)
 946:tmk_core/protocol/lufa/lufa.c **** {
 947:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 948:tmk_core/protocol/lufa/lufa.c ****     setup_midi();
 949:tmk_core/protocol/lufa/lufa.c **** #endif
 950:tmk_core/protocol/lufa/lufa.c ****     midi_device_init(&midi_device);
 951:tmk_core/protocol/lufa/lufa.c ****     Init_ADC1();
 952:tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 953:tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 954:tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 955:tmk_core/protocol/lufa/lufa.c ****     sei();
 956:tmk_core/protocol/lufa/lufa.c **** 
 957:tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
 958:tmk_core/protocol/lufa/lufa.c ****     serial_init();
 959:tmk_core/protocol/lufa/lufa.c **** #endif
 960:tmk_core/protocol/lufa/lufa.c **** 
 961:tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
 962:tmk_core/protocol/lufa/lufa.c **** 
 963:tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
 964:tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
 965:tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
 966:tmk_core/protocol/lufa/lufa.c ****             ;
 967:tmk_core/protocol/lufa/lufa.c ****     #else
 968:tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
 969:tmk_core/protocol/lufa/lufa.c ****     #endif
 970:tmk_core/protocol/lufa/lufa.c ****     }
 971:tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
 972:tmk_core/protocol/lufa/lufa.c **** #else
 973:tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 974:tmk_core/protocol/lufa/lufa.c **** #endif
 975:tmk_core/protocol/lufa/lufa.c ****     /* init modules */
 976:tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 977:tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 978:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 979:tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
 980:tmk_core/protocol/lufa/lufa.c **** #endif
 981:tmk_core/protocol/lufa/lufa.c **** 
 982:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 983:tmk_core/protocol/lufa/lufa.c ****     virtser_init();
 984:tmk_core/protocol/lufa/lufa.c **** #endif
 985:tmk_core/protocol/lufa/lufa.c **** 
 986:tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 987:tmk_core/protocol/lufa/lufa.c ****     while (1) {
 988:tmk_core/protocol/lufa/lufa.c **** 
 989:tmk_core/protocol/lufa/lufa.c ****          CheckJoystickMovement();
 990:tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 991:tmk_core/protocol/lufa/lufa.c **** 
 992:tmk_core/protocol/lufa/lufa.c **** 
 993:tmk_core/protocol/lufa/lufa.c **** 		MIDI_Device_USBTask(&USB_MIDI_Interface);
 994:tmk_core/protocol/lufa/lufa.c **** 		USB_USBTask();
 995:tmk_core/protocol/lufa/lufa.c **** 
 996:tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
 997:tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
 998:tmk_core/protocol/lufa/lufa.c **** #endif
 999:tmk_core/protocol/lufa/lufa.c **** 
1000:tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1001:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1002:tmk_core/protocol/lufa/lufa.c **** #endif
1003:tmk_core/protocol/lufa/lufa.c **** 
1004:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1005:tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1006:tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1007:tmk_core/protocol/lufa/lufa.c **** #endif
1008:tmk_core/protocol/lufa/lufa.c **** 
1009:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1010:tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1011:tmk_core/protocol/lufa/lufa.c **** #endif
1012:tmk_core/protocol/lufa/lufa.c **** 
1013:tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1014:tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1015:tmk_core/protocol/lufa/lufa.c **** #endif
1016:tmk_core/protocol/lufa/lufa.c **** 
1017:tmk_core/protocol/lufa/lufa.c ****     }
1018:tmk_core/protocol/lufa/lufa.c **** }
1019:tmk_core/protocol/lufa/lufa.c **** 
1020:tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
1021:tmk_core/protocol/lufa/lufa.c ****                                     const uint16_t wIndex,
1022:tmk_core/protocol/lufa/lufa.c ****                                     const void** const DescriptorAddress)
1023:tmk_core/protocol/lufa/lufa.c **** {
 1030               		.loc 1 1023 0
 1031               		.cfi_startproc
 1032               	.LVL76:
 1033               	/* prologue: function */
 1034               	/* frame size = 0 */
 1035               	/* stack size = 0 */
 1036               	.L__stack_usage = 0
1024:tmk_core/protocol/lufa/lufa.c ****   return get_usb_descriptor(wValue, wIndex, DescriptorAddress);
 1037               		.loc 1 1024 0
 1038 0000 0C94 0000 		jmp get_usb_descriptor
 1039               	.LVL77:
 1040               		.cfi_endproc
 1041               	.LFE141:
 1043               		.section	.text.CheckJoystickMovement,"ax",@progbits
 1044               	.global	CheckJoystickMovement
 1046               	CheckJoystickMovement:
 1047               	.LFB142:
1025:tmk_core/protocol/lufa/lufa.c **** }
1026:tmk_core/protocol/lufa/lufa.c **** 
1027:tmk_core/protocol/lufa/lufa.c **** void CheckJoystickMovement(void)
1028:tmk_core/protocol/lufa/lufa.c **** 
1029:tmk_core/protocol/lufa/lufa.c **** {
 1048               		.loc 1 1029 0
 1049               		.cfi_startproc
 1050 0000 CF93      		push r28
 1051               	.LCFI12:
 1052               		.cfi_def_cfa_offset 3
 1053               		.cfi_offset 28, -2
 1054 0002 DF93      		push r29
 1055               	.LCFI13:
 1056               		.cfi_def_cfa_offset 4
 1057               		.cfi_offset 29, -3
 1058 0004 00D0      		rcall .
 1059 0006 00D0      		rcall .
 1060               	.LCFI14:
 1061               		.cfi_def_cfa_offset 8
 1062 0008 CDB7      		in r28,__SP_L__
 1063 000a DEB7      		in r29,__SP_H__
 1064               	.LCFI15:
 1065               		.cfi_def_cfa_register 28
 1066               	/* prologue: function */
 1067               	/* frame size = 4 */
 1068               	/* stack size = 6 */
 1069               	.L__stack_usage = 6
 1070               	.LVL78:
1030:tmk_core/protocol/lufa/lufa.c **** 
1031:tmk_core/protocol/lufa/lufa.c **** 	// Static variable to hold previous buttons status
1032:tmk_core/protocol/lufa/lufa.c **** 
1033:tmk_core/protocol/lufa/lufa.c **** 
1034:tmk_core/protocol/lufa/lufa.c **** 	// Initialise MIDI command to zero
1035:tmk_core/protocol/lufa/lufa.c **** 
1036:tmk_core/protocol/lufa/lufa.c **** 	uint8_t MIDICommand = MIDI_COMMAND_CONTROL_CHANGE;
1037:tmk_core/protocol/lufa/lufa.c **** 
1038:tmk_core/protocol/lufa/lufa.c **** 	// Variable to hold MIDI pitch value
1039:tmk_core/protocol/lufa/lufa.c **** 
1040:tmk_core/protocol/lufa/lufa.c **** 	uint8_t MIDIVelocity  = 127 - AMP_calculator();
 1071               		.loc 1 1040 0
 1072 000c 0E94 0000 		call AMP_calculator
 1073               	.LVL79:
 1074               	.LBB176:
1041:tmk_core/protocol/lufa/lufa.c **** 
1042:tmk_core/protocol/lufa/lufa.c **** 
1043:tmk_core/protocol/lufa/lufa.c **** 	/* Variable to store MIDI Velocity value
1044:tmk_core/protocol/lufa/lufa.c **** 
1045:tmk_core/protocol/lufa/lufa.c **** 	* The default value of 100 is stored
1046:tmk_core/protocol/lufa/lufa.c **** 
1047:tmk_core/protocol/lufa/lufa.c **** 	* Value between 0 and 127, can be stored
1048:tmk_core/protocol/lufa/lufa.c **** 
1049:tmk_core/protocol/lufa/lufa.c **** 	* as per loudness or Volume Gain required
1050:tmk_core/protocol/lufa/lufa.c **** 
1051:tmk_core/protocol/lufa/lufa.c **** 	*/
1052:tmk_core/protocol/lufa/lufa.c **** 
1053:tmk_core/protocol/lufa/lufa.c **** 	uint8_t MIDIPitch = 0x3E;
1054:tmk_core/protocol/lufa/lufa.c **** 
1055:tmk_core/protocol/lufa/lufa.c ****   uint8_t Channel = 2;
1056:tmk_core/protocol/lufa/lufa.c **** 
1057:tmk_core/protocol/lufa/lufa.c **** 	if (MIDICommand)
1058:tmk_core/protocol/lufa/lufa.c **** 
1059:tmk_core/protocol/lufa/lufa.c **** 	{
1060:tmk_core/protocol/lufa/lufa.c **** 
1061:tmk_core/protocol/lufa/lufa.c **** 		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 1075               		.loc 1 1061 0
 1076 0010 9BE0      		ldi r25,lo8(11)
 1077 0012 9983      		std Y+1,r25
 1078 0014 92EB      		ldi r25,lo8(-78)
 1079 0016 9A83      		std Y+2,r25
 1080 0018 9EE3      		ldi r25,lo8(62)
 1081 001a 9B83      		std Y+3,r25
 1082 001c 9FE7      		ldi r25,lo8(127)
 1083 001e 981B      		sub r25,r24
 1084               	.LVL80:
 1085 0020 9C83      		std Y+4,r25
1062:tmk_core/protocol/lufa/lufa.c **** 
1063:tmk_core/protocol/lufa/lufa.c **** 		{
1064:tmk_core/protocol/lufa/lufa.c **** 
1065:tmk_core/protocol/lufa/lufa.c **** 			.Event       = MIDI_EVENT(0, MIDICommand),
1066:tmk_core/protocol/lufa/lufa.c **** 
1067:tmk_core/protocol/lufa/lufa.c **** 
1068:tmk_core/protocol/lufa/lufa.c **** 			.Data1       = MIDICommand | Channel,
1069:tmk_core/protocol/lufa/lufa.c **** 
1070:tmk_core/protocol/lufa/lufa.c **** 			.Data2       = MIDIPitch,
1071:tmk_core/protocol/lufa/lufa.c **** 
1072:tmk_core/protocol/lufa/lufa.c **** 			.Data3       = MIDIVelocity,
1073:tmk_core/protocol/lufa/lufa.c **** 
1074:tmk_core/protocol/lufa/lufa.c **** 		};
1075:tmk_core/protocol/lufa/lufa.c **** 
1076:tmk_core/protocol/lufa/lufa.c **** 
1077:tmk_core/protocol/lufa/lufa.c **** 		MIDI_Device_SendEventPacket(&USB_MIDI_Interface, &MIDIEvent);
 1086               		.loc 1 1077 0
 1087 0022 BE01      		movw r22,r28
 1088 0024 6F5F      		subi r22,-1
 1089 0026 7F4F      		sbci r23,-1
 1090 0028 80E0      		ldi r24,lo8(USB_MIDI_Interface)
 1091 002a 90E0      		ldi r25,hi8(USB_MIDI_Interface)
 1092 002c 0E94 0000 		call MIDI_Device_SendEventPacket
 1093               	.LVL81:
1078:tmk_core/protocol/lufa/lufa.c **** 
1079:tmk_core/protocol/lufa/lufa.c **** 		MIDI_Device_Flush(&USB_MIDI_Interface);
 1094               		.loc 1 1079 0
 1095 0030 80E0      		ldi r24,lo8(USB_MIDI_Interface)
 1096 0032 90E0      		ldi r25,hi8(USB_MIDI_Interface)
 1097 0034 0E94 0000 		call MIDI_Device_Flush
 1098               	.LVL82:
 1099               	/* epilogue start */
 1100               	.LBE176:
1080:tmk_core/protocol/lufa/lufa.c **** 
1081:tmk_core/protocol/lufa/lufa.c **** 	}
1082:tmk_core/protocol/lufa/lufa.c **** 
1083:tmk_core/protocol/lufa/lufa.c **** 
1084:tmk_core/protocol/lufa/lufa.c **** 
1085:tmk_core/protocol/lufa/lufa.c **** 
1086:tmk_core/protocol/lufa/lufa.c **** }
 1101               		.loc 1 1086 0
 1102 0038 0F90      		pop __tmp_reg__
 1103 003a 0F90      		pop __tmp_reg__
 1104 003c 0F90      		pop __tmp_reg__
 1105 003e 0F90      		pop __tmp_reg__
 1106 0040 DF91      		pop r29
 1107 0042 CF91      		pop r28
 1108 0044 0895      		ret
 1109               		.cfi_endproc
 1110               	.LFE142:
 1112               		.section	.text.startup.main,"ax",@progbits
 1113               		.weak	main
 1115               	main:
 1116               	.LFB140:
 946:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 1117               		.loc 1 946 0
 1118               		.cfi_startproc
 1119               	/* prologue: function */
 1120               	/* frame size = 0 */
 1121               	/* stack size = 0 */
 1122               	.L__stack_usage = 0
 948:tmk_core/protocol/lufa/lufa.c **** #endif
 1123               		.loc 1 948 0
 1124 0000 0E94 0000 		call setup_midi
 1125               	.LVL83:
 950:tmk_core/protocol/lufa/lufa.c ****     Init_ADC1();
 1126               		.loc 1 950 0
 1127 0004 80E0      		ldi r24,lo8(midi_device)
 1128 0006 90E0      		ldi r25,hi8(midi_device)
 1129 0008 0E94 0000 		call midi_device_init
 1130               	.LVL84:
 951:tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 1131               		.loc 1 951 0
 1132 000c 0E94 0000 		call Init_ADC1
 1133               	.LVL85:
 1134               	.LBB186:
 1135               	.LBB187:
 899:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1136               		.loc 1 899 0
 1137 0010 84B7      		in r24,0x34
 1138 0012 877F      		andi r24,lo8(-9)
 1139 0014 84BF      		out 0x34,r24
 1140               	.LBB188:
 1141               	.LBB189:
 1142               		.file 5 "d:\\program files\\msys2\\home\\bnguy\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\avr\\
   1:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    All rights reserved.
   4:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   5:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   8:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions of source code must retain the above copyright
   9:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  11:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      the documentation and/or other materials provided with the
  14:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      distribution.
  15:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  16:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      contributors may be used to endorse or promote products derived
  18:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      from this software without specific prior written permission.
  19:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  20:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  32:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* $Id$ */
  33:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  34:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
  35:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  */
  37:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  38:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef _AVR_WDT_H_
  39:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _AVR_WDT_H_
  40:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  41:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <avr/io.h>
  42:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <stdint.h>
  43:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  44:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \file */
  45:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  48:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     This header file declares the interface to some inline macros
  49:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     to prevent the watchdog timer configuration from being
  51:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     accidentally altered by a crashing application, a special timed
  52:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     sequence is required in order to change it.  The macros within
  53:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     this header file handle the required sequence automatically
  54:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the manipulation.
  56:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  57:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \note Depending on the fuse configuration of the particular
  58:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     device, further restrictions might apply, in particular it might
  59:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     be disallowed to turn off the watchdog timer.
  60:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  61:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     timer remains active even after a system reset (except a power-on
  64:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the following:
  68:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  69:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code
  70:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <stdint.h>
  71:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <avr/wdt.h>
  72:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  73:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  75:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void) \
  76:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((naked)) \
  77:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((section(".init3")));
  78:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void)
  79:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     {
  80:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       mcusr_mirror = MCUSR;
  81:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       MCUSR = 0;
  82:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       wdt_disable();
  83:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     }
  84:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \endcode
  85:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  86:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     clearing the watchdog reset flag before disabling the
  89:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     watchdog is required, according to the datasheet.
  90:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  91:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  92:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
  93:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
  94:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    a call to this instruction is required before the timer expires,
  96:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  98:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  99:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 101:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef __DOXYGEN__
 102:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 103:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDP3)
 104:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 106:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       0x00
 107:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 108:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 109:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTCSR)
 110:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(WDTCR)
 112:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 114:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 116:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 117:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTOE)
 118:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 120:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 122:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 123:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif	/* !__DOXYGEN__ */
 124:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 125:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 126:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
 127:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
 128:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    through \c WDP3 bits).
 133:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 134:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 136:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 137:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 138:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(__AVR_XMEGA__)
 139:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 140:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 142:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 143:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 144:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 145:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 146:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"wdr"									"\n\t" \
 147:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	: [tmp]					"=r" (temp) \
 155:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 162:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 163:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 164:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 165:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 166:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 167:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 168:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"wdr"								"\n\t" \
 169:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]            "=r" (temp) \
 174:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 179:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 180:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 181:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 183:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
 184:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    wdt_enable(timeout) for xmega devices
 185:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    registers to the CCP register
 187:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** At the same time,
 188:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    3) set timeout (timeout)
 191:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    sync is finished).
 194:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 195:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 196:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 197:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 198:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (         \
 199:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]                "=r" (temp) \
 208:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 216:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 217:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 218:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 219:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 220:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 221:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : \
 227:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 233:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** );
 234:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 235:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 237:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(__AVR_TINY__)
 238:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 239:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(value) \
 240:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 241:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 243:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 244:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /* no outputs */  \
 248:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 254:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** )
 255:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 256:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 257:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 258:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp_wd; \
 259:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 260:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 262:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 263:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /*no output */ \
 269:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 275:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 276:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }while(0)
 277:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 278:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(CCP)
 279:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 280:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 281:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 282:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 283:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 284:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 286:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 287:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 289:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 290:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 294:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 300:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 301:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 302:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 304:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 305:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 307:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 308:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 312:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 318:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 319:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 320:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 322:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 323:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 325:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 326:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 330:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 336:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 337:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 338:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 339:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  	{
 340:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 341:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 343:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 344:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 348:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 354:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 355:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 356:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 357:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 358:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 359:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 360:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 361:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 362:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 364:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 365:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 366:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 368:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 369:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 375:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 381:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 382:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 383:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 385:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 386:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 387:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 389:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 390:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 396:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 402:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 403:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 404:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 406:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 407:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 408:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 410:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 411:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 417:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 423:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 424:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 425:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 426:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 427:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 428:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 429:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 431:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 432:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 438:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 444:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 445:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 446:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 447:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 448:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 449:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 450:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 451:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 452:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 453:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 454:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 456:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 457:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 458:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 459:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 460:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %1" "\n\t"
 461:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 462:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %2" "\n \t"
 463:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 464:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 465:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 466:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 467:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 468:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 469:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 470:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 471:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 472:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 473:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 474:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 475:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 476:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 477:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %1" "\n\t"
 478:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 479:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %2" "\n \t"
 480:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 481:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 482:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 483:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 484:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 485:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 486:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 487:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 488:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 489:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 490:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 491:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 492:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 493:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 494:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 495:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 496:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 497:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 498:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 499:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli"                        "\n\t"
 500:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr"                        "\n\t"
 501:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 502:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 503:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 504:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 505:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 506:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 507:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 508:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 509:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 510:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 511:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 512:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 513:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 514:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 515:d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 1143               		.loc 5 515 0
 1144               	/* #APP */
 1145               	 ;  515 "d:\program files\msys2\home\bnguy\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h" 1
 1146 0016 0FB6      		in __tmp_reg__,__SREG__
 1147 0018 F894      		cli
 1148 001a A895      		wdr
 1149 001c 8091 6000 		lds r24,96
 1150 0020 8861      		ori r24,24
 1151 0022 8093 6000 		sts 96,r24
 1152 0026 1092 6000 		sts 96,__zero_reg__
 1153 002a 0FBE      		out __SREG__,__tmp_reg__
 1154               		
 1155               	 ;  0 "" 2
 1156               	/* #NOAPP */
 1157               	.LBE189:
 1158               	.LBE188:
 905:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1159               		.loc 1 905 0
 1160 002c 80E8      		ldi r24,lo8(-128)
 1161 002e 8093 6100 		sts 97,r24
 906:tmk_core/protocol/lufa/lufa.c **** }
 1162               		.loc 1 906 0
 1163 0032 1092 6100 		sts 97,__zero_reg__
 1164               	.LBE187:
 1165               	.LBE186:
 953:tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 1166               		.loc 1 953 0
 1167 0036 0E94 0000 		call keyboard_setup
 1168               	.LVL86:
 1169               	.LBB190:
 1170               	.LBB191:
 916:tmk_core/protocol/lufa/lufa.c **** 
 1171               		.loc 1 916 0
 1172 003a 0E94 0000 		call USB_Disable
 1173               	.LVL87:
 918:tmk_core/protocol/lufa/lufa.c **** 
 1174               		.loc 1 918 0
 1175 003e 0E94 0000 		call USB_Init
 1176               	.LVL88:
 1177               	.LBB192:
 1178               	.LBB193:
 1179               	.LBB194:
 1180               		.loc 4 113 0
 1181 0042 8091 E200 		lds r24,226
 1182 0046 8460      		ori r24,lo8(4)
 1183 0048 8093 E200 		sts 226,r24
 1184               	.LVL89:
 1185               	.LBE194:
 1186               	.LBE193:
 1187               	.LBE192:
 1188               	.LBE191:
 1189               	.LBE190:
 955:tmk_core/protocol/lufa/lufa.c **** 
 1190               		.loc 1 955 0
 1191               	/* #APP */
 1192               	 ;  955 "tmk_core/protocol/lufa/lufa.c" 1
 1193 004c 7894      		sei
 1194               	 ;  0 "" 2
 973:tmk_core/protocol/lufa/lufa.c **** #endif
 1195               		.loc 1 973 0
 1196               	/* #NOAPP */
 1197 004e 0E94 0000 		call USB_USBTask
 1198               	.LVL90:
 976:tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1199               		.loc 1 976 0
 1200 0052 0E94 0000 		call keyboard_init
 1201               	.LVL91:
 977:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 1202               		.loc 1 977 0
 1203 0056 80E0      		ldi r24,lo8(lufa_driver)
 1204 0058 90E0      		ldi r25,hi8(lufa_driver)
 1205 005a 0E94 0000 		call host_set_driver
 1206               	.LVL92:
 1207               	.L107:
 989:tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1208               		.loc 1 989 0 discriminator 1
 1209 005e 0E94 0000 		call CheckJoystickMovement
 1210               	.LVL93:
 990:tmk_core/protocol/lufa/lufa.c **** 
 1211               		.loc 1 990 0 discriminator 1
 1212 0062 0E94 0000 		call keyboard_task
 1213               	.LVL94:
 993:tmk_core/protocol/lufa/lufa.c **** 		USB_USBTask();
 1214               		.loc 1 993 0 discriminator 1
 1215 0066 80E0      		ldi r24,lo8(USB_MIDI_Interface)
 1216 0068 90E0      		ldi r25,hi8(USB_MIDI_Interface)
 1217 006a 0E94 0000 		call MIDI_Device_USBTask
 1218               	.LVL95:
 994:tmk_core/protocol/lufa/lufa.c **** 
 1219               		.loc 1 994 0 discriminator 1
 1220 006e 0E94 0000 		call USB_USBTask
 1221               	.LVL96:
 997:tmk_core/protocol/lufa/lufa.c **** #endif
 1222               		.loc 1 997 0 discriminator 1
 1223 0072 0E94 0000 		call rgblight_task
 1224               	.LVL97:
 1225 0076 00C0      		rjmp .L107
 1226               		.cfi_endproc
 1227               	.LFE140:
 1229               	.global	USB_MIDI_Interface
 1230               		.section	.data.USB_MIDI_Interface,"aw",@progbits
 1233               	USB_MIDI_Interface:
 1234 0000 03        		.byte	3
 1235 0001 83        		.byte	-125
 1236 0002 4000      		.word	64
 1237 0004 00        		.zero	1
 1238 0005 01        		.byte	1
 1239 0006 04        		.byte	4
 1240 0007 4000      		.word	64
 1241 0009 00        		.zero	1
 1242 000a 01        		.byte	1
 1243 000b 00        		.zero	1
 1244               	.global	lufa_driver
 1245               		.section	.data.lufa_driver,"aw",@progbits
 1248               	lufa_driver:
 1249 0000 0000      		.word	gs(keyboard_leds)
 1250 0002 0000      		.word	gs(send_keyboard)
 1251 0004 0000      		.word	gs(send_mouse)
 1252 0006 0000      		.word	gs(send_system)
 1253 0008 0000      		.word	gs(send_consumer)
 1254               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1257               	keyboard_report_sent:
 1258 0000 0000 0000 		.zero	32
 1258      0000 0000 
 1258      0000 0000 
 1258      0000 0000 
 1258      0000 0000 
 1259               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1262               	keyboard_led_stats:
 1263 0000 00        		.zero	1
 1264               	.global	keyboard_protocol
 1265               		.section	.data.keyboard_protocol,"aw",@progbits
 1268               	keyboard_protocol:
 1269 0000 01        		.byte	1
 1270               	.global	keyboard_idle
 1271               		.section	.bss.keyboard_idle,"aw",@nobits
 1274               	keyboard_idle:
 1275 0000 00        		.zero	1
 1276               		.text
 1277               	.Letext0:
 1278               		.file 6 "d:\\program files\\msys2\\home\\bnguy\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdin
 1279               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Endpoint.h"
 1280               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1281               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1282               		.file 10 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1283               		.file 11 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/MIDIClassCommon.h"
 1284               		.file 12 "lib/lufa/LUFA/Drivers/USB/Class/Device/MIDIClassDevice.h"
 1285               		.file 13 "tmk_core/protocol/usb_descriptor.h"
 1286               		.file 14 "tmk_core/common/report.h"
 1287               		.file 15 "tmk_core/protocol/midi/midi_function_types.h"
 1288               		.file 16 "tmk_core/protocol/midi/midi_device.h"
 1289               		.file 17 "tmk_core/protocol/midi/bytequeue/bytequeue.h"
 1290               		.file 18 "tmk_core/common/host_driver.h"
 1291               		.file 19 "tmk_core/protocol/lufa/lufa.h"
 1292               		.file 20 "quantum/keycode_config.h"
 1293               		.file 21 "tmk_core/protocol/lufa/outputselect.h"
 1294               		.file 22 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1295               		.file 23 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1296               		.file 24 "tmk_core/common/action_util.h"
 1297               		.file 25 "tmk_core/protocol/midi/qmk_midi.h"
 1298               		.file 26 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1299               		.file 27 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1300               		.file 28 "tmk_core/common/suspend.h"
 1301               		.file 29 "tmk_core/common/action.h"
 1302               		.file 30 "tmk_core/protocol/midi/midi.h"
 1303               		.file 31 "tmk_core/common/keyboard.h"
 1304               		.file 32 "tmk_core/common/host.h"
 1305               		.file 33 "quantum/rgblight.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lufa.c
D:\Program Files\msys2\tmp\cc5JWpJN.s:2      *ABS*:0000003e __SP_H__
D:\Program Files\msys2\tmp\cc5JWpJN.s:3      *ABS*:0000003d __SP_L__
D:\Program Files\msys2\tmp\cc5JWpJN.s:4      *ABS*:0000003f __SREG__
D:\Program Files\msys2\tmp\cc5JWpJN.s:5      *ABS*:00000000 __tmp_reg__
D:\Program Files\msys2\tmp\cc5JWpJN.s:6      *ABS*:00000001 __zero_reg__
D:\Program Files\msys2\tmp\cc5JWpJN.s:12     .text.keyboard_leds:00000000 keyboard_leds
D:\Program Files\msys2\tmp\cc5JWpJN.s:1262   .bss.keyboard_led_stats:00000000 keyboard_led_stats
D:\Program Files\msys2\tmp\cc5JWpJN.s:29     .text.send_mouse:00000000 send_mouse
D:\Program Files\msys2\tmp\cc5JWpJN.s:44     .text.send_consumer:00000000 send_consumer
D:\Program Files\msys2\tmp\cc5JWpJN.s:181    .text.send_system:00000000 send_system
D:\Program Files\msys2\tmp\cc5JWpJN.s:300    .text.send_keyboard:00000000 send_keyboard
D:\Program Files\msys2\tmp\cc5JWpJN.s:1268   .data.keyboard_protocol:00000000 keyboard_protocol
D:\Program Files\msys2\tmp\cc5JWpJN.s:1257   .bss.keyboard_report_sent:00000000 keyboard_report_sent
D:\Program Files\msys2\tmp\cc5JWpJN.s:450    .text.EVENT_USB_Device_Connect:00000000 EVENT_USB_Device_Connect
D:\Program Files\msys2\tmp\cc5JWpJN.s:488    .text.EVENT_USB_Device_Disconnect:00000000 EVENT_USB_Device_Disconnect
D:\Program Files\msys2\tmp\cc5JWpJN.s:505    .text.EVENT_USB_Device_Reset:00000000 EVENT_USB_Device_Reset
D:\Program Files\msys2\tmp\cc5JWpJN.s:519    .text.EVENT_USB_Device_Suspend:00000000 EVENT_USB_Device_Suspend
D:\Program Files\msys2\tmp\cc5JWpJN.s:534    .text.EVENT_USB_Device_WakeUp:00000000 EVENT_USB_Device_WakeUp
D:\Program Files\msys2\tmp\cc5JWpJN.s:551    .text.EVENT_USB_Device_ConfigurationChanged:00000000 EVENT_USB_Device_ConfigurationChanged
D:\Program Files\msys2\tmp\cc5JWpJN.s:603    .text.EVENT_USB_Device_ControlRequest:00000000 EVENT_USB_Device_ControlRequest
D:\Program Files\msys2\tmp\cc5JWpJN.s:1274   .bss.keyboard_idle:00000000 keyboard_idle
D:\Program Files\msys2\tmp\cc5JWpJN.s:896    .text.sendchar:00000000 sendchar
D:\Program Files\msys2\tmp\cc5JWpJN.s:915    .text.send_midi_packet:00000000 send_midi_packet
D:\Program Files\msys2\tmp\cc5JWpJN.s:1233   .data.USB_MIDI_Interface:00000000 USB_MIDI_Interface
D:\Program Files\msys2\tmp\cc5JWpJN.s:937    .text.recv_midi_packet:00000000 recv_midi_packet
D:\Program Files\msys2\tmp\cc5JWpJN.s:959    .text.Init_ADC1:00000000 Init_ADC1
D:\Program Files\msys2\tmp\cc5JWpJN.s:992    .text.AMP_calculator:00000000 AMP_calculator
D:\Program Files\msys2\tmp\cc5JWpJN.s:1028   .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
D:\Program Files\msys2\tmp\cc5JWpJN.s:1046   .text.CheckJoystickMovement:00000000 CheckJoystickMovement
D:\Program Files\msys2\tmp\cc5JWpJN.s:1115   .text.startup.main:00000000 main
D:\Program Files\msys2\tmp\cc5JWpJN.s:1248   .data.lufa_driver:00000000 lufa_driver

UNDEFINED SYMBOLS
where_to_send
Endpoint_Write_Stream_LE
USB_DeviceState
keymap_config
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
clear_keyboard
MIDI_Device_SendEventPacket
MIDI_Device_ReceiveEventPacket
get_usb_descriptor
MIDI_Device_Flush
setup_midi
midi_device
midi_device_init
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
keyboard_task
MIDI_Device_USBTask
rgblight_task
__do_copy_data
__do_clear_bss

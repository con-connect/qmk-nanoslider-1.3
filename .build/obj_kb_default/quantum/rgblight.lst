   1               		.file	"rgblight.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.rgblight_effect_dummy,"ax",@progbits
  12               	rgblight_effect_dummy:
  13               	.LFB154:
  14               		.file 1 "quantum/rgblight.c"
   1:quantum/rgblight.c **** /* Copyright 2016-2017 Yang Liu
   2:quantum/rgblight.c ****  *
   3:quantum/rgblight.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/rgblight.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/rgblight.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/rgblight.c ****  * (at your option) any later version.
   7:quantum/rgblight.c ****  *
   8:quantum/rgblight.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/rgblight.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/rgblight.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/rgblight.c ****  * GNU General Public License for more details.
  12:quantum/rgblight.c ****  *
  13:quantum/rgblight.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/rgblight.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/rgblight.c ****  */
  16:quantum/rgblight.c **** #include <math.h>
  17:quantum/rgblight.c **** #include <string.h>
  18:quantum/rgblight.c **** #ifdef __AVR__
  19:quantum/rgblight.c ****   #include <avr/eeprom.h>
  20:quantum/rgblight.c ****   #include <avr/interrupt.h>
  21:quantum/rgblight.c **** #endif
  22:quantum/rgblight.c **** #ifdef STM32_EEPROM_ENABLE
  23:quantum/rgblight.c ****   #include "hal.h"
  24:quantum/rgblight.c ****   #include "eeprom.h"
  25:quantum/rgblight.c ****   #include "eeprom_stm32.h"
  26:quantum/rgblight.c **** #endif
  27:quantum/rgblight.c **** #include "wait.h"
  28:quantum/rgblight.c **** #include "progmem.h"
  29:quantum/rgblight.c **** #include "timer.h"
  30:quantum/rgblight.c **** #include "rgblight.h"
  31:quantum/rgblight.c **** #include "color.h"
  32:quantum/rgblight.c **** #include "debug.h"
  33:quantum/rgblight.c **** #include "led_tables.h"
  34:quantum/rgblight.c **** #include "lib/lib8tion/lib8tion.h"
  35:quantum/rgblight.c **** #ifdef VELOCIKEY_ENABLE
  36:quantum/rgblight.c ****   #include "velocikey.h"
  37:quantum/rgblight.c **** #endif
  38:quantum/rgblight.c **** 
  39:quantum/rgblight.c **** #ifdef RGBLIGHT_SPLIT
  40:quantum/rgblight.c ****   /* for split keyboard */
  41:quantum/rgblight.c ****   #define RGBLIGHT_SPLIT_SET_CHANGE_MODE         rgblight_status.change_flags |= RGBLIGHT_STATUS_CH
  42:quantum/rgblight.c ****   #define RGBLIGHT_SPLIT_SET_CHANGE_HSVS         rgblight_status.change_flags |= RGBLIGHT_STATUS_CH
  43:quantum/rgblight.c ****   #define RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS     rgblight_status.change_flags |= (RGBLIGHT_STATUS_C
  44:quantum/rgblight.c ****   #define RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE rgblight_status.change_flags |= RGBLIGHT_STATUS_CH
  45:quantum/rgblight.c ****   #define RGBLIGHT_SPLIT_ANIMATION_TICK          rgblight_status.change_flags |= RGBLIGHT_STATUS_AN
  46:quantum/rgblight.c **** #else
  47:quantum/rgblight.c ****   #define RGBLIGHT_SPLIT_SET_CHANGE_MODE
  48:quantum/rgblight.c ****   #define RGBLIGHT_SPLIT_SET_CHANGE_HSVS
  49:quantum/rgblight.c ****   #define RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS
  50:quantum/rgblight.c ****   #define RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE
  51:quantum/rgblight.c ****   #define RGBLIGHT_SPLIT_ANIMATION_TICK
  52:quantum/rgblight.c **** #endif
  53:quantum/rgblight.c **** 
  54:quantum/rgblight.c **** #define _RGBM_SINGLE_STATIC(sym)   RGBLIGHT_MODE_ ## sym,
  55:quantum/rgblight.c **** #define _RGBM_SINGLE_DYNAMIC(sym)
  56:quantum/rgblight.c **** #define _RGBM_MULTI_STATIC(sym)    RGBLIGHT_MODE_ ## sym,
  57:quantum/rgblight.c **** #define _RGBM_MULTI_DYNAMIC(sym)
  58:quantum/rgblight.c **** #define _RGBM_TMP_STATIC(sym, msym)      RGBLIGHT_MODE_ ## sym,
  59:quantum/rgblight.c **** #define _RGBM_TMP_DYNAMIC(sym, msym)
  60:quantum/rgblight.c **** static uint8_t static_effect_table [] = {
  61:quantum/rgblight.c **** #include "rgblight_modes.h"
  62:quantum/rgblight.c **** };
  63:quantum/rgblight.c **** 
  64:quantum/rgblight.c **** #define _RGBM_SINGLE_STATIC(sym)   RGBLIGHT_MODE_ ## sym,
  65:quantum/rgblight.c **** #define _RGBM_SINGLE_DYNAMIC(sym)  RGBLIGHT_MODE_ ## sym,
  66:quantum/rgblight.c **** #define _RGBM_MULTI_STATIC(sym)    RGBLIGHT_MODE_ ## sym,
  67:quantum/rgblight.c **** #define _RGBM_MULTI_DYNAMIC(sym)   RGBLIGHT_MODE_ ## sym,
  68:quantum/rgblight.c **** #define _RGBM_TMP_STATIC(sym, msym)  RGBLIGHT_MODE_ ## msym,
  69:quantum/rgblight.c **** #define _RGBM_TMP_DYNAMIC(sym, msym) RGBLIGHT_MODE_ ## msym,
  70:quantum/rgblight.c **** static uint8_t mode_base_table [] = {
  71:quantum/rgblight.c ****     0, // RGBLIGHT_MODE_zero
  72:quantum/rgblight.c **** #include "rgblight_modes.h"
  73:quantum/rgblight.c **** };
  74:quantum/rgblight.c **** 
  75:quantum/rgblight.c **** static inline int is_static_effect(uint8_t mode) {
  76:quantum/rgblight.c ****     return memchr(static_effect_table, mode, sizeof(static_effect_table)) != NULL;
  77:quantum/rgblight.c **** }
  78:quantum/rgblight.c **** 
  79:quantum/rgblight.c **** #ifdef RGBLIGHT_LED_MAP
  80:quantum/rgblight.c **** const uint8_t led_map[] PROGMEM = RGBLIGHT_LED_MAP;
  81:quantum/rgblight.c **** #endif
  82:quantum/rgblight.c **** 
  83:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
  84:quantum/rgblight.c **** __attribute__ ((weak))
  85:quantum/rgblight.c **** const uint8_t RGBLED_GRADIENT_RANGES[] PROGMEM = {255, 170, 127, 85, 64};
  86:quantum/rgblight.c **** #endif
  87:quantum/rgblight.c **** 
  88:quantum/rgblight.c **** rgblight_config_t rgblight_config;
  89:quantum/rgblight.c **** rgblight_status_t rgblight_status = { .timer_enabled = false };
  90:quantum/rgblight.c **** bool is_rgblight_initialized = false;
  91:quantum/rgblight.c **** 
  92:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
  93:quantum/rgblight.c **** animation_status_t animation_status = {};
  94:quantum/rgblight.c **** #endif
  95:quantum/rgblight.c **** 
  96:quantum/rgblight.c **** #ifndef LED_ARRAY
  97:quantum/rgblight.c **** LED_TYPE led[RGBLED_NUM];
  98:quantum/rgblight.c ****   #define LED_ARRAY led
  99:quantum/rgblight.c **** #endif
 100:quantum/rgblight.c **** 
 101:quantum/rgblight.c **** 
 102:quantum/rgblight.c **** static uint8_t clipping_start_pos = 0;
 103:quantum/rgblight.c **** static uint8_t clipping_num_leds = RGBLED_NUM;
 104:quantum/rgblight.c **** static uint8_t effect_start_pos = 0;
 105:quantum/rgblight.c **** static uint8_t effect_end_pos = RGBLED_NUM;
 106:quantum/rgblight.c **** static uint8_t effect_num_leds = RGBLED_NUM;
 107:quantum/rgblight.c **** 
 108:quantum/rgblight.c **** void rgblight_set_clipping_range(uint8_t start_pos, uint8_t num_leds) {
 109:quantum/rgblight.c ****   clipping_start_pos = start_pos;
 110:quantum/rgblight.c ****   clipping_num_leds = num_leds;
 111:quantum/rgblight.c **** }
 112:quantum/rgblight.c **** 
 113:quantum/rgblight.c **** void rgblight_set_effect_range(uint8_t start_pos, uint8_t num_leds) {
 114:quantum/rgblight.c ****   if (start_pos >= RGBLED_NUM) return;
 115:quantum/rgblight.c ****   if (start_pos + num_leds > RGBLED_NUM) return;
 116:quantum/rgblight.c ****   effect_start_pos = start_pos;
 117:quantum/rgblight.c ****   effect_end_pos = start_pos + num_leds;
 118:quantum/rgblight.c ****   effect_num_leds = num_leds;
 119:quantum/rgblight.c **** }
 120:quantum/rgblight.c **** 
 121:quantum/rgblight.c **** void sethsv_raw(uint8_t hue, uint8_t sat, uint8_t val, LED_TYPE *led1) {
 122:quantum/rgblight.c ****   HSV hsv = { hue, sat, val };
 123:quantum/rgblight.c ****   RGB rgb = hsv_to_rgb(hsv);
 124:quantum/rgblight.c ****   setrgb(rgb.r, rgb.g, rgb.b, led1);
 125:quantum/rgblight.c **** }
 126:quantum/rgblight.c **** 
 127:quantum/rgblight.c **** void sethsv(uint8_t hue, uint8_t sat, uint8_t val, LED_TYPE *led1) {
 128:quantum/rgblight.c ****   sethsv_raw( hue, sat,
 129:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 130:quantum/rgblight.c ****               led1);
 131:quantum/rgblight.c **** }
 132:quantum/rgblight.c **** 
 133:quantum/rgblight.c **** void setrgb(uint8_t r, uint8_t g, uint8_t b, LED_TYPE *led1) {
 134:quantum/rgblight.c ****   (*led1).r = r;
 135:quantum/rgblight.c ****   (*led1).g = g;
 136:quantum/rgblight.c ****   (*led1).b = b;
 137:quantum/rgblight.c **** }
 138:quantum/rgblight.c **** 
 139:quantum/rgblight.c **** void rgblight_check_config(void) {
 140:quantum/rgblight.c ****   /* Add some out of bound checks for RGB light config */
 141:quantum/rgblight.c **** 
 142:quantum/rgblight.c ****   if (rgblight_config.mode < RGBLIGHT_MODE_STATIC_LIGHT) {
 143:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODE_STATIC_LIGHT;
 144:quantum/rgblight.c ****   }
 145:quantum/rgblight.c ****   else if (rgblight_config.mode > RGBLIGHT_MODES) {
 146:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODES;
 147:quantum/rgblight.c ****   }
 148:quantum/rgblight.c **** 
 149:quantum/rgblight.c ****   if (rgblight_config.val > RGBLIGHT_LIMIT_VAL) {
 150:quantum/rgblight.c ****     rgblight_config.val = RGBLIGHT_LIMIT_VAL;
 151:quantum/rgblight.c ****   }
 152:quantum/rgblight.c **** }
 153:quantum/rgblight.c **** 
 154:quantum/rgblight.c **** uint32_t eeconfig_read_rgblight(void) {
 155:quantum/rgblight.c ****   #if defined(__AVR__) || defined(STM32_EEPROM_ENABLE) || defined(PROTOCOL_ARM_ATSAM) || defined(EE
 156:quantum/rgblight.c ****     return eeprom_read_dword(EECONFIG_RGBLIGHT);
 157:quantum/rgblight.c ****   #else
 158:quantum/rgblight.c ****     return 0;
 159:quantum/rgblight.c ****   #endif
 160:quantum/rgblight.c **** }
 161:quantum/rgblight.c **** 
 162:quantum/rgblight.c **** void eeconfig_update_rgblight(uint32_t val) {
 163:quantum/rgblight.c ****   #if defined(__AVR__) || defined(STM32_EEPROM_ENABLE) || defined(PROTOCOL_ARM_ATSAM) || defined(EE
 164:quantum/rgblight.c ****     rgblight_check_config();
 165:quantum/rgblight.c ****     eeprom_update_dword(EECONFIG_RGBLIGHT, val);
 166:quantum/rgblight.c ****   #endif
 167:quantum/rgblight.c **** }
 168:quantum/rgblight.c **** 
 169:quantum/rgblight.c **** void eeconfig_update_rgblight_default(void) {
 170:quantum/rgblight.c ****   //dprintf("eeconfig_update_rgblight_default\n");
 171:quantum/rgblight.c ****   rgblight_config.enable = 1;
 172:quantum/rgblight.c ****   rgblight_config.mode = RGBLIGHT_MODE_STATIC_LIGHT;
 173:quantum/rgblight.c ****   rgblight_config.hue = 0;
 174:quantum/rgblight.c ****   rgblight_config.sat = UINT8_MAX;
 175:quantum/rgblight.c ****   rgblight_config.val = RGBLIGHT_LIMIT_VAL;
 176:quantum/rgblight.c ****   rgblight_config.speed = 0;
 177:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 178:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 179:quantum/rgblight.c **** }
 180:quantum/rgblight.c **** 
 181:quantum/rgblight.c **** void eeconfig_debug_rgblight(void) {
 182:quantum/rgblight.c ****   dprintf("rgblight_config eprom\n");
 183:quantum/rgblight.c ****   dprintf("rgblight_config.enable = %d\n", rgblight_config.enable);
 184:quantum/rgblight.c ****   dprintf("rghlight_config.mode = %d\n", rgblight_config.mode);
 185:quantum/rgblight.c ****   dprintf("rgblight_config.hue = %d\n", rgblight_config.hue);
 186:quantum/rgblight.c ****   dprintf("rgblight_config.sat = %d\n", rgblight_config.sat);
 187:quantum/rgblight.c ****   dprintf("rgblight_config.val = %d\n", rgblight_config.val);
 188:quantum/rgblight.c ****   dprintf("rgblight_config.speed = %d\n", rgblight_config.speed);
 189:quantum/rgblight.c **** }
 190:quantum/rgblight.c **** 
 191:quantum/rgblight.c **** void rgblight_init(void) {
 192:quantum/rgblight.c ****   /* if already initialized, don't do it again.
 193:quantum/rgblight.c ****      If you must do it again, extern this and set to false, first.
 194:quantum/rgblight.c ****      This is a dirty, dirty hack until proper hooks can be added for keyboard startup. */
 195:quantum/rgblight.c ****   if (is_rgblight_initialized) { return; }
 196:quantum/rgblight.c **** 
 197:quantum/rgblight.c ****   debug_enable = 1; // Debug ON!
 198:quantum/rgblight.c ****   dprintf("rgblight_init called.\n");
 199:quantum/rgblight.c ****   dprintf("rgblight_init start!\n");
 200:quantum/rgblight.c ****   if (!eeconfig_is_enabled()) {
 201:quantum/rgblight.c ****     dprintf("rgblight_init eeconfig is not enabled.\n");
 202:quantum/rgblight.c ****     eeconfig_init();
 203:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 204:quantum/rgblight.c ****   }
 205:quantum/rgblight.c ****   rgblight_config.raw = eeconfig_read_rgblight();
 206:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 207:quantum/rgblight.c ****   if (!rgblight_config.mode) {
 208:quantum/rgblight.c ****     dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
 209:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 210:quantum/rgblight.c ****     rgblight_config.raw = eeconfig_read_rgblight();
 211:quantum/rgblight.c ****   }
 212:quantum/rgblight.c ****   rgblight_check_config();
 213:quantum/rgblight.c **** 
 214:quantum/rgblight.c ****   eeconfig_debug_rgblight(); // display current eeprom values
 215:quantum/rgblight.c **** 
 216:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 217:quantum/rgblight.c ****     rgblight_timer_init(); // setup the timer
 218:quantum/rgblight.c **** #endif
 219:quantum/rgblight.c **** 
 220:quantum/rgblight.c ****   if (rgblight_config.enable) {
 221:quantum/rgblight.c ****     rgblight_mode_noeeprom(rgblight_config.mode);
 222:quantum/rgblight.c ****   }
 223:quantum/rgblight.c **** 
 224:quantum/rgblight.c ****   is_rgblight_initialized = true;
 225:quantum/rgblight.c **** 
 226:quantum/rgblight.c **** }
 227:quantum/rgblight.c **** 
 228:quantum/rgblight.c **** uint32_t rgblight_read_dword(void) {
 229:quantum/rgblight.c ****   return rgblight_config.raw;
 230:quantum/rgblight.c **** }
 231:quantum/rgblight.c **** 
 232:quantum/rgblight.c **** void rgblight_update_dword(uint32_t dword) {
 233:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 234:quantum/rgblight.c ****   rgblight_config.raw = dword;
 235:quantum/rgblight.c ****   if (rgblight_config.enable)
 236:quantum/rgblight.c ****     rgblight_mode_noeeprom(rgblight_config.mode);
 237:quantum/rgblight.c ****   else {
 238:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 239:quantum/rgblight.c ****       rgblight_timer_disable();
 240:quantum/rgblight.c **** #endif
 241:quantum/rgblight.c ****       rgblight_set();
 242:quantum/rgblight.c ****   }
 243:quantum/rgblight.c **** }
 244:quantum/rgblight.c **** 
 245:quantum/rgblight.c **** void rgblight_increase(void) {
 246:quantum/rgblight.c ****   uint8_t mode = 0;
 247:quantum/rgblight.c ****   if (rgblight_config.mode < RGBLIGHT_MODES) {
 248:quantum/rgblight.c ****     mode = rgblight_config.mode + 1;
 249:quantum/rgblight.c ****   }
 250:quantum/rgblight.c ****   rgblight_mode(mode);
 251:quantum/rgblight.c **** }
 252:quantum/rgblight.c **** void rgblight_decrease(void) {
 253:quantum/rgblight.c ****   uint8_t mode = 0;
 254:quantum/rgblight.c ****   // Mode will never be < 1. If it ever is, eeprom needs to be initialized.
 255:quantum/rgblight.c ****   if (rgblight_config.mode > RGBLIGHT_MODE_STATIC_LIGHT) {
 256:quantum/rgblight.c ****     mode = rgblight_config.mode - 1;
 257:quantum/rgblight.c ****   }
 258:quantum/rgblight.c ****   rgblight_mode(mode);
 259:quantum/rgblight.c **** }
 260:quantum/rgblight.c **** void rgblight_step_helper(bool write_to_eeprom) {
 261:quantum/rgblight.c ****   uint8_t mode = 0;
 262:quantum/rgblight.c ****   mode = rgblight_config.mode + 1;
 263:quantum/rgblight.c ****   if (mode > RGBLIGHT_MODES) {
 264:quantum/rgblight.c ****     mode = 1;
 265:quantum/rgblight.c ****   }
 266:quantum/rgblight.c ****   rgblight_mode_eeprom_helper(mode, write_to_eeprom);
 267:quantum/rgblight.c **** }
 268:quantum/rgblight.c **** void rgblight_step_noeeprom(void) {
 269:quantum/rgblight.c ****   rgblight_step_helper(false);
 270:quantum/rgblight.c **** }
 271:quantum/rgblight.c **** void rgblight_step(void) {
 272:quantum/rgblight.c ****   rgblight_step_helper(true);
 273:quantum/rgblight.c **** }
 274:quantum/rgblight.c **** void rgblight_step_reverse_helper(bool write_to_eeprom) {
 275:quantum/rgblight.c ****   uint8_t mode = 0;
 276:quantum/rgblight.c ****   mode = rgblight_config.mode - 1;
 277:quantum/rgblight.c ****   if (mode < 1) {
 278:quantum/rgblight.c ****     mode = RGBLIGHT_MODES;
 279:quantum/rgblight.c ****   }
 280:quantum/rgblight.c ****   rgblight_mode_eeprom_helper(mode, write_to_eeprom);
 281:quantum/rgblight.c **** }
 282:quantum/rgblight.c **** void rgblight_step_reverse_noeeprom(void) {
 283:quantum/rgblight.c ****   rgblight_step_reverse_helper(false);
 284:quantum/rgblight.c **** }
 285:quantum/rgblight.c **** void rgblight_step_reverse(void) {
 286:quantum/rgblight.c ****   rgblight_step_reverse_helper(true);
 287:quantum/rgblight.c **** }
 288:quantum/rgblight.c **** 
 289:quantum/rgblight.c **** uint8_t rgblight_get_mode(void) {
 290:quantum/rgblight.c ****   if (!rgblight_config.enable) {
 291:quantum/rgblight.c ****     return false;
 292:quantum/rgblight.c ****   }
 293:quantum/rgblight.c **** 
 294:quantum/rgblight.c ****   return rgblight_config.mode;
 295:quantum/rgblight.c **** }
 296:quantum/rgblight.c **** 
 297:quantum/rgblight.c **** void rgblight_mode_eeprom_helper(uint8_t mode, bool write_to_eeprom) {
 298:quantum/rgblight.c ****   if (!rgblight_config.enable) {
 299:quantum/rgblight.c ****     return;
 300:quantum/rgblight.c ****   }
 301:quantum/rgblight.c ****   if (mode < RGBLIGHT_MODE_STATIC_LIGHT) {
 302:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODE_STATIC_LIGHT;
 303:quantum/rgblight.c ****   } else if (mode > RGBLIGHT_MODES) {
 304:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODES;
 305:quantum/rgblight.c ****   } else {
 306:quantum/rgblight.c ****     rgblight_config.mode = mode;
 307:quantum/rgblight.c ****   }
 308:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_MODE;
 309:quantum/rgblight.c ****   if (write_to_eeprom) {
 310:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);
 311:quantum/rgblight.c ****     xprintf("rgblight mode [EEPROM]: %u\n", rgblight_config.mode);
 312:quantum/rgblight.c ****   } else {
 313:quantum/rgblight.c ****     xprintf("rgblight mode [NOEEPROM]: %u\n", rgblight_config.mode);
 314:quantum/rgblight.c ****   }
 315:quantum/rgblight.c ****   if( is_static_effect(rgblight_config.mode) ) {
 316:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 317:quantum/rgblight.c ****       rgblight_timer_disable();
 318:quantum/rgblight.c **** #endif
 319:quantum/rgblight.c ****   } else {
 320:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 321:quantum/rgblight.c ****       rgblight_timer_enable();
 322:quantum/rgblight.c **** #endif
 323:quantum/rgblight.c ****   }
 324:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 325:quantum/rgblight.c ****     animation_status.restart = true;
 326:quantum/rgblight.c **** #endif
 327:quantum/rgblight.c ****   rgblight_sethsv_noeeprom(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
 328:quantum/rgblight.c **** }
 329:quantum/rgblight.c **** 
 330:quantum/rgblight.c **** void rgblight_mode(uint8_t mode) {
 331:quantum/rgblight.c ****   rgblight_mode_eeprom_helper(mode, true);
 332:quantum/rgblight.c **** }
 333:quantum/rgblight.c **** 
 334:quantum/rgblight.c **** void rgblight_mode_noeeprom(uint8_t mode) {
 335:quantum/rgblight.c ****   rgblight_mode_eeprom_helper(mode, false);
 336:quantum/rgblight.c **** }
 337:quantum/rgblight.c **** 
 338:quantum/rgblight.c **** 
 339:quantum/rgblight.c **** void rgblight_toggle(void) {
 340:quantum/rgblight.c ****   xprintf("rgblight toggle [EEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 341:quantum/rgblight.c ****   if (rgblight_config.enable) {
 342:quantum/rgblight.c ****     rgblight_disable();
 343:quantum/rgblight.c ****   }
 344:quantum/rgblight.c ****   else {
 345:quantum/rgblight.c ****     rgblight_enable();
 346:quantum/rgblight.c ****   }
 347:quantum/rgblight.c **** }
 348:quantum/rgblight.c **** 
 349:quantum/rgblight.c **** void rgblight_toggle_noeeprom(void) {
 350:quantum/rgblight.c ****   xprintf("rgblight toggle [NOEEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 351:quantum/rgblight.c ****   if (rgblight_config.enable) {
 352:quantum/rgblight.c ****     rgblight_disable_noeeprom();
 353:quantum/rgblight.c ****   }
 354:quantum/rgblight.c ****   else {
 355:quantum/rgblight.c ****     rgblight_enable_noeeprom();
 356:quantum/rgblight.c ****   }
 357:quantum/rgblight.c **** }
 358:quantum/rgblight.c **** 
 359:quantum/rgblight.c **** void rgblight_enable(void) {
 360:quantum/rgblight.c ****   rgblight_config.enable = 1;
 361:quantum/rgblight.c ****   // No need to update EEPROM here. rgblight_mode() will do that, actually
 362:quantum/rgblight.c ****   //eeconfig_update_rgblight(rgblight_config.raw);
 363:quantum/rgblight.c ****   xprintf("rgblight enable [EEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 364:quantum/rgblight.c ****   rgblight_mode(rgblight_config.mode);
 365:quantum/rgblight.c **** }
 366:quantum/rgblight.c **** 
 367:quantum/rgblight.c **** void rgblight_enable_noeeprom(void) {
 368:quantum/rgblight.c ****   rgblight_config.enable = 1;
 369:quantum/rgblight.c ****   xprintf("rgblight enable [NOEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 370:quantum/rgblight.c ****   rgblight_mode_noeeprom(rgblight_config.mode);
 371:quantum/rgblight.c **** }
 372:quantum/rgblight.c **** 
 373:quantum/rgblight.c **** void rgblight_disable(void) {
 374:quantum/rgblight.c ****   rgblight_config.enable = 0;
 375:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 376:quantum/rgblight.c ****   xprintf("rgblight disable [EEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 377:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 378:quantum/rgblight.c ****       rgblight_timer_disable();
 379:quantum/rgblight.c **** #endif
 380:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_MODE;
 381:quantum/rgblight.c ****   wait_ms(50);
 382:quantum/rgblight.c ****   rgblight_set();
 383:quantum/rgblight.c **** }
 384:quantum/rgblight.c **** 
 385:quantum/rgblight.c **** void rgblight_disable_noeeprom(void) {
 386:quantum/rgblight.c ****   rgblight_config.enable = 0;
 387:quantum/rgblight.c ****   xprintf("rgblight disable [noEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 388:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 389:quantum/rgblight.c ****     rgblight_timer_disable();
 390:quantum/rgblight.c **** #endif
 391:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_MODE;
 392:quantum/rgblight.c ****   wait_ms(50);
 393:quantum/rgblight.c ****   rgblight_set();
 394:quantum/rgblight.c **** }
 395:quantum/rgblight.c **** 
 396:quantum/rgblight.c **** void rgblight_increase_hue_helper(bool write_to_eeprom) {
 397:quantum/rgblight.c ****   uint8_t hue = rgblight_config.hue + RGBLIGHT_HUE_STEP;
 398:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(hue, rgblight_config.sat, rgblight_config.val, write_to_eeprom);
 399:quantum/rgblight.c **** }
 400:quantum/rgblight.c **** void rgblight_increase_hue_noeeprom(void) {
 401:quantum/rgblight.c ****   rgblight_increase_hue_helper(false);
 402:quantum/rgblight.c **** }
 403:quantum/rgblight.c **** void rgblight_increase_hue(void) {
 404:quantum/rgblight.c ****   rgblight_increase_hue_helper(true);
 405:quantum/rgblight.c **** }
 406:quantum/rgblight.c **** void rgblight_decrease_hue_helper(bool write_to_eeprom) {
 407:quantum/rgblight.c ****   uint8_t hue = rgblight_config.hue - RGBLIGHT_HUE_STEP;
 408:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(hue, rgblight_config.sat, rgblight_config.val, write_to_eeprom);
 409:quantum/rgblight.c **** }
 410:quantum/rgblight.c **** void rgblight_decrease_hue_noeeprom(void) {
 411:quantum/rgblight.c ****   rgblight_decrease_hue_helper(false);
 412:quantum/rgblight.c **** }
 413:quantum/rgblight.c **** void rgblight_decrease_hue(void) {
 414:quantum/rgblight.c ****   rgblight_decrease_hue_helper(true);
 415:quantum/rgblight.c **** }
 416:quantum/rgblight.c **** void rgblight_increase_sat_helper(bool write_to_eeprom) {
 417:quantum/rgblight.c ****   uint8_t sat = qadd8(rgblight_config.sat, RGBLIGHT_SAT_STEP);
 418:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(rgblight_config.hue, sat, rgblight_config.val, write_to_eeprom);
 419:quantum/rgblight.c **** }
 420:quantum/rgblight.c **** void rgblight_increase_sat_noeeprom(void) {
 421:quantum/rgblight.c ****   rgblight_increase_sat_helper(false);
 422:quantum/rgblight.c **** }
 423:quantum/rgblight.c **** void rgblight_increase_sat(void) {
 424:quantum/rgblight.c ****   rgblight_increase_sat_helper(true);
 425:quantum/rgblight.c **** }
 426:quantum/rgblight.c **** void rgblight_decrease_sat_helper(bool write_to_eeprom) {
 427:quantum/rgblight.c ****   uint8_t sat = qsub8(rgblight_config.sat, RGBLIGHT_SAT_STEP);
 428:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(rgblight_config.hue, sat, rgblight_config.val, write_to_eeprom);
 429:quantum/rgblight.c **** }
 430:quantum/rgblight.c **** void rgblight_decrease_sat_noeeprom(void) {
 431:quantum/rgblight.c ****   rgblight_decrease_sat_helper(false);
 432:quantum/rgblight.c **** }
 433:quantum/rgblight.c **** void rgblight_decrease_sat(void) {
 434:quantum/rgblight.c ****   rgblight_decrease_sat_helper(true);
 435:quantum/rgblight.c **** }
 436:quantum/rgblight.c **** void rgblight_increase_val_helper(bool write_to_eeprom) {
 437:quantum/rgblight.c ****   uint8_t val = qadd8(rgblight_config.val, RGBLIGHT_VAL_STEP);
 438:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(rgblight_config.hue, rgblight_config.sat, val, write_to_eeprom);
 439:quantum/rgblight.c **** }
 440:quantum/rgblight.c **** void rgblight_increase_val_noeeprom(void) {
 441:quantum/rgblight.c ****   rgblight_increase_val_helper(false);
 442:quantum/rgblight.c **** }
 443:quantum/rgblight.c **** void rgblight_increase_val(void) {
 444:quantum/rgblight.c ****   rgblight_increase_val_helper(true);
 445:quantum/rgblight.c **** }
 446:quantum/rgblight.c **** void rgblight_decrease_val_helper(bool write_to_eeprom) {
 447:quantum/rgblight.c ****   uint8_t val = qsub8(rgblight_config.val, RGBLIGHT_VAL_STEP);
 448:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(rgblight_config.hue, rgblight_config.sat, val, write_to_eeprom);
 449:quantum/rgblight.c **** }
 450:quantum/rgblight.c **** void rgblight_decrease_val_noeeprom(void) {
 451:quantum/rgblight.c ****   rgblight_decrease_val_helper(false);
 452:quantum/rgblight.c **** }
 453:quantum/rgblight.c **** void rgblight_decrease_val(void) {
 454:quantum/rgblight.c ****   rgblight_decrease_val_helper(true);
 455:quantum/rgblight.c **** }
 456:quantum/rgblight.c **** void rgblight_increase_speed(void) {
 457:quantum/rgblight.c ****     if (rgblight_config.speed < 3)
 458:quantum/rgblight.c ****         rgblight_config.speed++;
 459:quantum/rgblight.c ****     //RGBLIGHT_SPLIT_SET_CHANGE_HSVS; // NEED?
 460:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);//EECONFIG needs to be increased to support this
 461:quantum/rgblight.c **** }
 462:quantum/rgblight.c **** 
 463:quantum/rgblight.c **** void rgblight_decrease_speed(void) {
 464:quantum/rgblight.c ****     if (rgblight_config.speed > 0)
 465:quantum/rgblight.c ****         rgblight_config.speed--;
 466:quantum/rgblight.c ****     //RGBLIGHT_SPLIT_SET_CHANGE_HSVS; // NEED??
 467:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);//EECONFIG needs to be increased to support this
 468:quantum/rgblight.c **** }
 469:quantum/rgblight.c **** 
 470:quantum/rgblight.c **** void rgblight_sethsv_noeeprom_old(uint8_t hue, uint8_t sat, uint8_t val) {
 471:quantum/rgblight.c ****   if (rgblight_config.enable) {
 472:quantum/rgblight.c ****     LED_TYPE tmp_led;
 473:quantum/rgblight.c ****     sethsv(hue, sat, val, &tmp_led);
 474:quantum/rgblight.c ****     // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_c
 475:quantum/rgblight.c ****     rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 476:quantum/rgblight.c ****   }
 477:quantum/rgblight.c **** }
 478:quantum/rgblight.c **** 
 479:quantum/rgblight.c **** void rgblight_sethsv_eeprom_helper(uint8_t hue, uint8_t sat, uint8_t val, bool write_to_eeprom) {
 480:quantum/rgblight.c ****   if (rgblight_config.enable) {
 481:quantum/rgblight.c ****     rgblight_status.base_mode = mode_base_table[rgblight_config.mode];
 482:quantum/rgblight.c ****     if (rgblight_config.mode == RGBLIGHT_MODE_STATIC_LIGHT) {
 483:quantum/rgblight.c ****       // same static color
 484:quantum/rgblight.c ****       LED_TYPE tmp_led;
 485:quantum/rgblight.c ****       sethsv(hue, sat, val, &tmp_led);
 486:quantum/rgblight.c ****       rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 487:quantum/rgblight.c ****     } else {
 488:quantum/rgblight.c ****       // all LEDs in same color
 489:quantum/rgblight.c ****       if ( 1 == 0 ) { //dummy
 490:quantum/rgblight.c ****       }
 491:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_BREATHING
 492:quantum/rgblight.c ****       else if (rgblight_status.base_mode == RGBLIGHT_MODE_BREATHING ) {
 493:quantum/rgblight.c ****         // breathing mode, ignore the change of val, use in memory value instead
 494:quantum/rgblight.c ****         val = rgblight_config.val;
 495:quantum/rgblight.c ****       }
 496:quantum/rgblight.c **** #endif
 497:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 498:quantum/rgblight.c ****       else if (rgblight_status.base_mode == RGBLIGHT_MODE_RAINBOW_MOOD) {
 499:quantum/rgblight.c ****         // rainbow mood, ignore the change of hue
 500:quantum/rgblight.c ****         hue = rgblight_config.hue;
 501:quantum/rgblight.c ****       }
 502:quantum/rgblight.c **** #endif
 503:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 504:quantum/rgblight.c ****       else if (rgblight_status.base_mode == RGBLIGHT_MODE_RAINBOW_SWIRL) {
 505:quantum/rgblight.c ****         // rainbow swirl, ignore the change of hue
 506:quantum/rgblight.c ****         hue = rgblight_config.hue;
 507:quantum/rgblight.c ****       }
 508:quantum/rgblight.c **** #endif
 509:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
 510:quantum/rgblight.c ****       else if (rgblight_status.base_mode == RGBLIGHT_MODE_STATIC_GRADIENT) {
 511:quantum/rgblight.c ****         // static gradient
 512:quantum/rgblight.c ****         uint8_t delta = rgblight_config.mode - rgblight_status.base_mode;
 513:quantum/rgblight.c ****         bool direction = (delta % 2) == 0;
 514:quantum/rgblight.c **** #ifdef __AVR__
 515:quantum/rgblight.c ****         // probably due to how pgm_read_word is defined for ARM, but the ARM compiler really hates 
 516:quantum/rgblight.c ****         uint8_t range = pgm_read_word(&RGBLED_GRADIENT_RANGES[delta / 2]);
 517:quantum/rgblight.c **** #else
 518:quantum/rgblight.c ****         uint8_t range = RGBLED_GRADIENT_RANGES[delta / 2];
 519:quantum/rgblight.c **** #endif
 520:quantum/rgblight.c ****         for (uint8_t i = 0; i < effect_num_leds; i++) {
 521:quantum/rgblight.c ****           uint8_t _hue = ((uint16_t)i * (uint16_t)range) / effect_num_leds;
 522:quantum/rgblight.c ****           if (direction) {
 523:quantum/rgblight.c ****             _hue = hue + _hue;
 524:quantum/rgblight.c ****           } else {
 525:quantum/rgblight.c ****             _hue = hue - _hue;
 526:quantum/rgblight.c ****           }
 527:quantum/rgblight.c ****           dprintf("rgblight rainbow set hsv: %d,%d,%d,%u\n", i, _hue, direction, range);
 528:quantum/rgblight.c ****           sethsv(_hue, sat, val, (LED_TYPE *)&led[i + effect_start_pos]);
 529:quantum/rgblight.c ****         }
 530:quantum/rgblight.c ****         rgblight_set();
 531:quantum/rgblight.c ****       }
 532:quantum/rgblight.c **** #endif
 533:quantum/rgblight.c ****     }
 534:quantum/rgblight.c **** #ifdef RGBLIGHT_SPLIT
 535:quantum/rgblight.c ****     if( rgblight_config.hue != hue ||
 536:quantum/rgblight.c ****         rgblight_config.sat != sat ||
 537:quantum/rgblight.c ****         rgblight_config.val != val ) {
 538:quantum/rgblight.c ****         RGBLIGHT_SPLIT_SET_CHANGE_HSVS;
 539:quantum/rgblight.c ****     }
 540:quantum/rgblight.c **** #endif
 541:quantum/rgblight.c ****     rgblight_config.hue = hue;
 542:quantum/rgblight.c ****     rgblight_config.sat = sat;
 543:quantum/rgblight.c ****     rgblight_config.val = val;
 544:quantum/rgblight.c ****     if (write_to_eeprom) {
 545:quantum/rgblight.c ****       eeconfig_update_rgblight(rgblight_config.raw);
 546:quantum/rgblight.c ****       xprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rg
 547:quantum/rgblight.c ****     } else {
 548:quantum/rgblight.c ****       xprintf("rgblight set hsv [NOEEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, 
 549:quantum/rgblight.c ****     }
 550:quantum/rgblight.c ****   }
 551:quantum/rgblight.c **** }
 552:quantum/rgblight.c **** 
 553:quantum/rgblight.c **** void rgblight_sethsv(uint8_t hue, uint8_t sat, uint8_t val) {
 554:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(hue, sat, val, true);
 555:quantum/rgblight.c **** }
 556:quantum/rgblight.c **** 
 557:quantum/rgblight.c **** void rgblight_sethsv_noeeprom(uint8_t hue, uint8_t sat, uint8_t val) {
 558:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(hue, sat, val, false);
 559:quantum/rgblight.c **** }
 560:quantum/rgblight.c **** 
 561:quantum/rgblight.c **** uint8_t rgblight_get_hue(void) {
 562:quantum/rgblight.c ****   return rgblight_config.hue;
 563:quantum/rgblight.c **** }
 564:quantum/rgblight.c **** 
 565:quantum/rgblight.c **** uint8_t rgblight_get_sat(void) {
 566:quantum/rgblight.c ****   return rgblight_config.sat;
 567:quantum/rgblight.c **** }
 568:quantum/rgblight.c **** 
 569:quantum/rgblight.c **** uint8_t rgblight_get_val(void) {
 570:quantum/rgblight.c ****   return rgblight_config.val;
 571:quantum/rgblight.c **** }
 572:quantum/rgblight.c **** 
 573:quantum/rgblight.c **** void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b) {
 574:quantum/rgblight.c ****   if (!rgblight_config.enable) { return; }
 575:quantum/rgblight.c **** 
 576:quantum/rgblight.c ****   for (uint8_t i = effect_start_pos; i < effect_end_pos; i++) {
 577:quantum/rgblight.c ****     led[i].r = r;
 578:quantum/rgblight.c ****     led[i].g = g;
 579:quantum/rgblight.c ****     led[i].b = b;
 580:quantum/rgblight.c ****   }
 581:quantum/rgblight.c ****   rgblight_set();
 582:quantum/rgblight.c **** }
 583:quantum/rgblight.c **** 
 584:quantum/rgblight.c **** void rgblight_setrgb_at(uint8_t r, uint8_t g, uint8_t b, uint8_t index) {
 585:quantum/rgblight.c ****   if (!rgblight_config.enable || index >= RGBLED_NUM) { return; }
 586:quantum/rgblight.c **** 
 587:quantum/rgblight.c ****   led[index].r = r;
 588:quantum/rgblight.c ****   led[index].g = g;
 589:quantum/rgblight.c ****   led[index].b = b;
 590:quantum/rgblight.c ****   rgblight_set();
 591:quantum/rgblight.c **** }
 592:quantum/rgblight.c **** 
 593:quantum/rgblight.c **** void rgblight_sethsv_at(uint8_t hue, uint8_t sat, uint8_t val, uint8_t index) {
 594:quantum/rgblight.c ****   if (!rgblight_config.enable) { return; }
 595:quantum/rgblight.c **** 
 596:quantum/rgblight.c ****   LED_TYPE tmp_led;
 597:quantum/rgblight.c ****   sethsv(hue, sat, val, &tmp_led);
 598:quantum/rgblight.c ****   rgblight_setrgb_at(tmp_led.r, tmp_led.g, tmp_led.b, index);
 599:quantum/rgblight.c **** }
 600:quantum/rgblight.c **** 
 601:quantum/rgblight.c **** #if defined(RGBLIGHT_EFFECT_BREATHING) || defined(RGBLIGHT_EFFECT_RAINBOW_MOOD) || defined(RGBLIGHT
 602:quantum/rgblight.c ****   || defined(RGBLIGHT_EFFECT_SNAKE) || defined(RGBLIGHT_EFFECT_KNIGHT)
 603:quantum/rgblight.c **** 
 604:quantum/rgblight.c **** static uint8_t get_interval_time(const uint8_t* default_interval_address, uint8_t velocikey_min, ui
 605:quantum/rgblight.c ****   return
 606:quantum/rgblight.c **** #ifdef VELOCIKEY_ENABLE
 607:quantum/rgblight.c ****     velocikey_enabled() ? velocikey_match_speed(velocikey_min, velocikey_max) :
 608:quantum/rgblight.c **** #endif
 609:quantum/rgblight.c ****     pgm_read_byte(default_interval_address);
 610:quantum/rgblight.c **** }
 611:quantum/rgblight.c **** 
 612:quantum/rgblight.c **** #endif
 613:quantum/rgblight.c **** 
 614:quantum/rgblight.c **** void rgblight_setrgb_range(uint8_t r, uint8_t g, uint8_t b, uint8_t start, uint8_t end) {
 615:quantum/rgblight.c ****   if (!rgblight_config.enable || start < 0 || start >= end || end > RGBLED_NUM) { return; }
 616:quantum/rgblight.c **** 
 617:quantum/rgblight.c ****   for (uint8_t i = start; i < end; i++) {
 618:quantum/rgblight.c ****     led[i].r = r;
 619:quantum/rgblight.c ****     led[i].g = g;
 620:quantum/rgblight.c ****     led[i].b = b;
 621:quantum/rgblight.c ****   }
 622:quantum/rgblight.c ****   rgblight_set();
 623:quantum/rgblight.c ****   wait_ms(1);
 624:quantum/rgblight.c **** }
 625:quantum/rgblight.c **** 
 626:quantum/rgblight.c **** void rgblight_sethsv_range(uint8_t hue, uint8_t sat, uint8_t val, uint8_t start, uint8_t end) {
 627:quantum/rgblight.c ****   if (!rgblight_config.enable) { return; }
 628:quantum/rgblight.c **** 
 629:quantum/rgblight.c ****   LED_TYPE tmp_led;
 630:quantum/rgblight.c ****   sethsv(hue, sat, val, &tmp_led);
 631:quantum/rgblight.c ****   rgblight_setrgb_range(tmp_led.r, tmp_led.g, tmp_led.b, start, end);
 632:quantum/rgblight.c **** }
 633:quantum/rgblight.c **** 
 634:quantum/rgblight.c **** #ifndef RGBLIGHT_SPLIT
 635:quantum/rgblight.c **** void rgblight_setrgb_master(uint8_t r, uint8_t g, uint8_t b) {
 636:quantum/rgblight.c ****   rgblight_setrgb_range(r, g, b, 0 , (uint8_t) RGBLED_NUM/2);
 637:quantum/rgblight.c **** }
 638:quantum/rgblight.c **** 
 639:quantum/rgblight.c **** void rgblight_setrgb_slave(uint8_t r, uint8_t g, uint8_t b) {
 640:quantum/rgblight.c ****   rgblight_setrgb_range(r, g, b, (uint8_t) RGBLED_NUM/2, (uint8_t) RGBLED_NUM);
 641:quantum/rgblight.c **** }
 642:quantum/rgblight.c **** 
 643:quantum/rgblight.c **** void rgblight_sethsv_master(uint8_t hue, uint8_t sat, uint8_t val) {
 644:quantum/rgblight.c ****   rgblight_sethsv_range(hue, sat, val, 0, (uint8_t) RGBLED_NUM/2);
 645:quantum/rgblight.c **** }
 646:quantum/rgblight.c **** 
 647:quantum/rgblight.c **** void rgblight_sethsv_slave(uint8_t hue, uint8_t sat, uint8_t val) {
 648:quantum/rgblight.c ****   rgblight_sethsv_range(hue, sat, val, (uint8_t) RGBLED_NUM/2, (uint8_t) RGBLED_NUM);
 649:quantum/rgblight.c **** }
 650:quantum/rgblight.c **** #endif // ifndef RGBLIGHT_SPLIT
 651:quantum/rgblight.c **** 
 652:quantum/rgblight.c **** #ifndef RGBLIGHT_CUSTOM_DRIVER
 653:quantum/rgblight.c **** void rgblight_set(void) {
 654:quantum/rgblight.c ****   LED_TYPE *start_led;
 655:quantum/rgblight.c ****   uint16_t num_leds = clipping_num_leds;
 656:quantum/rgblight.c **** 
 657:quantum/rgblight.c ****   if (!rgblight_config.enable) {
 658:quantum/rgblight.c ****     for (uint8_t i = effect_start_pos; i < effect_end_pos; i++) {
 659:quantum/rgblight.c ****       led[i].r = 0;
 660:quantum/rgblight.c ****       led[i].g = 0;
 661:quantum/rgblight.c ****       led[i].b = 0;
 662:quantum/rgblight.c ****     }
 663:quantum/rgblight.c ****   }
 664:quantum/rgblight.c **** #ifdef RGBLIGHT_LED_MAP
 665:quantum/rgblight.c ****   LED_TYPE led0[RGBLED_NUM];
 666:quantum/rgblight.c ****   for(uint8_t i = 0; i < RGBLED_NUM; i++) {
 667:quantum/rgblight.c ****       led0[i] = led[pgm_read_byte(&led_map[i])];
 668:quantum/rgblight.c ****   }
 669:quantum/rgblight.c ****   start_led = led0 + clipping_start_pos;
 670:quantum/rgblight.c **** #else
 671:quantum/rgblight.c ****   start_led = led + clipping_start_pos;
 672:quantum/rgblight.c **** #endif
 673:quantum/rgblight.c **** #ifdef RGBW
 674:quantum/rgblight.c ****   ws2812_setleds_rgbw(start_led, num_leds);
 675:quantum/rgblight.c **** #else
 676:quantum/rgblight.c ****   ws2812_setleds(start_led, num_leds);
 677:quantum/rgblight.c **** #endif
 678:quantum/rgblight.c **** }
 679:quantum/rgblight.c **** #endif
 680:quantum/rgblight.c **** 
 681:quantum/rgblight.c **** #ifdef RGBLIGHT_SPLIT
 682:quantum/rgblight.c **** /* for split keyboard master side */
 683:quantum/rgblight.c **** uint8_t rgblight_get_change_flags(void) {
 684:quantum/rgblight.c ****     return rgblight_status.change_flags;
 685:quantum/rgblight.c **** }
 686:quantum/rgblight.c **** 
 687:quantum/rgblight.c **** void rgblight_clear_change_flags(void) {
 688:quantum/rgblight.c ****     rgblight_status.change_flags = 0;
 689:quantum/rgblight.c **** }
 690:quantum/rgblight.c **** 
 691:quantum/rgblight.c **** void rgblight_get_syncinfo(rgblight_syncinfo_t *syncinfo) {
 692:quantum/rgblight.c ****     syncinfo->config = rgblight_config;
 693:quantum/rgblight.c ****     syncinfo->status = rgblight_status;
 694:quantum/rgblight.c **** }
 695:quantum/rgblight.c **** 
 696:quantum/rgblight.c **** /* for split keyboard slave side */
 697:quantum/rgblight.c **** void rgblight_update_sync(rgblight_syncinfo_t *syncinfo, bool write_to_eeprom) {
 698:quantum/rgblight.c ****     if (syncinfo->status.change_flags & RGBLIGHT_STATUS_CHANGE_MODE) {
 699:quantum/rgblight.c ****         if (syncinfo->config.enable) {
 700:quantum/rgblight.c ****             rgblight_config.enable = 1; // == rgblight_enable_noeeprom();
 701:quantum/rgblight.c ****             rgblight_mode_eeprom_helper(syncinfo->config.mode, write_to_eeprom);
 702:quantum/rgblight.c ****         } else {
 703:quantum/rgblight.c ****             rgblight_disable_noeeprom();
 704:quantum/rgblight.c ****         }
 705:quantum/rgblight.c ****     }
 706:quantum/rgblight.c ****     if (syncinfo->status.change_flags & RGBLIGHT_STATUS_CHANGE_HSVS) {
 707:quantum/rgblight.c ****         rgblight_sethsv_eeprom_helper(syncinfo->config.hue, syncinfo->config.sat, syncinfo->config.
 708:quantum/rgblight.c ****         // rgblight_config.speed = config->speed; // NEED???
 709:quantum/rgblight.c ****     }
 710:quantum/rgblight.c ****   #ifdef RGBLIGHT_USE_TIMER
 711:quantum/rgblight.c ****     if (syncinfo->status.change_flags & RGBLIGHT_STATUS_CHANGE_TIMER) {
 712:quantum/rgblight.c ****         if (syncinfo->status.timer_enabled) {
 713:quantum/rgblight.c ****             rgblight_timer_enable();
 714:quantum/rgblight.c ****         } else {
 715:quantum/rgblight.c ****             rgblight_timer_disable();
 716:quantum/rgblight.c ****         }
 717:quantum/rgblight.c ****     }
 718:quantum/rgblight.c ****     #ifndef RGBLIGHT_SPLIT_NO_ANIMATION_SYNC
 719:quantum/rgblight.c ****     if (syncinfo->status.change_flags & RGBLIGHT_STATUS_ANIMATION_TICK) {
 720:quantum/rgblight.c ****         animation_status.restart = true;
 721:quantum/rgblight.c ****     }
 722:quantum/rgblight.c ****     #endif /* RGBLIGHT_SPLIT_NO_ANIMATION_SYNC */
 723:quantum/rgblight.c ****   #endif /* RGBLIGHT_USE_TIMER */
 724:quantum/rgblight.c **** }
 725:quantum/rgblight.c **** #endif /* RGBLIGHT_SPLIT */
 726:quantum/rgblight.c **** 
 727:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 728:quantum/rgblight.c **** 
 729:quantum/rgblight.c **** typedef void (*effect_func_t)(animation_status_t *anim);
 730:quantum/rgblight.c **** 
 731:quantum/rgblight.c **** // Animation timer -- use system timer (AVR Timer0)
 732:quantum/rgblight.c **** void rgblight_timer_init(void) {
 733:quantum/rgblight.c ****   // OLD!!!! Animation timer -- AVR Timer3
 734:quantum/rgblight.c ****   // static uint8_t rgblight_timer_is_init = 0;
 735:quantum/rgblight.c ****   // if (rgblight_timer_is_init) {
 736:quantum/rgblight.c ****   //   return;
 737:quantum/rgblight.c ****   // }
 738:quantum/rgblight.c ****   // rgblight_timer_is_init = 1;
 739:quantum/rgblight.c ****   // /* Timer 3 setup */
 740:quantum/rgblight.c ****   // TCCR3B = _BV(WGM32) // CTC mode OCR3A as TOP
 741:quantum/rgblight.c ****   //       | _BV(CS30); // Clock selelct: clk/1
 742:quantum/rgblight.c ****   // /* Set TOP value */
 743:quantum/rgblight.c ****   // uint8_t sreg = SREG;
 744:quantum/rgblight.c ****   // cli();
 745:quantum/rgblight.c ****   // OCR3AH = (RGBLED_TIMER_TOP >> 8) & 0xff;
 746:quantum/rgblight.c ****   // OCR3AL = RGBLED_TIMER_TOP & 0xff;
 747:quantum/rgblight.c ****   // SREG = sreg;
 748:quantum/rgblight.c **** 
 749:quantum/rgblight.c ****   rgblight_status.timer_enabled = false;
 750:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 751:quantum/rgblight.c **** }
 752:quantum/rgblight.c **** void rgblight_timer_enable(void) {
 753:quantum/rgblight.c ****   if( !is_static_effect(rgblight_config.mode) ) {
 754:quantum/rgblight.c ****       rgblight_status.timer_enabled = true;
 755:quantum/rgblight.c ****   }
 756:quantum/rgblight.c ****   animation_status.last_timer = timer_read();
 757:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 758:quantum/rgblight.c ****   dprintf("rgblight timer enabled.\n");
 759:quantum/rgblight.c **** }
 760:quantum/rgblight.c **** void rgblight_timer_disable(void) {
 761:quantum/rgblight.c ****   rgblight_status.timer_enabled = false;
 762:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 763:quantum/rgblight.c ****   dprintf("rgblight timer disable.\n");
 764:quantum/rgblight.c **** }
 765:quantum/rgblight.c **** void rgblight_timer_toggle(void) {
 766:quantum/rgblight.c ****   dprintf("rgblight timer toggle.\n");
 767:quantum/rgblight.c ****   if(rgblight_status.timer_enabled) {
 768:quantum/rgblight.c ****       rgblight_timer_disable();
 769:quantum/rgblight.c ****   } else {
 770:quantum/rgblight.c ****       rgblight_timer_enable();
 771:quantum/rgblight.c ****   }
 772:quantum/rgblight.c **** }
 773:quantum/rgblight.c **** 
 774:quantum/rgblight.c **** void rgblight_show_solid_color(uint8_t r, uint8_t g, uint8_t b) {
 775:quantum/rgblight.c ****   rgblight_enable();
 776:quantum/rgblight.c ****   rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 777:quantum/rgblight.c ****   rgblight_setrgb(r, g, b);
 778:quantum/rgblight.c **** }
 779:quantum/rgblight.c **** 
 780:quantum/rgblight.c **** static void rgblight_effect_dummy(animation_status_t *anim) {
  15               		.loc 1 780 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE154:
  26               		.section	.text.rgblight_set_clipping_range,"ax",@progbits
  27               	.global	rgblight_set_clipping_range
  29               	rgblight_set_clipping_range:
  30               	.LFB80:
 108:quantum/rgblight.c ****   clipping_start_pos = start_pos;
  31               		.loc 1 108 0
  32               		.cfi_startproc
  33               	.LVL1:
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 0 */
  37               	.L__stack_usage = 0
 109:quantum/rgblight.c ****   clipping_num_leds = num_leds;
  38               		.loc 1 109 0
  39 0000 8093 0000 		sts clipping_start_pos,r24
 110:quantum/rgblight.c **** }
  40               		.loc 1 110 0
  41 0004 6093 0000 		sts clipping_num_leds,r22
  42 0008 0895      		ret
  43               		.cfi_endproc
  44               	.LFE80:
  46               		.section	.text.rgblight_set_effect_range,"ax",@progbits
  47               	.global	rgblight_set_effect_range
  49               	rgblight_set_effect_range:
  50               	.LFB81:
 113:quantum/rgblight.c ****   if (start_pos >= RGBLED_NUM) return;
  51               		.loc 1 113 0
  52               		.cfi_startproc
  53               	.LVL2:
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 0 */
  57               	.L__stack_usage = 0
 114:quantum/rgblight.c ****   if (start_pos + num_leds > RGBLED_NUM) return;
  58               		.loc 1 114 0
  59 0000 8430      		cpi r24,lo8(4)
  60 0002 00F4      		brsh .L3
 115:quantum/rgblight.c ****   effect_start_pos = start_pos;
  61               		.loc 1 115 0
  62 0004 262F      		mov r18,r22
  63 0006 30E0      		ldi r19,0
  64 0008 280F      		add r18,r24
  65 000a 311D      		adc r19,__zero_reg__
  66 000c 2530      		cpi r18,5
  67 000e 3105      		cpc r19,__zero_reg__
  68 0010 04F4      		brge .L3
 116:quantum/rgblight.c ****   effect_end_pos = start_pos + num_leds;
  69               		.loc 1 116 0
  70 0012 8093 0000 		sts effect_start_pos,r24
 117:quantum/rgblight.c ****   effect_num_leds = num_leds;
  71               		.loc 1 117 0
  72 0016 860F      		add r24,r22
  73               	.LVL3:
  74 0018 8093 0000 		sts effect_end_pos,r24
 118:quantum/rgblight.c **** }
  75               		.loc 1 118 0
  76 001c 6093 0000 		sts effect_num_leds,r22
  77               	.LVL4:
  78               	.L3:
  79 0020 0895      		ret
  80               		.cfi_endproc
  81               	.LFE81:
  83               		.section	.text.sethsv_raw,"ax",@progbits
  84               	.global	sethsv_raw
  86               	sethsv_raw:
  87               	.LFB82:
 121:quantum/rgblight.c ****   HSV hsv = { hue, sat, val };
  88               		.loc 1 121 0
  89               		.cfi_startproc
  90               	.LVL5:
  91 0000 CF93      		push r28
  92               	.LCFI0:
  93               		.cfi_def_cfa_offset 3
  94               		.cfi_offset 28, -2
  95 0002 DF93      		push r29
  96               	.LCFI1:
  97               		.cfi_def_cfa_offset 4
  98               		.cfi_offset 29, -3
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 2 */
 102               	.L__stack_usage = 2
 103 0004 762F      		mov r23,r22
 104 0006 E901      		movw r28,r18
 123:quantum/rgblight.c ****   setrgb(rgb.r, rgb.g, rgb.b, led1);
 105               		.loc 1 123 0
 106 0008 682F      		mov r22,r24
 107               	.LVL6:
 108 000a 842F      		mov r24,r20
 109               	.LVL7:
 110 000c 0E94 0000 		call hsv_to_rgb
 111               	.LVL8:
 112               	.LBB20:
 113               	.LBB21:
 134:quantum/rgblight.c ****   (*led1).g = g;
 114               		.loc 1 134 0
 115 0010 7983      		std Y+1,r23
 135:quantum/rgblight.c ****   (*led1).b = b;
 116               		.loc 1 135 0
 117 0012 6883      		st Y,r22
 136:quantum/rgblight.c **** }
 118               		.loc 1 136 0
 119 0014 8A83      		std Y+2,r24
 120               	.LVL9:
 121               	/* epilogue start */
 122               	.LBE21:
 123               	.LBE20:
 125:quantum/rgblight.c **** 
 124               		.loc 1 125 0
 125 0016 DF91      		pop r29
 126 0018 CF91      		pop r28
 127               	.LVL10:
 128 001a 0895      		ret
 129               		.cfi_endproc
 130               	.LFE82:
 132               		.section	.text.sethsv,"ax",@progbits
 133               	.global	sethsv
 135               	sethsv:
 136               	.LFB83:
 127:quantum/rgblight.c ****   sethsv_raw( hue, sat,
 137               		.loc 1 127 0
 138               		.cfi_startproc
 139               	.LVL11:
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 144               		.loc 1 128 0
 145 0000 0C94 0000 		jmp sethsv_raw
 146               	.LVL12:
 147               		.cfi_endproc
 148               	.LFE83:
 150               		.section	.text.setrgb,"ax",@progbits
 151               	.global	setrgb
 153               	setrgb:
 154               	.LFB84:
 133:quantum/rgblight.c ****   (*led1).r = r;
 155               		.loc 1 133 0
 156               		.cfi_startproc
 157               	.LVL13:
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
 162 0000 F901      		movw r30,r18
 134:quantum/rgblight.c ****   (*led1).g = g;
 163               		.loc 1 134 0
 164 0002 8183      		std Z+1,r24
 135:quantum/rgblight.c ****   (*led1).b = b;
 165               		.loc 1 135 0
 166 0004 6083      		st Z,r22
 136:quantum/rgblight.c **** }
 167               		.loc 1 136 0
 168 0006 4283      		std Z+2,r20
 169 0008 0895      		ret
 170               		.cfi_endproc
 171               	.LFE84:
 173               		.section	.text.rgblight_check_config,"ax",@progbits
 174               	.global	rgblight_check_config
 176               	rgblight_check_config:
 177               	.LFB85:
 139:quantum/rgblight.c ****   /* Add some out of bound checks for RGB light config */
 178               		.loc 1 139 0
 179               		.cfi_startproc
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 142:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODE_STATIC_LIGHT;
 184               		.loc 1 142 0
 185 0000 8091 0000 		lds r24,rgblight_config
 186 0004 282F      		mov r18,r24
 187 0006 2695      		lsr r18
 188 0008 30E0      		ldi r19,0
 189 000a 2115      		cp r18,__zero_reg__
 190 000c 3105      		cpc r19,__zero_reg__
 191 000e 01F4      		brne .L10
 143:quantum/rgblight.c ****   }
 192               		.loc 1 143 0
 193 0010 8170      		andi r24,lo8(1)
 194 0012 8260      		ori r24,lo8(2)
 195 0014 00C0      		rjmp .L12
 196               	.L10:
 145:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODES;
 197               		.loc 1 145 0
 198 0016 2532      		cpi r18,37
 199 0018 3105      		cpc r19,__zero_reg__
 200 001a 04F0      		brlt .L9
 146:quantum/rgblight.c ****   }
 201               		.loc 1 146 0
 202 001c 8170      		andi r24,lo8(1)
 203 001e 8864      		ori r24,lo8(72)
 204               	.L12:
 205 0020 8093 0000 		sts rgblight_config,r24
 206               	.L9:
 207 0024 0895      		ret
 208               		.cfi_endproc
 209               	.LFE85:
 211               		.section	.text.eeconfig_read_rgblight,"ax",@progbits
 212               	.global	eeconfig_read_rgblight
 214               	eeconfig_read_rgblight:
 215               	.LFB86:
 154:quantum/rgblight.c ****   #if defined(__AVR__) || defined(STM32_EEPROM_ENABLE) || defined(PROTOCOL_ARM_ATSAM) || defined(EE
 216               		.loc 1 154 0
 217               		.cfi_startproc
 218               	/* prologue: function */
 219               	/* frame size = 0 */
 220               	/* stack size = 0 */
 221               	.L__stack_usage = 0
 156:quantum/rgblight.c ****   #else
 222               		.loc 1 156 0
 223 0000 88E0      		ldi r24,lo8(8)
 224 0002 90E0      		ldi r25,0
 225 0004 0C94 0000 		jmp eeprom_read_dword
 226               	.LVL14:
 227               		.cfi_endproc
 228               	.LFE86:
 230               		.section	.text.eeconfig_update_rgblight,"ax",@progbits
 231               	.global	eeconfig_update_rgblight
 233               	eeconfig_update_rgblight:
 234               	.LFB87:
 162:quantum/rgblight.c ****   #if defined(__AVR__) || defined(STM32_EEPROM_ENABLE) || defined(PROTOCOL_ARM_ATSAM) || defined(EE
 235               		.loc 1 162 0
 236               		.cfi_startproc
 237               	.LVL15:
 238 0000 CF92      		push r12
 239               	.LCFI2:
 240               		.cfi_def_cfa_offset 3
 241               		.cfi_offset 12, -2
 242 0002 DF92      		push r13
 243               	.LCFI3:
 244               		.cfi_def_cfa_offset 4
 245               		.cfi_offset 13, -3
 246 0004 EF92      		push r14
 247               	.LCFI4:
 248               		.cfi_def_cfa_offset 5
 249               		.cfi_offset 14, -4
 250 0006 FF92      		push r15
 251               	.LCFI5:
 252               		.cfi_def_cfa_offset 6
 253               		.cfi_offset 15, -5
 254               	/* prologue: function */
 255               	/* frame size = 0 */
 256               	/* stack size = 4 */
 257               	.L__stack_usage = 4
 258 0008 6B01      		movw r12,r22
 259 000a 7C01      		movw r14,r24
 164:quantum/rgblight.c ****     eeprom_update_dword(EECONFIG_RGBLIGHT, val);
 260               		.loc 1 164 0
 261 000c 0E94 0000 		call rgblight_check_config
 262               	.LVL16:
 165:quantum/rgblight.c ****   #endif
 263               		.loc 1 165 0
 264 0010 B701      		movw r22,r14
 265 0012 A601      		movw r20,r12
 266 0014 88E0      		ldi r24,lo8(8)
 267 0016 90E0      		ldi r25,0
 268               	/* epilogue start */
 167:quantum/rgblight.c **** 
 269               		.loc 1 167 0
 270 0018 FF90      		pop r15
 271 001a EF90      		pop r14
 272 001c DF90      		pop r13
 273 001e CF90      		pop r12
 274               	.LVL17:
 165:quantum/rgblight.c ****   #endif
 275               		.loc 1 165 0
 276 0020 0C94 0000 		jmp eeprom_update_dword
 277               	.LVL18:
 278               		.cfi_endproc
 279               	.LFE87:
 281               		.section	.text.eeconfig_update_rgblight_default,"ax",@progbits
 282               	.global	eeconfig_update_rgblight_default
 284               	eeconfig_update_rgblight_default:
 285               	.LFB88:
 169:quantum/rgblight.c ****   //dprintf("eeconfig_update_rgblight_default\n");
 286               		.loc 1 169 0
 287               		.cfi_startproc
 288               	/* prologue: function */
 289               	/* frame size = 0 */
 290               	/* stack size = 0 */
 291               	.L__stack_usage = 0
 171:quantum/rgblight.c ****   rgblight_config.mode = RGBLIGHT_MODE_STATIC_LIGHT;
 292               		.loc 1 171 0
 293 0000 E0E0      		ldi r30,lo8(rgblight_config)
 294 0002 F0E0      		ldi r31,hi8(rgblight_config)
 172:quantum/rgblight.c ****   rgblight_config.hue = 0;
 295               		.loc 1 172 0
 296 0004 83E0      		ldi r24,lo8(3)
 297 0006 8083      		st Z,r24
 173:quantum/rgblight.c ****   rgblight_config.sat = UINT8_MAX;
 298               		.loc 1 173 0
 299 0008 1182      		std Z+1,__zero_reg__
 174:quantum/rgblight.c ****   rgblight_config.val = RGBLIGHT_LIMIT_VAL;
 300               		.loc 1 174 0
 301 000a 8FEF      		ldi r24,lo8(-1)
 302 000c 8283      		std Z+2,r24
 175:quantum/rgblight.c ****   rgblight_config.speed = 0;
 303               		.loc 1 175 0
 304 000e 8383      		std Z+3,r24
 176:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 305               		.loc 1 176 0
 306 0010 1482      		std Z+4,__zero_reg__
 178:quantum/rgblight.c **** }
 307               		.loc 1 178 0
 308 0012 6081      		ld r22,Z
 309 0014 7181      		ldd r23,Z+1
 310 0016 8281      		ldd r24,Z+2
 311 0018 9381      		ldd r25,Z+3
 312 001a 0C94 0000 		jmp eeconfig_update_rgblight
 313               	.LVL19:
 314               		.cfi_endproc
 315               	.LFE88:
 317               		.section	.text.eeconfig_debug_rgblight,"ax",@progbits
 318               	.global	eeconfig_debug_rgblight
 320               	eeconfig_debug_rgblight:
 321               	.LFB89:
 181:quantum/rgblight.c ****   dprintf("rgblight_config eprom\n");
 322               		.loc 1 181 0
 323               		.cfi_startproc
 324               	/* prologue: function */
 325               	/* frame size = 0 */
 326               	/* stack size = 0 */
 327               	.L__stack_usage = 0
 328 0000 0895      		ret
 329               		.cfi_endproc
 330               	.LFE89:
 332               		.section	.text.rgblight_read_dword,"ax",@progbits
 333               	.global	rgblight_read_dword
 335               	rgblight_read_dword:
 336               	.LFB91:
 228:quantum/rgblight.c ****   return rgblight_config.raw;
 337               		.loc 1 228 0
 338               		.cfi_startproc
 339               	/* prologue: function */
 340               	/* frame size = 0 */
 341               	/* stack size = 0 */
 342               	.L__stack_usage = 0
 229:quantum/rgblight.c **** }
 343               		.loc 1 229 0
 344 0000 6091 0000 		lds r22,rgblight_config
 345 0004 7091 0000 		lds r23,rgblight_config+1
 346 0008 8091 0000 		lds r24,rgblight_config+2
 347 000c 9091 0000 		lds r25,rgblight_config+3
 230:quantum/rgblight.c **** 
 348               		.loc 1 230 0
 349 0010 0895      		ret
 350               		.cfi_endproc
 351               	.LFE91:
 353               		.section	.text.rgblight_get_mode,"ax",@progbits
 354               	.global	rgblight_get_mode
 356               	rgblight_get_mode:
 357               	.LFB101:
 289:quantum/rgblight.c ****   if (!rgblight_config.enable) {
 358               		.loc 1 289 0
 359               		.cfi_startproc
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 0 */
 363               	.L__stack_usage = 0
 290:quantum/rgblight.c ****     return false;
 364               		.loc 1 290 0
 365 0000 8091 0000 		lds r24,rgblight_config
 366 0004 80FF      		sbrs r24,0
 367 0006 00C0      		rjmp .L20
 294:quantum/rgblight.c **** }
 368               		.loc 1 294 0
 369 0008 8695      		lsr r24
 370 000a 0895      		ret
 371               	.L20:
 291:quantum/rgblight.c ****   }
 372               		.loc 1 291 0
 373 000c 80E0      		ldi r24,0
 295:quantum/rgblight.c **** 
 374               		.loc 1 295 0
 375 000e 0895      		ret
 376               		.cfi_endproc
 377               	.LFE101:
 379               		.section	.text.rgblight_increase_speed,"ax",@progbits
 380               	.global	rgblight_increase_speed
 382               	rgblight_increase_speed:
 383               	.LFB129:
 456:quantum/rgblight.c ****     if (rgblight_config.speed < 3)
 384               		.loc 1 456 0
 385               		.cfi_startproc
 386               	/* prologue: function */
 387               	/* frame size = 0 */
 388               	/* stack size = 0 */
 389               	.L__stack_usage = 0
 457:quantum/rgblight.c ****         rgblight_config.speed++;
 390               		.loc 1 457 0
 391 0000 8091 0000 		lds r24,rgblight_config+4
 392 0004 8330      		cpi r24,lo8(3)
 393 0006 00F4      		brsh .L22
 458:quantum/rgblight.c ****     //RGBLIGHT_SPLIT_SET_CHANGE_HSVS; // NEED?
 394               		.loc 1 458 0
 395 0008 8F5F      		subi r24,lo8(-(1))
 396 000a 8093 0000 		sts rgblight_config+4,r24
 397               	.L22:
 460:quantum/rgblight.c **** }
 398               		.loc 1 460 0
 399 000e 6091 0000 		lds r22,rgblight_config
 400 0012 7091 0000 		lds r23,rgblight_config+1
 401 0016 8091 0000 		lds r24,rgblight_config+2
 402 001a 9091 0000 		lds r25,rgblight_config+3
 403 001e 0C94 0000 		jmp eeconfig_update_rgblight
 404               	.LVL20:
 405               		.cfi_endproc
 406               	.LFE129:
 408               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 409               	.global	rgblight_decrease_speed
 411               	rgblight_decrease_speed:
 412               	.LFB130:
 463:quantum/rgblight.c ****     if (rgblight_config.speed > 0)
 413               		.loc 1 463 0
 414               		.cfi_startproc
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 0 */
 418               	.L__stack_usage = 0
 464:quantum/rgblight.c ****         rgblight_config.speed--;
 419               		.loc 1 464 0
 420 0000 8091 0000 		lds r24,rgblight_config+4
 421 0004 8823      		tst r24
 422 0006 01F0      		breq .L24
 465:quantum/rgblight.c ****     //RGBLIGHT_SPLIT_SET_CHANGE_HSVS; // NEED??
 423               		.loc 1 465 0
 424 0008 8150      		subi r24,lo8(-(-1))
 425 000a 8093 0000 		sts rgblight_config+4,r24
 426               	.L24:
 467:quantum/rgblight.c **** }
 427               		.loc 1 467 0
 428 000e 6091 0000 		lds r22,rgblight_config
 429 0012 7091 0000 		lds r23,rgblight_config+1
 430 0016 8091 0000 		lds r24,rgblight_config+2
 431 001a 9091 0000 		lds r25,rgblight_config+3
 432 001e 0C94 0000 		jmp eeconfig_update_rgblight
 433               	.LVL21:
 434               		.cfi_endproc
 435               	.LFE130:
 437               		.section	.text.rgblight_get_hue,"ax",@progbits
 438               	.global	rgblight_get_hue
 440               	rgblight_get_hue:
 441               	.LFB135:
 561:quantum/rgblight.c ****   return rgblight_config.hue;
 442               		.loc 1 561 0
 443               		.cfi_startproc
 444               	/* prologue: function */
 445               	/* frame size = 0 */
 446               	/* stack size = 0 */
 447               	.L__stack_usage = 0
 563:quantum/rgblight.c **** 
 448               		.loc 1 563 0
 449 0000 8091 0000 		lds r24,rgblight_config+1
 450 0004 0895      		ret
 451               		.cfi_endproc
 452               	.LFE135:
 454               		.section	.text.rgblight_get_sat,"ax",@progbits
 455               	.global	rgblight_get_sat
 457               	rgblight_get_sat:
 458               	.LFB136:
 565:quantum/rgblight.c ****   return rgblight_config.sat;
 459               		.loc 1 565 0
 460               		.cfi_startproc
 461               	/* prologue: function */
 462               	/* frame size = 0 */
 463               	/* stack size = 0 */
 464               	.L__stack_usage = 0
 567:quantum/rgblight.c **** 
 465               		.loc 1 567 0
 466 0000 8091 0000 		lds r24,rgblight_config+2
 467 0004 0895      		ret
 468               		.cfi_endproc
 469               	.LFE136:
 471               		.section	.text.rgblight_get_val,"ax",@progbits
 472               	.global	rgblight_get_val
 474               	rgblight_get_val:
 475               	.LFB137:
 569:quantum/rgblight.c ****   return rgblight_config.val;
 476               		.loc 1 569 0
 477               		.cfi_startproc
 478               	/* prologue: function */
 479               	/* frame size = 0 */
 480               	/* stack size = 0 */
 481               	.L__stack_usage = 0
 571:quantum/rgblight.c **** 
 482               		.loc 1 571 0
 483 0000 8091 0000 		lds r24,rgblight_config+3
 484 0004 0895      		ret
 485               		.cfi_endproc
 486               	.LFE137:
 488               		.section	.text.rgblight_set,"ax",@progbits
 489               	.global	rgblight_set
 491               	rgblight_set:
 492               	.LFB148:
 653:quantum/rgblight.c ****   LED_TYPE *start_led;
 493               		.loc 1 653 0
 494               		.cfi_startproc
 495               	/* prologue: function */
 496               	/* frame size = 0 */
 497               	/* stack size = 0 */
 498               	.L__stack_usage = 0
 655:quantum/rgblight.c **** 
 499               		.loc 1 655 0
 500 0000 6091 0000 		lds r22,clipping_num_leds
 501 0004 70E0      		ldi r23,0
 502               	.LVL22:
 657:quantum/rgblight.c ****     for (uint8_t i = effect_start_pos; i < effect_end_pos; i++) {
 503               		.loc 1 657 0
 504 0006 8091 0000 		lds r24,rgblight_config
 505 000a 80FF      		sbrs r24,0
 506 000c 00C0      		rjmp .L32
 507               	.L35:
 671:quantum/rgblight.c **** #endif
 508               		.loc 1 671 0
 509 000e 8091 0000 		lds r24,clipping_start_pos
 510               	.LVL23:
 676:quantum/rgblight.c **** #endif
 511               		.loc 1 676 0
 512 0012 23E0      		ldi r18,lo8(3)
 513 0014 829F      		mul r24,r18
 514 0016 C001      		movw r24,r0
 515 0018 1124      		clr __zero_reg__
 516               	.LVL24:
 517 001a 8050      		subi r24,lo8(-(led))
 518 001c 9040      		sbci r25,hi8(-(led))
 519 001e 0C94 0000 		jmp ws2812_setleds
 520               	.LVL25:
 521               	.L32:
 522               	.LBB22:
 658:quantum/rgblight.c ****       led[i].r = 0;
 523               		.loc 1 658 0
 524 0022 8091 0000 		lds r24,effect_start_pos
 525               	.LVL26:
 526 0026 9091 0000 		lds r25,effect_end_pos
 527               	.L33:
 658:quantum/rgblight.c ****       led[i].r = 0;
 528               		.loc 1 658 0 is_stmt 0 discriminator 1
 529 002a 8917      		cp r24,r25
 530 002c 00F4      		brsh .L35
 659:quantum/rgblight.c ****       led[i].g = 0;
 531               		.loc 1 659 0 is_stmt 1 discriminator 3
 532 002e E82F      		mov r30,r24
 533 0030 F0E0      		ldi r31,0
 534 0032 9F01      		movw r18,r30
 535 0034 220F      		lsl r18
 536 0036 331F      		rol r19
 537 0038 E20F      		add r30,r18
 538 003a F31F      		adc r31,r19
 539 003c E050      		subi r30,lo8(-(led))
 540 003e F040      		sbci r31,hi8(-(led))
 541 0040 1182      		std Z+1,__zero_reg__
 660:quantum/rgblight.c ****       led[i].b = 0;
 542               		.loc 1 660 0 discriminator 3
 543 0042 1082      		st Z,__zero_reg__
 661:quantum/rgblight.c ****     }
 544               		.loc 1 661 0 discriminator 3
 545 0044 1282      		std Z+2,__zero_reg__
 658:quantum/rgblight.c ****       led[i].r = 0;
 546               		.loc 1 658 0 discriminator 3
 547 0046 8F5F      		subi r24,lo8(-(1))
 548               	.LVL27:
 549 0048 00C0      		rjmp .L33
 550               	.LBE22:
 551               		.cfi_endproc
 552               	.LFE148:
 554               		.section	.text.rgblight_setrgb,"ax",@progbits
 555               	.global	rgblight_setrgb
 557               	rgblight_setrgb:
 558               	.LFB138:
 573:quantum/rgblight.c ****   if (!rgblight_config.enable) { return; }
 559               		.loc 1 573 0
 560               		.cfi_startproc
 561               	.LVL28:
 562               	/* prologue: function */
 563               	/* frame size = 0 */
 564               	/* stack size = 0 */
 565               	.L__stack_usage = 0
 574:quantum/rgblight.c **** 
 566               		.loc 1 574 0
 567 0000 9091 0000 		lds r25,rgblight_config
 568 0004 90FF      		sbrs r25,0
 569 0006 00C0      		rjmp .L36
 570               	.LBB23:
 576:quantum/rgblight.c ****     led[i].r = r;
 571               		.loc 1 576 0
 572 0008 9091 0000 		lds r25,effect_start_pos
 573               	.LVL29:
 574 000c 2091 0000 		lds r18,effect_end_pos
 575               	.L38:
 576:quantum/rgblight.c ****     led[i].r = r;
 576               		.loc 1 576 0 is_stmt 0 discriminator 1
 577 0010 9217      		cp r25,r18
 578 0012 00F4      		brsh .L40
 577:quantum/rgblight.c ****     led[i].g = g;
 579               		.loc 1 577 0 is_stmt 1 discriminator 3
 580 0014 E92F      		mov r30,r25
 581 0016 F0E0      		ldi r31,0
 582 0018 DF01      		movw r26,r30
 583 001a AA0F      		lsl r26
 584 001c BB1F      		rol r27
 585 001e EA0F      		add r30,r26
 586 0020 FB1F      		adc r31,r27
 587 0022 E050      		subi r30,lo8(-(led))
 588 0024 F040      		sbci r31,hi8(-(led))
 589 0026 8183      		std Z+1,r24
 578:quantum/rgblight.c ****     led[i].b = b;
 590               		.loc 1 578 0 discriminator 3
 591 0028 6083      		st Z,r22
 579:quantum/rgblight.c ****   }
 592               		.loc 1 579 0 discriminator 3
 593 002a 4283      		std Z+2,r20
 576:quantum/rgblight.c ****     led[i].r = r;
 594               		.loc 1 576 0 discriminator 3
 595 002c 9F5F      		subi r25,lo8(-(1))
 596               	.LVL30:
 597 002e 00C0      		rjmp .L38
 598               	.L40:
 599               	.LBE23:
 581:quantum/rgblight.c **** }
 600               		.loc 1 581 0
 601 0030 0C94 0000 		jmp rgblight_set
 602               	.LVL31:
 603               	.L36:
 604 0034 0895      		ret
 605               		.cfi_endproc
 606               	.LFE138:
 608               		.section	.text.rgblight_sethsv_noeeprom_old,"ax",@progbits
 609               	.global	rgblight_sethsv_noeeprom_old
 611               	rgblight_sethsv_noeeprom_old:
 612               	.LFB131:
 470:quantum/rgblight.c ****   if (rgblight_config.enable) {
 613               		.loc 1 470 0
 614               		.cfi_startproc
 615               	.LVL32:
 616 0000 CF93      		push r28
 617               	.LCFI6:
 618               		.cfi_def_cfa_offset 3
 619               		.cfi_offset 28, -2
 620 0002 DF93      		push r29
 621               	.LCFI7:
 622               		.cfi_def_cfa_offset 4
 623               		.cfi_offset 29, -3
 624 0004 00D0      		rcall .
 625 0006 1F92      		push __zero_reg__
 626               	.LCFI8:
 627               		.cfi_def_cfa_offset 7
 628 0008 CDB7      		in r28,__SP_L__
 629 000a DEB7      		in r29,__SP_H__
 630               	.LCFI9:
 631               		.cfi_def_cfa_register 28
 632               	/* prologue: function */
 633               	/* frame size = 3 */
 634               	/* stack size = 5 */
 635               	.L__stack_usage = 5
 471:quantum/rgblight.c ****     LED_TYPE tmp_led;
 636               		.loc 1 471 0
 637 000c 9091 0000 		lds r25,rgblight_config
 638 0010 90FF      		sbrs r25,0
 639 0012 00C0      		rjmp .L41
 640               	.LVL33:
 641               	.LBB27:
 642               	.LBB28:
 643               	.LBB29:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 644               		.loc 1 128 0
 645 0014 9E01      		movw r18,r28
 646 0016 2F5F      		subi r18,-1
 647 0018 3F4F      		sbci r19,-1
 648 001a 0E94 0000 		call sethsv_raw
 649               	.LVL34:
 650               	.LBE29:
 651               	.LBE28:
 475:quantum/rgblight.c ****   }
 652               		.loc 1 475 0
 653 001e 4B81      		ldd r20,Y+3
 654 0020 6981      		ldd r22,Y+1
 655 0022 8A81      		ldd r24,Y+2
 656 0024 0E94 0000 		call rgblight_setrgb
 657               	.LVL35:
 658               	.L41:
 659               	/* epilogue start */
 660               	.LBE27:
 477:quantum/rgblight.c **** 
 661               		.loc 1 477 0
 662 0028 0F90      		pop __tmp_reg__
 663 002a 0F90      		pop __tmp_reg__
 664 002c 0F90      		pop __tmp_reg__
 665 002e DF91      		pop r29
 666 0030 CF91      		pop r28
 667 0032 0895      		ret
 668               		.cfi_endproc
 669               	.LFE131:
 671               		.section	.text.rgblight_effect_breathing,"ax",@progbits
 672               	.global	rgblight_effect_breathing
 674               	rgblight_effect_breathing:
 675               	.LFB156:
 781:quantum/rgblight.c ****     // do nothing
 782:quantum/rgblight.c ****     /********
 783:quantum/rgblight.c ****     dprintf("rgblight_task() what happened?\n");
 784:quantum/rgblight.c ****     dprintf("is_static_effect %d\n", is_static_effect(rgblight_config.mode));
 785:quantum/rgblight.c ****     dprintf("mode = %d, base_mode = %d, timer_enabled %d, ",
 786:quantum/rgblight.c ****             rgblight_config.mode, rgblight_status.base_mode,
 787:quantum/rgblight.c ****             rgblight_status.timer_enabled);
 788:quantum/rgblight.c ****     dprintf("last_timer = %d\n",anim->last_timer);
 789:quantum/rgblight.c ****     **/
 790:quantum/rgblight.c **** }
 791:quantum/rgblight.c **** 
 792:quantum/rgblight.c **** void rgblight_task(void) {
 793:quantum/rgblight.c ****   if (rgblight_status.timer_enabled) {
 794:quantum/rgblight.c ****     effect_func_t effect_func = rgblight_effect_dummy;
 795:quantum/rgblight.c ****     uint16_t interval_time = 2000; // dummy interval
 796:quantum/rgblight.c ****     uint8_t delta = rgblight_config.mode - rgblight_status.base_mode;
 797:quantum/rgblight.c ****     animation_status.delta = delta;
 798:quantum/rgblight.c **** 
 799:quantum/rgblight.c ****     // static light mode, do nothing here
 800:quantum/rgblight.c ****     if ( 1 == 0 ) { //dummy
 801:quantum/rgblight.c ****     }
 802:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_BREATHING
 803:quantum/rgblight.c ****     else if (rgblight_status.base_mode == RGBLIGHT_MODE_BREATHING) {
 804:quantum/rgblight.c ****       // breathing mode
 805:quantum/rgblight.c ****       interval_time = get_interval_time(&RGBLED_BREATHING_INTERVALS[delta], 1, 100);
 806:quantum/rgblight.c ****       effect_func = rgblight_effect_breathing;
 807:quantum/rgblight.c ****     }
 808:quantum/rgblight.c **** #endif
 809:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 810:quantum/rgblight.c ****     else if (rgblight_status.base_mode == RGBLIGHT_MODE_RAINBOW_MOOD) {
 811:quantum/rgblight.c ****       // rainbow mood mode
 812:quantum/rgblight.c ****       interval_time = get_interval_time(&RGBLED_RAINBOW_MOOD_INTERVALS[delta], 5, 100);
 813:quantum/rgblight.c ****       effect_func = rgblight_effect_rainbow_mood;
 814:quantum/rgblight.c ****     }
 815:quantum/rgblight.c **** #endif
 816:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 817:quantum/rgblight.c ****     else if (rgblight_status.base_mode == RGBLIGHT_MODE_RAINBOW_SWIRL) {
 818:quantum/rgblight.c ****       // rainbow swirl mode
 819:quantum/rgblight.c ****       interval_time = get_interval_time(&RGBLED_RAINBOW_SWIRL_INTERVALS[delta / 2], 1, 100);
 820:quantum/rgblight.c ****       effect_func = rgblight_effect_rainbow_swirl;
 821:quantum/rgblight.c ****     }
 822:quantum/rgblight.c **** #endif
 823:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_SNAKE
 824:quantum/rgblight.c ****     else if (rgblight_status.base_mode == RGBLIGHT_MODE_SNAKE) {
 825:quantum/rgblight.c ****       // snake mode
 826:quantum/rgblight.c ****       interval_time = get_interval_time(&RGBLED_SNAKE_INTERVALS[delta / 2], 1, 200);
 827:quantum/rgblight.c ****       effect_func = rgblight_effect_snake;
 828:quantum/rgblight.c ****     }
 829:quantum/rgblight.c **** #endif
 830:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_KNIGHT
 831:quantum/rgblight.c ****     else if (rgblight_status.base_mode == RGBLIGHT_MODE_KNIGHT) {
 832:quantum/rgblight.c ****       // knight mode
 833:quantum/rgblight.c ****       interval_time = get_interval_time(&RGBLED_KNIGHT_INTERVALS[delta], 5, 100);
 834:quantum/rgblight.c ****       effect_func = rgblight_effect_knight;
 835:quantum/rgblight.c ****     }
 836:quantum/rgblight.c **** #endif
 837:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_CHRISTMAS
 838:quantum/rgblight.c ****     else if (rgblight_status.base_mode == RGBLIGHT_MODE_CHRISTMAS) {
 839:quantum/rgblight.c ****       // christmas mode
 840:quantum/rgblight.c ****       interval_time = RGBLIGHT_EFFECT_CHRISTMAS_INTERVAL;
 841:quantum/rgblight.c ****       effect_func = (effect_func_t)rgblight_effect_christmas;
 842:quantum/rgblight.c ****     }
 843:quantum/rgblight.c **** #endif
 844:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RGB_TEST
 845:quantum/rgblight.c ****     else if (rgblight_status.base_mode == RGBLIGHT_MODE_RGB_TEST) {
 846:quantum/rgblight.c ****       // RGB test mode
 847:quantum/rgblight.c ****       interval_time = pgm_read_word(&RGBLED_RGBTEST_INTERVALS[0]);
 848:quantum/rgblight.c ****       effect_func = (effect_func_t)rgblight_effect_rgbtest;
 849:quantum/rgblight.c ****     }
 850:quantum/rgblight.c **** #endif
 851:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_ALTERNATING
 852:quantum/rgblight.c ****     else if (rgblight_status.base_mode == RGBLIGHT_MODE_ALTERNATING){
 853:quantum/rgblight.c ****       interval_time = 500;
 854:quantum/rgblight.c ****       effect_func = (effect_func_t)rgblight_effect_alternating;
 855:quantum/rgblight.c ****     }
 856:quantum/rgblight.c **** #endif
 857:quantum/rgblight.c ****     if (animation_status.restart) {
 858:quantum/rgblight.c ****       animation_status.restart = false;
 859:quantum/rgblight.c ****       animation_status.last_timer = timer_read() - interval_time - 1;
 860:quantum/rgblight.c ****       animation_status.pos16 = 0; // restart signal to local each effect
 861:quantum/rgblight.c ****     }
 862:quantum/rgblight.c ****     if (timer_elapsed(animation_status.last_timer) >= interval_time) {
 863:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 864:quantum/rgblight.c ****       static uint16_t report_last_timer = 0;
 865:quantum/rgblight.c ****       static bool tick_flag = false;
 866:quantum/rgblight.c ****       uint16_t oldpos16;
 867:quantum/rgblight.c ****       if (tick_flag) {
 868:quantum/rgblight.c ****         tick_flag = false;
 869:quantum/rgblight.c ****         //dprintf("rgblight animation tick\n");
 870:quantum/rgblight.c ****         if (timer_elapsed(report_last_timer) >= 30000) {
 871:quantum/rgblight.c ****             report_last_timer = timer_read();
 872:quantum/rgblight.c ****             dprintf("rgblight animation tick report to slave\n");
 873:quantum/rgblight.c ****             RGBLIGHT_SPLIT_ANIMATION_TICK;
 874:quantum/rgblight.c ****         }
 875:quantum/rgblight.c ****       }
 876:quantum/rgblight.c ****       oldpos16 = animation_status.pos16;
 877:quantum/rgblight.c ****       //dprintf("call effect function\n");
 878:quantum/rgblight.c **** #endif
 879:quantum/rgblight.c ****       animation_status.last_timer += interval_time;
 880:quantum/rgblight.c ****       effect_func(&animation_status);
 881:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 882:quantum/rgblight.c ****       //dprintf("pos16, oldpos16 = %d %d\n",
 883:quantum/rgblight.c ****       //        animation_status.pos16,oldpos16);
 884:quantum/rgblight.c ****       if (animation_status.pos16 == 0 && oldpos16 != 0) {
 885:quantum/rgblight.c ****           //dprintf("flag on\n");
 886:quantum/rgblight.c ****           tick_flag = true;
 887:quantum/rgblight.c ****       }
 888:quantum/rgblight.c **** #endif
 889:quantum/rgblight.c ****     }
 890:quantum/rgblight.c ****   }
 891:quantum/rgblight.c **** }
 892:quantum/rgblight.c **** 
 893:quantum/rgblight.c **** #endif /* RGBLIGHT_USE_TIMER */
 894:quantum/rgblight.c **** 
 895:quantum/rgblight.c **** // Effects
 896:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_BREATHING
 897:quantum/rgblight.c **** 
 898:quantum/rgblight.c **** #ifndef RGBLIGHT_EFFECT_BREATHE_CENTER
 899:quantum/rgblight.c ****   #ifndef RGBLIGHT_BREATHE_TABLE_SIZE
 900:quantum/rgblight.c ****     #define RGBLIGHT_BREATHE_TABLE_SIZE 256 // 256 or 128 or 64
 901:quantum/rgblight.c ****   #endif
 902:quantum/rgblight.c ****   #include <rgblight_breathe_table.h>
 903:quantum/rgblight.c **** #endif
 904:quantum/rgblight.c **** 
 905:quantum/rgblight.c **** __attribute__ ((weak))
 906:quantum/rgblight.c **** const uint8_t RGBLED_BREATHING_INTERVALS[] PROGMEM = {30, 20, 10, 5};
 907:quantum/rgblight.c **** 
 908:quantum/rgblight.c **** void rgblight_effect_breathing(animation_status_t *anim) {
 676               		.loc 1 908 0
 677               		.cfi_startproc
 678               	.LVL36:
 679 0000 CF93      		push r28
 680               	.LCFI10:
 681               		.cfi_def_cfa_offset 3
 682               		.cfi_offset 28, -2
 683 0002 DF93      		push r29
 684               	.LCFI11:
 685               		.cfi_def_cfa_offset 4
 686               		.cfi_offset 29, -3
 687               	/* prologue: function */
 688               	/* frame size = 0 */
 689               	/* stack size = 2 */
 690               	.L__stack_usage = 2
 691 0004 EC01      		movw r28,r24
 692               	.LVL37:
 693               	.LBB30:
 909:quantum/rgblight.c ****   float val;
 910:quantum/rgblight.c **** 
 911:quantum/rgblight.c ****   // http://sean.voisen.org/blog/2011/10/breathing-led-with-arduino/
 912:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_BREATHE_TABLE
 913:quantum/rgblight.c ****   val = pgm_read_byte(&rgblight_effect_breathe_table[anim->pos / table_scale]);
 694               		.loc 1 913 0
 695 0006 EC81      		ldd r30,Y+4
 696 0008 F0E0      		ldi r31,0
 697 000a E050      		subi r30,lo8(-(rgblight_effect_breathe_table))
 698 000c F040      		sbci r31,hi8(-(rgblight_effect_breathe_table))
 699               	/* #APP */
 700               	 ;  913 "quantum/rgblight.c" 1
 701 000e 4491      		lpm r20, Z
 702               		
 703               	 ;  0 "" 2
 704               	.LVL38:
 705               	/* #NOAPP */
 706               	.LBE30:
 914:quantum/rgblight.c **** #else
 915:quantum/rgblight.c ****   val = (exp(sin((anim->pos/255.0)*M_PI)) - RGBLIGHT_EFFECT_BREATHE_CENTER/M_E)*(RGBLIGHT_EFFECT_BR
 916:quantum/rgblight.c **** #endif
 917:quantum/rgblight.c ****   rgblight_sethsv_noeeprom_old(rgblight_config.hue, rgblight_config.sat, val);
 707               		.loc 1 917 0
 708 0010 E0E0      		ldi r30,lo8(rgblight_config)
 709 0012 F0E0      		ldi r31,hi8(rgblight_config)
 710 0014 6281      		ldd r22,Z+2
 711 0016 8181      		ldd r24,Z+1
 712               	.LVL39:
 713 0018 0E94 0000 		call rgblight_sethsv_noeeprom_old
 714               	.LVL40:
 918:quantum/rgblight.c ****   anim->pos = (anim->pos + 1);
 715               		.loc 1 918 0
 716 001c 8C81      		ldd r24,Y+4
 717 001e 8F5F      		subi r24,lo8(-(1))
 718 0020 8C83      		std Y+4,r24
 719               	/* epilogue start */
 919:quantum/rgblight.c **** }
 720               		.loc 1 919 0
 721 0022 DF91      		pop r29
 722 0024 CF91      		pop r28
 723               	.LVL41:
 724 0026 0895      		ret
 725               		.cfi_endproc
 726               	.LFE156:
 728               		.section	.text.rgblight_effect_rainbow_mood,"ax",@progbits
 729               	.global	rgblight_effect_rainbow_mood
 731               	rgblight_effect_rainbow_mood:
 732               	.LFB157:
 920:quantum/rgblight.c **** #endif
 921:quantum/rgblight.c **** 
 922:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 923:quantum/rgblight.c **** __attribute__ ((weak))
 924:quantum/rgblight.c **** const uint8_t RGBLED_RAINBOW_MOOD_INTERVALS[] PROGMEM = {120, 60, 30};
 925:quantum/rgblight.c **** 
 926:quantum/rgblight.c **** void rgblight_effect_rainbow_mood(animation_status_t *anim) {
 733               		.loc 1 926 0
 734               		.cfi_startproc
 735               	.LVL42:
 736 0000 CF93      		push r28
 737               	.LCFI12:
 738               		.cfi_def_cfa_offset 3
 739               		.cfi_offset 28, -2
 740 0002 DF93      		push r29
 741               	.LCFI13:
 742               		.cfi_def_cfa_offset 4
 743               		.cfi_offset 29, -3
 744               	/* prologue: function */
 745               	/* frame size = 0 */
 746               	/* stack size = 2 */
 747               	.L__stack_usage = 2
 748 0004 EC01      		movw r28,r24
 927:quantum/rgblight.c ****   rgblight_sethsv_noeeprom_old(anim->current_hue, rgblight_config.sat, rgblight_config.val);
 749               		.loc 1 927 0
 750 0006 E0E0      		ldi r30,lo8(rgblight_config)
 751 0008 F0E0      		ldi r31,hi8(rgblight_config)
 752 000a 4381      		ldd r20,Z+3
 753 000c 6281      		ldd r22,Z+2
 754 000e 8C81      		ldd r24,Y+4
 755               	.LVL43:
 756 0010 0E94 0000 		call rgblight_sethsv_noeeprom_old
 757               	.LVL44:
 928:quantum/rgblight.c ****   anim->current_hue++;
 758               		.loc 1 928 0
 759 0014 8C81      		ldd r24,Y+4
 760 0016 8F5F      		subi r24,lo8(-(1))
 761 0018 8C83      		std Y+4,r24
 762               	/* epilogue start */
 929:quantum/rgblight.c **** }
 763               		.loc 1 929 0
 764 001a DF91      		pop r29
 765 001c CF91      		pop r28
 766               	.LVL45:
 767 001e 0895      		ret
 768               		.cfi_endproc
 769               	.LFE157:
 771               		.section	.text.rgblight_effect_rgbtest,"ax",@progbits
 772               	.global	rgblight_effect_rgbtest
 774               	rgblight_effect_rgbtest:
 775               	.LFB162:
 930:quantum/rgblight.c **** #endif
 931:quantum/rgblight.c **** 
 932:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 933:quantum/rgblight.c **** #ifndef RGBLIGHT_RAINBOW_SWIRL_RANGE
 934:quantum/rgblight.c ****   #define RGBLIGHT_RAINBOW_SWIRL_RANGE 255
 935:quantum/rgblight.c **** #endif
 936:quantum/rgblight.c **** 
 937:quantum/rgblight.c **** __attribute__ ((weak))
 938:quantum/rgblight.c **** const uint8_t RGBLED_RAINBOW_SWIRL_INTERVALS[] PROGMEM = {100, 50, 20};
 939:quantum/rgblight.c **** 
 940:quantum/rgblight.c **** void rgblight_effect_rainbow_swirl(animation_status_t *anim) {
 941:quantum/rgblight.c ****   uint8_t hue;
 942:quantum/rgblight.c ****   uint8_t i;
 943:quantum/rgblight.c **** 
 944:quantum/rgblight.c ****   for (i = 0; i < effect_num_leds; i++) {
 945:quantum/rgblight.c ****     hue = (RGBLIGHT_RAINBOW_SWIRL_RANGE / effect_num_leds * i + anim->current_hue);
 946:quantum/rgblight.c ****     sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i + effect_start_pos]);
 947:quantum/rgblight.c ****   }
 948:quantum/rgblight.c ****   rgblight_set();
 949:quantum/rgblight.c **** 
 950:quantum/rgblight.c ****   if (anim->delta % 2) {
 951:quantum/rgblight.c ****     anim->current_hue++;
 952:quantum/rgblight.c ****   } else {
 953:quantum/rgblight.c ****     anim->current_hue--;
 954:quantum/rgblight.c ****   }
 955:quantum/rgblight.c **** }
 956:quantum/rgblight.c **** #endif
 957:quantum/rgblight.c **** 
 958:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_SNAKE
 959:quantum/rgblight.c **** __attribute__ ((weak))
 960:quantum/rgblight.c **** const uint8_t RGBLED_SNAKE_INTERVALS[] PROGMEM = {100, 50, 20};
 961:quantum/rgblight.c **** 
 962:quantum/rgblight.c **** void rgblight_effect_snake(animation_status_t *anim) {
 963:quantum/rgblight.c ****   static uint8_t pos = 0;
 964:quantum/rgblight.c ****   uint8_t i, j;
 965:quantum/rgblight.c ****   int8_t k;
 966:quantum/rgblight.c ****   int8_t increment = 1;
 967:quantum/rgblight.c **** 
 968:quantum/rgblight.c ****   if (anim->delta % 2) {
 969:quantum/rgblight.c ****     increment = -1;
 970:quantum/rgblight.c ****   }
 971:quantum/rgblight.c **** 
 972:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 973:quantum/rgblight.c ****   if (anim->pos == 0) { // restart signal
 974:quantum/rgblight.c ****     if (increment == 1) {
 975:quantum/rgblight.c ****       pos = effect_num_leds - 1;
 976:quantum/rgblight.c ****     } else {
 977:quantum/rgblight.c ****       pos = 0;
 978:quantum/rgblight.c ****     }
 979:quantum/rgblight.c ****     anim->pos = 1;
 980:quantum/rgblight.c ****   }
 981:quantum/rgblight.c **** #endif
 982:quantum/rgblight.c **** 
 983:quantum/rgblight.c ****   for (i = 0; i < effect_num_leds; i++) {
 984:quantum/rgblight.c ****     LED_TYPE *ledp = led + i + effect_start_pos;
 985:quantum/rgblight.c ****     ledp->r = 0;
 986:quantum/rgblight.c ****     ledp->g = 0;
 987:quantum/rgblight.c ****     ledp->b = 0;
 988:quantum/rgblight.c ****     for (j = 0; j < RGBLIGHT_EFFECT_SNAKE_LENGTH; j++) {
 989:quantum/rgblight.c ****       k = pos + j * increment;
 990:quantum/rgblight.c ****       if (k < 0) {
 991:quantum/rgblight.c ****         k = k + effect_num_leds;
 992:quantum/rgblight.c ****       }
 993:quantum/rgblight.c ****       if (i == k) {
 994:quantum/rgblight.c ****         sethsv(rgblight_config.hue, rgblight_config.sat,
 995:quantum/rgblight.c ****                (uint8_t)(rgblight_config.val*(RGBLIGHT_EFFECT_SNAKE_LENGTH-j)/RGBLIGHT_EFFECT_SNAKE
 996:quantum/rgblight.c ****                ledp);
 997:quantum/rgblight.c ****       }
 998:quantum/rgblight.c ****     }
 999:quantum/rgblight.c ****   }
1000:quantum/rgblight.c ****   rgblight_set();
1001:quantum/rgblight.c ****   if (increment == 1) {
1002:quantum/rgblight.c ****     if (pos - 1 < 0) {
1003:quantum/rgblight.c ****       pos = effect_num_leds - 1;
1004:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
1005:quantum/rgblight.c ****       anim->pos = 0;
1006:quantum/rgblight.c **** #endif
1007:quantum/rgblight.c ****     } else {
1008:quantum/rgblight.c ****       pos -= 1;
1009:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
1010:quantum/rgblight.c ****       anim->pos = 1;
1011:quantum/rgblight.c **** #endif
1012:quantum/rgblight.c ****     }
1013:quantum/rgblight.c ****   } else {
1014:quantum/rgblight.c ****     pos = (pos + 1) % effect_num_leds;
1015:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
1016:quantum/rgblight.c ****     anim->pos = pos;
1017:quantum/rgblight.c **** #endif
1018:quantum/rgblight.c ****   }
1019:quantum/rgblight.c **** }
1020:quantum/rgblight.c **** #endif
1021:quantum/rgblight.c **** 
1022:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_KNIGHT
1023:quantum/rgblight.c **** __attribute__ ((weak))
1024:quantum/rgblight.c **** const uint8_t RGBLED_KNIGHT_INTERVALS[] PROGMEM = {127, 63, 31};
1025:quantum/rgblight.c **** 
1026:quantum/rgblight.c **** void rgblight_effect_knight(animation_status_t *anim) {
1027:quantum/rgblight.c **** 
1028:quantum/rgblight.c ****   static int8_t low_bound = 0;
1029:quantum/rgblight.c ****   static int8_t high_bound = RGBLIGHT_EFFECT_KNIGHT_LENGTH - 1;
1030:quantum/rgblight.c ****   static int8_t increment = 1;
1031:quantum/rgblight.c ****   uint8_t i, cur;
1032:quantum/rgblight.c **** 
1033:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
1034:quantum/rgblight.c ****   if (anim->pos == 0) { // restart signal
1035:quantum/rgblight.c ****       anim->pos = 1;
1036:quantum/rgblight.c ****       low_bound = 0;
1037:quantum/rgblight.c ****       high_bound = RGBLIGHT_EFFECT_KNIGHT_LENGTH - 1;
1038:quantum/rgblight.c ****       increment = 1;
1039:quantum/rgblight.c ****   }
1040:quantum/rgblight.c **** #endif
1041:quantum/rgblight.c ****   // Set all the LEDs to 0
1042:quantum/rgblight.c ****   for (i = effect_start_pos; i < effect_end_pos; i++) {
1043:quantum/rgblight.c ****     led[i].r = 0;
1044:quantum/rgblight.c ****     led[i].g = 0;
1045:quantum/rgblight.c ****     led[i].b = 0;
1046:quantum/rgblight.c ****   }
1047:quantum/rgblight.c ****   // Determine which LEDs should be lit up
1048:quantum/rgblight.c ****   for (i = 0; i < RGBLIGHT_EFFECT_KNIGHT_LED_NUM; i++) {
1049:quantum/rgblight.c ****     cur = (i + RGBLIGHT_EFFECT_KNIGHT_OFFSET) % effect_num_leds + effect_start_pos;
1050:quantum/rgblight.c **** 
1051:quantum/rgblight.c ****     if (i >= low_bound && i <= high_bound) {
1052:quantum/rgblight.c ****       sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[cur]);
1053:quantum/rgblight.c ****     } else {
1054:quantum/rgblight.c ****       led[cur].r = 0;
1055:quantum/rgblight.c ****       led[cur].g = 0;
1056:quantum/rgblight.c ****       led[cur].b = 0;
1057:quantum/rgblight.c ****     }
1058:quantum/rgblight.c ****   }
1059:quantum/rgblight.c ****   rgblight_set();
1060:quantum/rgblight.c **** 
1061:quantum/rgblight.c ****   // Move from low_bound to high_bound changing the direction we increment each
1062:quantum/rgblight.c ****   // time a boundary is hit.
1063:quantum/rgblight.c ****   low_bound += increment;
1064:quantum/rgblight.c ****   high_bound += increment;
1065:quantum/rgblight.c **** 
1066:quantum/rgblight.c ****   if (high_bound <= 0 || low_bound >= RGBLIGHT_EFFECT_KNIGHT_LED_NUM - 1) {
1067:quantum/rgblight.c ****     increment = -increment;
1068:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
1069:quantum/rgblight.c ****     if (increment == 1) {
1070:quantum/rgblight.c ****         anim->pos = 0;
1071:quantum/rgblight.c ****     }
1072:quantum/rgblight.c **** #endif
1073:quantum/rgblight.c ****   }
1074:quantum/rgblight.c **** }
1075:quantum/rgblight.c **** #endif
1076:quantum/rgblight.c **** 
1077:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_CHRISTMAS
1078:quantum/rgblight.c **** void rgblight_effect_christmas(animation_status_t *anim) {
1079:quantum/rgblight.c ****   uint8_t hue;
1080:quantum/rgblight.c ****   uint8_t i;
1081:quantum/rgblight.c **** 
1082:quantum/rgblight.c ****   anim->current_offset = (anim->current_offset + 1) % 2;
1083:quantum/rgblight.c ****   for (i = 0; i < effect_num_leds; i++) {
1084:quantum/rgblight.c ****     hue = 0 + ((i/RGBLIGHT_EFFECT_CHRISTMAS_STEP + anim->current_offset) % 2) * 85;
1085:quantum/rgblight.c ****     sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i + effect_start_pos]);
1086:quantum/rgblight.c ****   }
1087:quantum/rgblight.c ****   rgblight_set();
1088:quantum/rgblight.c **** }
1089:quantum/rgblight.c **** #endif
1090:quantum/rgblight.c **** 
1091:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RGB_TEST
1092:quantum/rgblight.c **** __attribute__ ((weak))
1093:quantum/rgblight.c **** const uint16_t RGBLED_RGBTEST_INTERVALS[] PROGMEM = {1024};
1094:quantum/rgblight.c **** 
1095:quantum/rgblight.c **** void rgblight_effect_rgbtest(animation_status_t *anim) {
 776               		.loc 1 1095 0
 777               		.cfi_startproc
 778               	.LVL46:
 779 0000 0F93      		push r16
 780               	.LCFI14:
 781               		.cfi_def_cfa_offset 3
 782               		.cfi_offset 16, -2
 783 0002 1F93      		push r17
 784               	.LCFI15:
 785               		.cfi_def_cfa_offset 4
 786               		.cfi_offset 17, -3
 787 0004 CF93      		push r28
 788               	.LCFI16:
 789               		.cfi_def_cfa_offset 5
 790               		.cfi_offset 28, -4
 791 0006 DF93      		push r29
 792               	.LCFI17:
 793               		.cfi_def_cfa_offset 6
 794               		.cfi_offset 29, -5
 795 0008 00D0      		rcall .
 796 000a 1F92      		push __zero_reg__
 797               	.LCFI18:
 798               		.cfi_def_cfa_offset 9
 799 000c CDB7      		in r28,__SP_L__
 800 000e DEB7      		in r29,__SP_H__
 801               	.LCFI19:
 802               		.cfi_def_cfa_register 28
 803               	/* prologue: function */
 804               	/* frame size = 3 */
 805               	/* stack size = 7 */
 806               	.L__stack_usage = 7
 807 0010 8C01      		movw r16,r24
1096:quantum/rgblight.c ****   static uint8_t maxval = 0;
1097:quantum/rgblight.c ****   uint8_t g; uint8_t r; uint8_t b;
1098:quantum/rgblight.c **** 
1099:quantum/rgblight.c ****   if( maxval == 0 ) {
 808               		.loc 1 1099 0
 809 0012 8091 0000 		lds r24,maxval.3282
 810               	.LVL47:
 811 0016 8111      		cpse r24,__zero_reg__
 812 0018 00C0      		rjmp .L49
 813               	.LVL48:
 814               	.LBB34:
 815               	.LBB35:
 816               	.LBB36:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 817               		.loc 1 128 0
 818 001a 9E01      		movw r18,r28
 819 001c 2F5F      		subi r18,-1
 820 001e 3F4F      		sbci r19,-1
 821 0020 4FEF      		ldi r20,lo8(-1)
 822 0022 6FEF      		ldi r22,lo8(-1)
 823 0024 0E94 0000 		call sethsv_raw
 824               	.LVL49:
 825               	.LBE36:
 826               	.LBE35:
1100:quantum/rgblight.c ****       LED_TYPE tmp_led;
1101:quantum/rgblight.c ****       sethsv(0, 255, RGBLIGHT_LIMIT_VAL, &tmp_led);
1102:quantum/rgblight.c ****       maxval = tmp_led.r;
 827               		.loc 1 1102 0
 828 0028 8A81      		ldd r24,Y+2
 829 002a 8093 0000 		sts maxval.3282,r24
 830               	.L49:
 831               	.LVL50:
 832               	.LBE34:
1103:quantum/rgblight.c ****   }
1104:quantum/rgblight.c ****   g = r = b = 0;
1105:quantum/rgblight.c ****   switch( anim->pos ) {
 833               		.loc 1 1105 0
 834 002e F801      		movw r30,r16
 835 0030 8481      		ldd r24,Z+4
 836 0032 8130      		cpi r24,lo8(1)
 837 0034 01F0      		breq .L51
 838 0036 00F0      		brlo .L52
 839 0038 8230      		cpi r24,lo8(2)
 840 003a 01F4      		brne .L58
1106:quantum/rgblight.c ****     case 0: r = maxval; break;
1107:quantum/rgblight.c ****     case 1: g = maxval; break;
1108:quantum/rgblight.c ****     case 2: b = maxval; break;
 841               		.loc 1 1108 0
 842 003c 4091 0000 		lds r20,maxval.3282
 843               	.LVL51:
 844 0040 00C0      		rjmp .L57
 845               	.LVL52:
 846               	.L52:
1106:quantum/rgblight.c ****     case 0: r = maxval; break;
 847               		.loc 1 1106 0
 848 0042 8091 0000 		lds r24,maxval.3282
 849               	.LVL53:
1104:quantum/rgblight.c ****   switch( anim->pos ) {
 850               		.loc 1 1104 0
 851 0046 40E0      		ldi r20,0
 852 0048 00C0      		rjmp .L56
 853               	.LVL54:
 854               	.L51:
1107:quantum/rgblight.c ****     case 2: b = maxval; break;
 855               		.loc 1 1107 0
 856 004a 6091 0000 		lds r22,maxval.3282
 857               	.LVL55:
1104:quantum/rgblight.c ****   switch( anim->pos ) {
 858               		.loc 1 1104 0
 859 004e 40E0      		ldi r20,0
 860 0050 80E0      		ldi r24,0
1107:quantum/rgblight.c ****     case 2: b = maxval; break;
 861               		.loc 1 1107 0
 862 0052 00C0      		rjmp .L50
 863               	.LVL56:
 864               	.L58:
1104:quantum/rgblight.c ****   switch( anim->pos ) {
 865               		.loc 1 1104 0
 866 0054 40E0      		ldi r20,0
 867               	.LVL57:
 868               	.L57:
 869 0056 80E0      		ldi r24,0
 870               	.LVL58:
 871               	.L56:
 872 0058 60E0      		ldi r22,0
 873               	.LVL59:
 874               	.L50:
1109:quantum/rgblight.c ****   }
1110:quantum/rgblight.c ****   rgblight_setrgb(r, g, b);
 875               		.loc 1 1110 0
 876 005a 0E94 0000 		call rgblight_setrgb
 877               	.LVL60:
1111:quantum/rgblight.c ****   anim->pos = (anim->pos + 1) % 3;
 878               		.loc 1 1111 0
 879 005e F801      		movw r30,r16
 880 0060 8481      		ldd r24,Z+4
 881 0062 90E0      		ldi r25,0
 882 0064 0196      		adiw r24,1
 883 0066 63E0      		ldi r22,lo8(3)
 884 0068 70E0      		ldi r23,0
 885 006a 0E94 0000 		call __divmodhi4
 886 006e 8483      		std Z+4,r24
 887               	/* epilogue start */
1112:quantum/rgblight.c **** }
 888               		.loc 1 1112 0
 889 0070 0F90      		pop __tmp_reg__
 890 0072 0F90      		pop __tmp_reg__
 891 0074 0F90      		pop __tmp_reg__
 892 0076 DF91      		pop r29
 893 0078 CF91      		pop r28
 894 007a 1F91      		pop r17
 895 007c 0F91      		pop r16
 896               	.LVL61:
 897 007e 0895      		ret
 898               		.cfi_endproc
 899               	.LFE162:
 901               		.section	.text.rgblight_sethsv_eeprom_helper,"ax",@progbits
 902               	.global	rgblight_sethsv_eeprom_helper
 904               	rgblight_sethsv_eeprom_helper:
 905               	.LFB132:
 479:quantum/rgblight.c ****   if (rgblight_config.enable) {
 906               		.loc 1 479 0
 907               		.cfi_startproc
 908               	.LVL62:
 909 0000 AF92      		push r10
 910               	.LCFI20:
 911               		.cfi_def_cfa_offset 3
 912               		.cfi_offset 10, -2
 913 0002 BF92      		push r11
 914               	.LCFI21:
 915               		.cfi_def_cfa_offset 4
 916               		.cfi_offset 11, -3
 917 0004 CF92      		push r12
 918               	.LCFI22:
 919               		.cfi_def_cfa_offset 5
 920               		.cfi_offset 12, -4
 921 0006 DF92      		push r13
 922               	.LCFI23:
 923               		.cfi_def_cfa_offset 6
 924               		.cfi_offset 13, -5
 925 0008 EF92      		push r14
 926               	.LCFI24:
 927               		.cfi_def_cfa_offset 7
 928               		.cfi_offset 14, -6
 929 000a FF92      		push r15
 930               	.LCFI25:
 931               		.cfi_def_cfa_offset 8
 932               		.cfi_offset 15, -7
 933 000c 0F93      		push r16
 934               	.LCFI26:
 935               		.cfi_def_cfa_offset 9
 936               		.cfi_offset 16, -8
 937 000e 1F93      		push r17
 938               	.LCFI27:
 939               		.cfi_def_cfa_offset 10
 940               		.cfi_offset 17, -9
 941 0010 CF93      		push r28
 942               	.LCFI28:
 943               		.cfi_def_cfa_offset 11
 944               		.cfi_offset 28, -10
 945 0012 DF93      		push r29
 946               	.LCFI29:
 947               		.cfi_def_cfa_offset 12
 948               		.cfi_offset 29, -11
 949 0014 00D0      		rcall .
 950 0016 1F92      		push __zero_reg__
 951               	.LCFI30:
 952               		.cfi_def_cfa_offset 15
 953 0018 CDB7      		in r28,__SP_L__
 954 001a DEB7      		in r29,__SP_H__
 955               	.LCFI31:
 956               		.cfi_def_cfa_register 28
 957               	/* prologue: function */
 958               	/* frame size = 3 */
 959               	/* stack size = 13 */
 960               	.L__stack_usage = 13
 961 001c 182F      		mov r17,r24
 962 001e F62E      		mov r15,r22
 963 0020 042F      		mov r16,r20
 964 0022 E22E      		mov r14,r18
 480:quantum/rgblight.c ****     rgblight_status.base_mode = mode_base_table[rgblight_config.mode];
 965               		.loc 1 480 0
 966 0024 9091 0000 		lds r25,rgblight_config
 967 0028 90FF      		sbrs r25,0
 968 002a 00C0      		rjmp .L59
 481:quantum/rgblight.c ****     if (rgblight_config.mode == RGBLIGHT_MODE_STATIC_LIGHT) {
 969               		.loc 1 481 0
 970 002c E92F      		mov r30,r25
 971 002e E695      		lsr r30
 972 0030 AE2F      		mov r26,r30
 973 0032 B0E0      		ldi r27,0
 974 0034 A050      		subi r26,lo8(-(mode_base_table))
 975 0036 B040      		sbci r27,hi8(-(mode_base_table))
 976 0038 8C91      		ld r24,X
 977               	.LVL63:
 978 003a 8093 0000 		sts rgblight_status,r24
 482:quantum/rgblight.c ****       // same static color
 979               		.loc 1 482 0
 980 003e 9E7F      		andi r25,lo8(-2)
 981 0040 9230      		cpi r25,lo8(2)
 982 0042 01F4      		brne .L62
 983               	.LVL64:
 984               	.LBB46:
 985               	.LBB47:
 986               	.LBB48:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 987               		.loc 1 128 0
 988 0044 9E01      		movw r18,r28
 989               	.LVL65:
 990 0046 2F5F      		subi r18,-1
 991 0048 3F4F      		sbci r19,-1
 992 004a 812F      		mov r24,r17
 993 004c 0E94 0000 		call sethsv_raw
 994               	.LVL66:
 995               	.LBE48:
 996               	.LBE47:
 486:quantum/rgblight.c ****     } else {
 997               		.loc 1 486 0
 998 0050 4B81      		ldd r20,Y+3
 999 0052 6981      		ldd r22,Y+1
 1000 0054 8A81      		ldd r24,Y+2
 1001 0056 0E94 0000 		call rgblight_setrgb
 1002               	.LVL67:
 1003               	.LBE46:
 1004 005a 00C0      		rjmp .L63
 1005               	.L62:
 492:quantum/rgblight.c ****         // breathing mode, ignore the change of val, use in memory value instead
 1006               		.loc 1 492 0
 1007 005c 8230      		cpi r24,lo8(2)
 1008 005e 01F4      		brne .L64
 494:quantum/rgblight.c ****       }
 1009               		.loc 1 494 0
 1010 0060 0091 0000 		lds r16,rgblight_config+3
 1011               	.LVL68:
 1012 0064 00C0      		rjmp .L63
 1013               	.L64:
 498:quantum/rgblight.c ****         // rainbow mood, ignore the change of hue
 1014               		.loc 1 498 0
 1015 0066 8630      		cpi r24,lo8(6)
 1016 0068 01F4      		brne .L65
 1017               	.L66:
 500:quantum/rgblight.c ****       }
 1018               		.loc 1 500 0
 1019 006a 1091 0000 		lds r17,rgblight_config+1
 1020               	.LVL69:
 1021 006e 00C0      		rjmp .L63
 1022               	.L65:
 504:quantum/rgblight.c ****         // rainbow swirl, ignore the change of hue
 1023               		.loc 1 504 0
 1024 0070 8930      		cpi r24,lo8(9)
 1025 0072 01F0      		breq .L66
 510:quantum/rgblight.c ****         // static gradient
 1026               		.loc 1 510 0
 1027 0074 8931      		cpi r24,lo8(25)
 1028 0076 01F4      		brne .L63
 1029               	.LBB49:
 512:quantum/rgblight.c ****         bool direction = (delta % 2) == 0;
 1030               		.loc 1 512 0
 1031 0078 E951      		subi r30,lo8(-(-25))
 1032               	.LVL70:
 513:quantum/rgblight.c **** #ifdef __AVR__
 1033               		.loc 1 513 0
 1034 007a 8E2F      		mov r24,r30
 1035 007c 8170      		andi r24,lo8(1)
 1036 007e D82E      		mov r13,r24
 1037               	.LVL71:
 1038               	.LBB50:
 516:quantum/rgblight.c **** #else
 1039               		.loc 1 516 0
 1040 0080 E695      		lsr r30
 1041               	.LVL72:
 1042 0082 F0E0      		ldi r31,0
 1043 0084 E050      		subi r30,lo8(-(RGBLED_GRADIENT_RANGES))
 1044 0086 F040      		sbci r31,hi8(-(RGBLED_GRADIENT_RANGES))
 1045               	.LVL73:
 1046               	/* #APP */
 1047               	 ;  516 "quantum/rgblight.c" 1
 1048 0088 A590      		lpm r10, Z+
 1049 008a B490      		lpm r11, Z
 1050               		
 1051               	 ;  0 "" 2
 1052               	.LVL74:
 1053               	/* #NOAPP */
 1054               	.LBE50:
 1055               	.LBB51:
 520:quantum/rgblight.c ****           uint8_t _hue = ((uint16_t)i * (uint16_t)range) / effect_num_leds;
 1056               		.loc 1 520 0
 1057 008c C12C      		mov r12,__zero_reg__
 1058               	.LBB52:
 521:quantum/rgblight.c ****           if (direction) {
 1059               		.loc 1 521 0
 1060 008e BB24      		clr r11
 1061               	.LVL75:
 1062               	.L67:
 1063               	.LBE52:
 520:quantum/rgblight.c ****           uint8_t _hue = ((uint16_t)i * (uint16_t)range) / effect_num_leds;
 1064               		.loc 1 520 0 discriminator 1
 1065 0090 6091 0000 		lds r22,effect_num_leds
 1066 0094 C616      		cp r12,r22
 1067 0096 00F4      		brsh .L78
 1068               	.LBB55:
 521:quantum/rgblight.c ****           if (direction) {
 1069               		.loc 1 521 0
 1070 0098 2C2D      		mov r18,r12
 1071 009a 30E0      		ldi r19,0
 1072 009c A29E      		mul r10,r18
 1073 009e C001      		movw r24,r0
 1074 00a0 A39E      		mul r10,r19
 1075 00a2 900D      		add r25,r0
 1076 00a4 B29E      		mul r11,r18
 1077 00a6 900D      		add r25,r0
 1078 00a8 1124      		clr r1
 1079 00aa 70E0      		ldi r23,0
 1080 00ac 0E94 0000 		call __udivmodhi4
 1081               	.LVL76:
 523:quantum/rgblight.c ****           } else {
 1082               		.loc 1 523 0
 1083 00b0 812F      		mov r24,r17
 522:quantum/rgblight.c ****             _hue = hue + _hue;
 1084               		.loc 1 522 0
 1085 00b2 D110      		cpse r13,__zero_reg__
 1086 00b4 00C0      		rjmp .L68
 523:quantum/rgblight.c ****           } else {
 1087               		.loc 1 523 0
 1088 00b6 860F      		add r24,r22
 1089               	.LVL77:
 1090 00b8 00C0      		rjmp .L69
 1091               	.LVL78:
 1092               	.L68:
 525:quantum/rgblight.c ****           }
 1093               		.loc 1 525 0
 1094 00ba 861B      		sub r24,r22
 1095               	.LVL79:
 1096               	.L69:
 528:quantum/rgblight.c ****         }
 1097               		.loc 1 528 0 discriminator 2
 1098 00bc 9091 0000 		lds r25,effect_start_pos
 1099 00c0 290F      		add r18,r25
 1100 00c2 311D      		adc r19,__zero_reg__
 1101 00c4 A901      		movw r20,r18
 1102 00c6 440F      		lsl r20
 1103 00c8 551F      		rol r21
 1104 00ca 240F      		add r18,r20
 1105 00cc 351F      		adc r19,r21
 1106 00ce 2050      		subi r18,lo8(-(led))
 1107 00d0 3040      		sbci r19,hi8(-(led))
 1108               	.LBB53:
 1109               	.LBB54:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 1110               		.loc 1 128 0 discriminator 2
 1111 00d2 402F      		mov r20,r16
 1112 00d4 6F2D      		mov r22,r15
 1113 00d6 0E94 0000 		call sethsv_raw
 1114               	.LVL80:
 1115               	.LBE54:
 1116               	.LBE53:
 1117               	.LBE55:
 520:quantum/rgblight.c ****           uint8_t _hue = ((uint16_t)i * (uint16_t)range) / effect_num_leds;
 1118               		.loc 1 520 0 discriminator 2
 1119 00da C394      		inc r12
 1120               	.LVL81:
 1121 00dc 00C0      		rjmp .L67
 1122               	.L78:
 1123               	.LBE51:
 530:quantum/rgblight.c ****       }
 1124               		.loc 1 530 0
 1125 00de 0E94 0000 		call rgblight_set
 1126               	.LVL82:
 1127               	.L63:
 1128               	.LBE49:
 541:quantum/rgblight.c ****     rgblight_config.sat = sat;
 1129               		.loc 1 541 0
 1130 00e2 1093 0000 		sts rgblight_config+1,r17
 542:quantum/rgblight.c ****     rgblight_config.val = val;
 1131               		.loc 1 542 0
 1132 00e6 F092 0000 		sts rgblight_config+2,r15
 543:quantum/rgblight.c ****     if (write_to_eeprom) {
 1133               		.loc 1 543 0
 1134 00ea 0093 0000 		sts rgblight_config+3,r16
 544:quantum/rgblight.c ****       eeconfig_update_rgblight(rgblight_config.raw);
 1135               		.loc 1 544 0
 1136 00ee EE20      		tst r14
 1137 00f0 01F0      		breq .L59
 545:quantum/rgblight.c ****       xprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rg
 1138               		.loc 1 545 0
 1139 00f2 6091 0000 		lds r22,rgblight_config
 1140 00f6 7091 0000 		lds r23,rgblight_config+1
 1141 00fa 8091 0000 		lds r24,rgblight_config+2
 1142 00fe 9091 0000 		lds r25,rgblight_config+3
 1143 0102 0E94 0000 		call eeconfig_update_rgblight
 1144               	.LVL83:
 1145               	.L59:
 1146               	/* epilogue start */
 551:quantum/rgblight.c **** 
 1147               		.loc 1 551 0
 1148 0106 0F90      		pop __tmp_reg__
 1149 0108 0F90      		pop __tmp_reg__
 1150 010a 0F90      		pop __tmp_reg__
 1151 010c DF91      		pop r29
 1152 010e CF91      		pop r28
 1153 0110 1F91      		pop r17
 1154               	.LVL84:
 1155 0112 0F91      		pop r16
 1156               	.LVL85:
 1157 0114 FF90      		pop r15
 1158               	.LVL86:
 1159 0116 EF90      		pop r14
 1160               	.LVL87:
 1161 0118 DF90      		pop r13
 1162 011a CF90      		pop r12
 1163 011c BF90      		pop r11
 1164 011e AF90      		pop r10
 1165 0120 0895      		ret
 1166               		.cfi_endproc
 1167               	.LFE132:
 1169               		.section	.text.rgblight_increase_hue_helper,"ax",@progbits
 1170               	.global	rgblight_increase_hue_helper
 1172               	rgblight_increase_hue_helper:
 1173               	.LFB111:
 396:quantum/rgblight.c ****   uint8_t hue = rgblight_config.hue + RGBLIGHT_HUE_STEP;
 1174               		.loc 1 396 0
 1175               		.cfi_startproc
 1176               	.LVL88:
 1177               	/* prologue: function */
 1178               	/* frame size = 0 */
 1179               	/* stack size = 0 */
 1180               	.L__stack_usage = 0
 398:quantum/rgblight.c **** }
 1181               		.loc 1 398 0
 1182 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1183 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1184 0004 9181      		ldd r25,Z+1
 1185 0006 282F      		mov r18,r24
 1186 0008 4381      		ldd r20,Z+3
 1187 000a 6281      		ldd r22,Z+2
 1188 000c 88E0      		ldi r24,lo8(8)
 1189               	.LVL89:
 1190 000e 890F      		add r24,r25
 1191               	.LVL90:
 1192 0010 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1193               	.LVL91:
 1194               		.cfi_endproc
 1195               	.LFE111:
 1197               		.section	.text.rgblight_increase_hue_noeeprom,"ax",@progbits
 1198               	.global	rgblight_increase_hue_noeeprom
 1200               	rgblight_increase_hue_noeeprom:
 1201               	.LFB112:
 400:quantum/rgblight.c ****   rgblight_increase_hue_helper(false);
 1202               		.loc 1 400 0
 1203               		.cfi_startproc
 1204               	/* prologue: function */
 1205               	/* frame size = 0 */
 1206               	/* stack size = 0 */
 1207               	.L__stack_usage = 0
 401:quantum/rgblight.c **** }
 1208               		.loc 1 401 0
 1209 0000 80E0      		ldi r24,0
 1210 0002 0C94 0000 		jmp rgblight_increase_hue_helper
 1211               	.LVL92:
 1212               		.cfi_endproc
 1213               	.LFE112:
 1215               		.section	.text.rgblight_increase_hue,"ax",@progbits
 1216               	.global	rgblight_increase_hue
 1218               	rgblight_increase_hue:
 1219               	.LFB113:
 403:quantum/rgblight.c ****   rgblight_increase_hue_helper(true);
 1220               		.loc 1 403 0
 1221               		.cfi_startproc
 1222               	/* prologue: function */
 1223               	/* frame size = 0 */
 1224               	/* stack size = 0 */
 1225               	.L__stack_usage = 0
 404:quantum/rgblight.c **** }
 1226               		.loc 1 404 0
 1227 0000 81E0      		ldi r24,lo8(1)
 1228 0002 0C94 0000 		jmp rgblight_increase_hue_helper
 1229               	.LVL93:
 1230               		.cfi_endproc
 1231               	.LFE113:
 1233               		.section	.text.rgblight_decrease_hue_helper,"ax",@progbits
 1234               	.global	rgblight_decrease_hue_helper
 1236               	rgblight_decrease_hue_helper:
 1237               	.LFB114:
 406:quantum/rgblight.c ****   uint8_t hue = rgblight_config.hue - RGBLIGHT_HUE_STEP;
 1238               		.loc 1 406 0
 1239               		.cfi_startproc
 1240               	.LVL94:
 1241               	/* prologue: function */
 1242               	/* frame size = 0 */
 1243               	/* stack size = 0 */
 1244               	.L__stack_usage = 0
 408:quantum/rgblight.c **** }
 1245               		.loc 1 408 0
 1246 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1247 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1248 0004 9181      		ldd r25,Z+1
 1249 0006 282F      		mov r18,r24
 1250 0008 4381      		ldd r20,Z+3
 1251 000a 6281      		ldd r22,Z+2
 1252 000c 88EF      		ldi r24,lo8(-8)
 1253               	.LVL95:
 1254 000e 890F      		add r24,r25
 1255               	.LVL96:
 1256 0010 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1257               	.LVL97:
 1258               		.cfi_endproc
 1259               	.LFE114:
 1261               		.section	.text.rgblight_decrease_hue_noeeprom,"ax",@progbits
 1262               	.global	rgblight_decrease_hue_noeeprom
 1264               	rgblight_decrease_hue_noeeprom:
 1265               	.LFB115:
 410:quantum/rgblight.c ****   rgblight_decrease_hue_helper(false);
 1266               		.loc 1 410 0
 1267               		.cfi_startproc
 1268               	/* prologue: function */
 1269               	/* frame size = 0 */
 1270               	/* stack size = 0 */
 1271               	.L__stack_usage = 0
 411:quantum/rgblight.c **** }
 1272               		.loc 1 411 0
 1273 0000 80E0      		ldi r24,0
 1274 0002 0C94 0000 		jmp rgblight_decrease_hue_helper
 1275               	.LVL98:
 1276               		.cfi_endproc
 1277               	.LFE115:
 1279               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 1280               	.global	rgblight_decrease_hue
 1282               	rgblight_decrease_hue:
 1283               	.LFB116:
 413:quantum/rgblight.c ****   rgblight_decrease_hue_helper(true);
 1284               		.loc 1 413 0
 1285               		.cfi_startproc
 1286               	/* prologue: function */
 1287               	/* frame size = 0 */
 1288               	/* stack size = 0 */
 1289               	.L__stack_usage = 0
 414:quantum/rgblight.c **** }
 1290               		.loc 1 414 0
 1291 0000 81E0      		ldi r24,lo8(1)
 1292 0002 0C94 0000 		jmp rgblight_decrease_hue_helper
 1293               	.LVL99:
 1294               		.cfi_endproc
 1295               	.LFE116:
 1297               		.section	.text.rgblight_increase_sat_helper,"ax",@progbits
 1298               	.global	rgblight_increase_sat_helper
 1300               	rgblight_increase_sat_helper:
 1301               	.LFB117:
 416:quantum/rgblight.c ****   uint8_t sat = qadd8(rgblight_config.sat, RGBLIGHT_SAT_STEP);
 1302               		.loc 1 416 0
 1303               		.cfi_startproc
 1304               	.LVL100:
 1305               	/* prologue: function */
 1306               	/* frame size = 0 */
 1307               	/* stack size = 0 */
 1308               	.L__stack_usage = 0
 417:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(rgblight_config.hue, sat, rgblight_config.val, write_to_eeprom);
 1309               		.loc 1 417 0
 1310 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1311 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1312               	.LBB56:
 1313               	.LBB57:
 1314               		.file 2 "./lib/lib8tion/math8.h"
   1:./lib/lib8tion/math8.h **** #ifndef __INC_LIB8TION_MATH_H
   2:./lib/lib8tion/math8.h **** #define __INC_LIB8TION_MATH_H
   3:./lib/lib8tion/math8.h **** 
   4:./lib/lib8tion/math8.h **** #include "scale8.h"
   5:./lib/lib8tion/math8.h **** 
   6:./lib/lib8tion/math8.h **** ///@ingroup lib8tion
   7:./lib/lib8tion/math8.h **** 
   8:./lib/lib8tion/math8.h **** ///@defgroup Math Basic math operations
   9:./lib/lib8tion/math8.h **** /// Fast, efficient 8-bit math functions specifically
  10:./lib/lib8tion/math8.h **** /// designed for high-performance LED programming.
  11:./lib/lib8tion/math8.h **** ///
  12:./lib/lib8tion/math8.h **** /// Because of the AVR(Arduino) and ARM assembly language
  13:./lib/lib8tion/math8.h **** /// implementations provided, using these functions often
  14:./lib/lib8tion/math8.h **** /// results in smaller and faster code than the equivalent
  15:./lib/lib8tion/math8.h **** /// program using plain "C" arithmetic and logic.
  16:./lib/lib8tion/math8.h **** ///@{
  17:./lib/lib8tion/math8.h **** 
  18:./lib/lib8tion/math8.h **** 
  19:./lib/lib8tion/math8.h **** /// add one byte to another, saturating at 0xFF
  20:./lib/lib8tion/math8.h **** /// @param i - first byte to add
  21:./lib/lib8tion/math8.h **** /// @param j - second byte to add
  22:./lib/lib8tion/math8.h **** /// @returns the sum of i & j, capped at 0xFF
  23:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
  24:./lib/lib8tion/math8.h **** {
  25:./lib/lib8tion/math8.h **** #if QADD8_C == 1
  26:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
  27:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
  28:./lib/lib8tion/math8.h ****     return t;
  29:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
  30:./lib/lib8tion/math8.h ****     asm volatile(
 1315               		.loc 2 30 0
 1316 0004 6281      		ldd r22,Z+2
 1317 0006 28E0      		ldi r18,lo8(8)
 1318               	/* #APP */
 1319               	 ;  30 "./lib/lib8tion/math8.h" 1
 1320 0008 620F      		add r22, r18    
 1321 000a 00F4      		brcc L_1112     
 1322 000c 6FEF      		ldi r22, 0xFF  
 1323               		L_1112: 
 1324               	 ;  0 "" 2
 1325               	.LVL101:
 1326               	/* #NOAPP */
 1327               	.LBE57:
 1328               	.LBE56:
 418:quantum/rgblight.c **** }
 1329               		.loc 1 418 0
 1330 000e 282F      		mov r18,r24
 1331 0010 4381      		ldd r20,Z+3
 1332 0012 8181      		ldd r24,Z+1
 1333               	.LVL102:
 1334 0014 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1335               	.LVL103:
 1336               		.cfi_endproc
 1337               	.LFE117:
 1339               		.section	.text.rgblight_increase_sat_noeeprom,"ax",@progbits
 1340               	.global	rgblight_increase_sat_noeeprom
 1342               	rgblight_increase_sat_noeeprom:
 1343               	.LFB118:
 420:quantum/rgblight.c ****   rgblight_increase_sat_helper(false);
 1344               		.loc 1 420 0
 1345               		.cfi_startproc
 1346               	/* prologue: function */
 1347               	/* frame size = 0 */
 1348               	/* stack size = 0 */
 1349               	.L__stack_usage = 0
 421:quantum/rgblight.c **** }
 1350               		.loc 1 421 0
 1351 0000 80E0      		ldi r24,0
 1352 0002 0C94 0000 		jmp rgblight_increase_sat_helper
 1353               	.LVL104:
 1354               		.cfi_endproc
 1355               	.LFE118:
 1357               		.section	.text.rgblight_increase_sat,"ax",@progbits
 1358               	.global	rgblight_increase_sat
 1360               	rgblight_increase_sat:
 1361               	.LFB119:
 423:quantum/rgblight.c ****   rgblight_increase_sat_helper(true);
 1362               		.loc 1 423 0
 1363               		.cfi_startproc
 1364               	/* prologue: function */
 1365               	/* frame size = 0 */
 1366               	/* stack size = 0 */
 1367               	.L__stack_usage = 0
 424:quantum/rgblight.c **** }
 1368               		.loc 1 424 0
 1369 0000 81E0      		ldi r24,lo8(1)
 1370 0002 0C94 0000 		jmp rgblight_increase_sat_helper
 1371               	.LVL105:
 1372               		.cfi_endproc
 1373               	.LFE119:
 1375               		.section	.text.rgblight_decrease_sat_helper,"ax",@progbits
 1376               	.global	rgblight_decrease_sat_helper
 1378               	rgblight_decrease_sat_helper:
 1379               	.LFB120:
 426:quantum/rgblight.c ****   uint8_t sat = qsub8(rgblight_config.sat, RGBLIGHT_SAT_STEP);
 1380               		.loc 1 426 0
 1381               		.cfi_startproc
 1382               	.LVL106:
 1383               	/* prologue: function */
 1384               	/* frame size = 0 */
 1385               	/* stack size = 0 */
 1386               	.L__stack_usage = 0
 427:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(rgblight_config.hue, sat, rgblight_config.val, write_to_eeprom);
 1387               		.loc 1 427 0
 1388 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1389 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1390               	.LBB58:
 1391               	.LBB59:
  31:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
  32:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
  33:./lib/lib8tion/math8.h **** 
  34:./lib/lib8tion/math8.h ****          /* Now test the C flag.
  35:./lib/lib8tion/math8.h ****            If C is clear, we branch around a load of 0xFF into i.
  36:./lib/lib8tion/math8.h ****            If C is set, we go ahead and load 0xFF into i.
  37:./lib/lib8tion/math8.h ****          */
  38:./lib/lib8tion/math8.h ****          "brcc L_%=     \n\t"
  39:./lib/lib8tion/math8.h ****          "ldi %0, 0xFF  \n\t"
  40:./lib/lib8tion/math8.h ****          "L_%=: "
  41:./lib/lib8tion/math8.h ****          : "+a" (i)
  42:./lib/lib8tion/math8.h ****          : "a"  (j) );
  43:./lib/lib8tion/math8.h ****     return i;
  44:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
  45:./lib/lib8tion/math8.h ****     asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
  46:./lib/lib8tion/math8.h ****     return i;
  47:./lib/lib8tion/math8.h **** #else
  48:./lib/lib8tion/math8.h **** #error "No implementation for qadd8 available."
  49:./lib/lib8tion/math8.h **** #endif
  50:./lib/lib8tion/math8.h **** }
  51:./lib/lib8tion/math8.h **** 
  52:./lib/lib8tion/math8.h **** /// Add one byte to another, saturating at 0x7F
  53:./lib/lib8tion/math8.h **** /// @param i - first byte to add
  54:./lib/lib8tion/math8.h **** /// @param j - second byte to add
  55:./lib/lib8tion/math8.h **** /// @returns the sum of i & j, capped at 0xFF
  56:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t qadd7( int8_t i, int8_t j)
  57:./lib/lib8tion/math8.h **** {
  58:./lib/lib8tion/math8.h **** #if QADD7_C == 1
  59:./lib/lib8tion/math8.h ****     int16_t t = i + j;
  60:./lib/lib8tion/math8.h ****     if (t > 127) t = 127;
  61:./lib/lib8tion/math8.h ****     return t;
  62:./lib/lib8tion/math8.h **** #elif QADD7_AVRASM == 1
  63:./lib/lib8tion/math8.h ****     asm volatile(
  64:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the V flag */
  65:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
  66:./lib/lib8tion/math8.h **** 
  67:./lib/lib8tion/math8.h ****          /* Now test the V flag.
  68:./lib/lib8tion/math8.h ****           If V is clear, we branch around a load of 0x7F into i.
  69:./lib/lib8tion/math8.h ****           If V is set, we go ahead and load 0x7F into i.
  70:./lib/lib8tion/math8.h ****           */
  71:./lib/lib8tion/math8.h ****          "brvc L_%=     \n\t"
  72:./lib/lib8tion/math8.h ****          "ldi %0, 0x7F  \n\t"
  73:./lib/lib8tion/math8.h ****          "L_%=: "
  74:./lib/lib8tion/math8.h ****          : "+a" (i)
  75:./lib/lib8tion/math8.h ****          : "a"  (j) );
  76:./lib/lib8tion/math8.h **** 
  77:./lib/lib8tion/math8.h ****     return i;
  78:./lib/lib8tion/math8.h **** #elif QADD7_ARM_DSP_ASM == 1
  79:./lib/lib8tion/math8.h ****     asm volatile( "qadd8 %0, %0, %1" : "+r" (i) : "r" (j));
  80:./lib/lib8tion/math8.h ****     return i;
  81:./lib/lib8tion/math8.h **** #else
  82:./lib/lib8tion/math8.h **** #error "No implementation for qadd7 available."
  83:./lib/lib8tion/math8.h **** #endif
  84:./lib/lib8tion/math8.h **** }
  85:./lib/lib8tion/math8.h **** 
  86:./lib/lib8tion/math8.h **** /// subtract one byte from another, saturating at 0x00
  87:./lib/lib8tion/math8.h **** /// @returns i - j with a floor of 0
  88:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
  89:./lib/lib8tion/math8.h **** {
  90:./lib/lib8tion/math8.h **** #if QSUB8_C == 1
  91:./lib/lib8tion/math8.h ****     int16_t t = i - j;
  92:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
  93:./lib/lib8tion/math8.h ****     return t;
  94:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
  95:./lib/lib8tion/math8.h **** 
  96:./lib/lib8tion/math8.h ****     asm volatile(
 1392               		.loc 2 96 0
 1393 0004 6281      		ldd r22,Z+2
 1394 0006 28E0      		ldi r18,lo8(8)
 1395               	/* #APP */
 1396               	 ;  96 "./lib/lib8tion/math8.h" 1
 1397 0008 621B      		sub r22, r18    
 1398 000a 00F4      		brcc L_1156     
 1399 000c 60E0      		ldi r22, 0x00  
 1400               		L_1156: 
 1401               	 ;  0 "" 2
 1402               	.LVL107:
 1403               	/* #NOAPP */
 1404               	.LBE59:
 1405               	.LBE58:
 428:quantum/rgblight.c **** }
 1406               		.loc 1 428 0
 1407 000e 282F      		mov r18,r24
 1408 0010 4381      		ldd r20,Z+3
 1409 0012 8181      		ldd r24,Z+1
 1410               	.LVL108:
 1411 0014 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1412               	.LVL109:
 1413               		.cfi_endproc
 1414               	.LFE120:
 1416               		.section	.text.rgblight_decrease_sat_noeeprom,"ax",@progbits
 1417               	.global	rgblight_decrease_sat_noeeprom
 1419               	rgblight_decrease_sat_noeeprom:
 1420               	.LFB121:
 430:quantum/rgblight.c ****   rgblight_decrease_sat_helper(false);
 1421               		.loc 1 430 0
 1422               		.cfi_startproc
 1423               	/* prologue: function */
 1424               	/* frame size = 0 */
 1425               	/* stack size = 0 */
 1426               	.L__stack_usage = 0
 431:quantum/rgblight.c **** }
 1427               		.loc 1 431 0
 1428 0000 80E0      		ldi r24,0
 1429 0002 0C94 0000 		jmp rgblight_decrease_sat_helper
 1430               	.LVL110:
 1431               		.cfi_endproc
 1432               	.LFE121:
 1434               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 1435               	.global	rgblight_decrease_sat
 1437               	rgblight_decrease_sat:
 1438               	.LFB122:
 433:quantum/rgblight.c ****   rgblight_decrease_sat_helper(true);
 1439               		.loc 1 433 0
 1440               		.cfi_startproc
 1441               	/* prologue: function */
 1442               	/* frame size = 0 */
 1443               	/* stack size = 0 */
 1444               	.L__stack_usage = 0
 434:quantum/rgblight.c **** }
 1445               		.loc 1 434 0
 1446 0000 81E0      		ldi r24,lo8(1)
 1447 0002 0C94 0000 		jmp rgblight_decrease_sat_helper
 1448               	.LVL111:
 1449               		.cfi_endproc
 1450               	.LFE122:
 1452               		.section	.text.rgblight_increase_val_helper,"ax",@progbits
 1453               	.global	rgblight_increase_val_helper
 1455               	rgblight_increase_val_helper:
 1456               	.LFB123:
 436:quantum/rgblight.c ****   uint8_t val = qadd8(rgblight_config.val, RGBLIGHT_VAL_STEP);
 1457               		.loc 1 436 0
 1458               		.cfi_startproc
 1459               	.LVL112:
 1460               	/* prologue: function */
 1461               	/* frame size = 0 */
 1462               	/* stack size = 0 */
 1463               	.L__stack_usage = 0
 437:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(rgblight_config.hue, rgblight_config.sat, val, write_to_eeprom);
 1464               		.loc 1 437 0
 1465 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1466 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1467               	.LBB60:
 1468               	.LBB61:
  30:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
 1469               		.loc 2 30 0
 1470 0004 4381      		ldd r20,Z+3
 1471 0006 28E0      		ldi r18,lo8(8)
 1472               	/* #APP */
 1473               	 ;  30 "./lib/lib8tion/math8.h" 1
 1474 0008 420F      		add r20, r18    
 1475 000a 00F4      		brcc L_1200     
 1476 000c 4FEF      		ldi r20, 0xFF  
 1477               		L_1200: 
 1478               	 ;  0 "" 2
 1479               	.LVL113:
 1480               	/* #NOAPP */
 1481               	.LBE61:
 1482               	.LBE60:
 438:quantum/rgblight.c **** }
 1483               		.loc 1 438 0
 1484 000e 282F      		mov r18,r24
 1485 0010 6281      		ldd r22,Z+2
 1486 0012 8181      		ldd r24,Z+1
 1487               	.LVL114:
 1488 0014 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1489               	.LVL115:
 1490               		.cfi_endproc
 1491               	.LFE123:
 1493               		.section	.text.rgblight_increase_val_noeeprom,"ax",@progbits
 1494               	.global	rgblight_increase_val_noeeprom
 1496               	rgblight_increase_val_noeeprom:
 1497               	.LFB124:
 440:quantum/rgblight.c ****   rgblight_increase_val_helper(false);
 1498               		.loc 1 440 0
 1499               		.cfi_startproc
 1500               	/* prologue: function */
 1501               	/* frame size = 0 */
 1502               	/* stack size = 0 */
 1503               	.L__stack_usage = 0
 441:quantum/rgblight.c **** }
 1504               		.loc 1 441 0
 1505 0000 80E0      		ldi r24,0
 1506 0002 0C94 0000 		jmp rgblight_increase_val_helper
 1507               	.LVL116:
 1508               		.cfi_endproc
 1509               	.LFE124:
 1511               		.section	.text.rgblight_increase_val,"ax",@progbits
 1512               	.global	rgblight_increase_val
 1514               	rgblight_increase_val:
 1515               	.LFB125:
 443:quantum/rgblight.c ****   rgblight_increase_val_helper(true);
 1516               		.loc 1 443 0
 1517               		.cfi_startproc
 1518               	/* prologue: function */
 1519               	/* frame size = 0 */
 1520               	/* stack size = 0 */
 1521               	.L__stack_usage = 0
 444:quantum/rgblight.c **** }
 1522               		.loc 1 444 0
 1523 0000 81E0      		ldi r24,lo8(1)
 1524 0002 0C94 0000 		jmp rgblight_increase_val_helper
 1525               	.LVL117:
 1526               		.cfi_endproc
 1527               	.LFE125:
 1529               		.section	.text.rgblight_decrease_val_helper,"ax",@progbits
 1530               	.global	rgblight_decrease_val_helper
 1532               	rgblight_decrease_val_helper:
 1533               	.LFB126:
 446:quantum/rgblight.c ****   uint8_t val = qsub8(rgblight_config.val, RGBLIGHT_VAL_STEP);
 1534               		.loc 1 446 0
 1535               		.cfi_startproc
 1536               	.LVL118:
 1537               	/* prologue: function */
 1538               	/* frame size = 0 */
 1539               	/* stack size = 0 */
 1540               	.L__stack_usage = 0
 447:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(rgblight_config.hue, rgblight_config.sat, val, write_to_eeprom);
 1541               		.loc 1 447 0
 1542 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1543 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1544               	.LBB62:
 1545               	.LBB63:
 1546               		.loc 2 96 0
 1547 0004 4381      		ldd r20,Z+3
 1548 0006 28E0      		ldi r18,lo8(8)
 1549               	/* #APP */
 1550               	 ;  96 "./lib/lib8tion/math8.h" 1
 1551 0008 421B      		sub r20, r18    
 1552 000a 00F4      		brcc L_1244     
 1553 000c 40E0      		ldi r20, 0x00  
 1554               		L_1244: 
 1555               	 ;  0 "" 2
 1556               	.LVL119:
 1557               	/* #NOAPP */
 1558               	.LBE63:
 1559               	.LBE62:
 448:quantum/rgblight.c **** }
 1560               		.loc 1 448 0
 1561 000e 282F      		mov r18,r24
 1562 0010 6281      		ldd r22,Z+2
 1563 0012 8181      		ldd r24,Z+1
 1564               	.LVL120:
 1565 0014 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1566               	.LVL121:
 1567               		.cfi_endproc
 1568               	.LFE126:
 1570               		.section	.text.rgblight_decrease_val_noeeprom,"ax",@progbits
 1571               	.global	rgblight_decrease_val_noeeprom
 1573               	rgblight_decrease_val_noeeprom:
 1574               	.LFB127:
 450:quantum/rgblight.c ****   rgblight_decrease_val_helper(false);
 1575               		.loc 1 450 0
 1576               		.cfi_startproc
 1577               	/* prologue: function */
 1578               	/* frame size = 0 */
 1579               	/* stack size = 0 */
 1580               	.L__stack_usage = 0
 451:quantum/rgblight.c **** }
 1581               		.loc 1 451 0
 1582 0000 80E0      		ldi r24,0
 1583 0002 0C94 0000 		jmp rgblight_decrease_val_helper
 1584               	.LVL122:
 1585               		.cfi_endproc
 1586               	.LFE127:
 1588               		.section	.text.rgblight_decrease_val,"ax",@progbits
 1589               	.global	rgblight_decrease_val
 1591               	rgblight_decrease_val:
 1592               	.LFB128:
 453:quantum/rgblight.c ****   rgblight_decrease_val_helper(true);
 1593               		.loc 1 453 0
 1594               		.cfi_startproc
 1595               	/* prologue: function */
 1596               	/* frame size = 0 */
 1597               	/* stack size = 0 */
 1598               	.L__stack_usage = 0
 454:quantum/rgblight.c **** }
 1599               		.loc 1 454 0
 1600 0000 81E0      		ldi r24,lo8(1)
 1601 0002 0C94 0000 		jmp rgblight_decrease_val_helper
 1602               	.LVL123:
 1603               		.cfi_endproc
 1604               	.LFE128:
 1606               		.section	.text.rgblight_sethsv,"ax",@progbits
 1607               	.global	rgblight_sethsv
 1609               	rgblight_sethsv:
 1610               	.LFB133:
 553:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(hue, sat, val, true);
 1611               		.loc 1 553 0
 1612               		.cfi_startproc
 1613               	.LVL124:
 1614               	/* prologue: function */
 1615               	/* frame size = 0 */
 1616               	/* stack size = 0 */
 1617               	.L__stack_usage = 0
 554:quantum/rgblight.c **** }
 1618               		.loc 1 554 0
 1619 0000 21E0      		ldi r18,lo8(1)
 1620 0002 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1621               	.LVL125:
 1622               		.cfi_endproc
 1623               	.LFE133:
 1625               		.section	.text.rgblight_sethsv_noeeprom,"ax",@progbits
 1626               	.global	rgblight_sethsv_noeeprom
 1628               	rgblight_sethsv_noeeprom:
 1629               	.LFB134:
 557:quantum/rgblight.c ****   rgblight_sethsv_eeprom_helper(hue, sat, val, false);
 1630               		.loc 1 557 0
 1631               		.cfi_startproc
 1632               	.LVL126:
 1633               	/* prologue: function */
 1634               	/* frame size = 0 */
 1635               	/* stack size = 0 */
 1636               	.L__stack_usage = 0
 558:quantum/rgblight.c **** }
 1637               		.loc 1 558 0
 1638 0000 20E0      		ldi r18,0
 1639 0002 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1640               	.LVL127:
 1641               		.cfi_endproc
 1642               	.LFE134:
 1644               		.section	.text.rgblight_setrgb_at,"ax",@progbits
 1645               	.global	rgblight_setrgb_at
 1647               	rgblight_setrgb_at:
 1648               	.LFB139:
 584:quantum/rgblight.c ****   if (!rgblight_config.enable || index >= RGBLED_NUM) { return; }
 1649               		.loc 1 584 0
 1650               		.cfi_startproc
 1651               	.LVL128:
 1652               	/* prologue: function */
 1653               	/* frame size = 0 */
 1654               	/* stack size = 0 */
 1655               	.L__stack_usage = 0
 585:quantum/rgblight.c **** 
 1656               		.loc 1 585 0
 1657 0000 9091 0000 		lds r25,rgblight_config
 1658 0004 90FF      		sbrs r25,0
 1659 0006 00C0      		rjmp .L99
 585:quantum/rgblight.c **** 
 1660               		.loc 1 585 0 is_stmt 0 discriminator 1
 1661 0008 2430      		cpi r18,lo8(4)
 1662 000a 00F4      		brsh .L99
 587:quantum/rgblight.c ****   led[index].g = g;
 1663               		.loc 1 587 0 is_stmt 1
 1664 000c 30E0      		ldi r19,0
 1665 000e F901      		movw r30,r18
 1666 0010 EE0F      		lsl r30
 1667 0012 FF1F      		rol r31
 1668 0014 2E0F      		add r18,r30
 1669 0016 3F1F      		adc r19,r31
 1670               	.LVL129:
 1671 0018 F901      		movw r30,r18
 1672 001a E050      		subi r30,lo8(-(led))
 1673 001c F040      		sbci r31,hi8(-(led))
 1674 001e 8183      		std Z+1,r24
 588:quantum/rgblight.c ****   led[index].b = b;
 1675               		.loc 1 588 0
 1676 0020 6083      		st Z,r22
 589:quantum/rgblight.c ****   rgblight_set();
 1677               		.loc 1 589 0
 1678 0022 4283      		std Z+2,r20
 590:quantum/rgblight.c **** }
 1679               		.loc 1 590 0
 1680 0024 0C94 0000 		jmp rgblight_set
 1681               	.LVL130:
 1682               	.L99:
 1683 0028 0895      		ret
 1684               		.cfi_endproc
 1685               	.LFE139:
 1687               		.section	.text.rgblight_sethsv_at,"ax",@progbits
 1688               	.global	rgblight_sethsv_at
 1690               	rgblight_sethsv_at:
 1691               	.LFB140:
 593:quantum/rgblight.c ****   if (!rgblight_config.enable) { return; }
 1692               		.loc 1 593 0
 1693               		.cfi_startproc
 1694               	.LVL131:
 1695 0000 1F93      		push r17
 1696               	.LCFI32:
 1697               		.cfi_def_cfa_offset 3
 1698               		.cfi_offset 17, -2
 1699 0002 CF93      		push r28
 1700               	.LCFI33:
 1701               		.cfi_def_cfa_offset 4
 1702               		.cfi_offset 28, -3
 1703 0004 DF93      		push r29
 1704               	.LCFI34:
 1705               		.cfi_def_cfa_offset 5
 1706               		.cfi_offset 29, -4
 1707 0006 00D0      		rcall .
 1708 0008 1F92      		push __zero_reg__
 1709               	.LCFI35:
 1710               		.cfi_def_cfa_offset 8
 1711 000a CDB7      		in r28,__SP_L__
 1712 000c DEB7      		in r29,__SP_H__
 1713               	.LCFI36:
 1714               		.cfi_def_cfa_register 28
 1715               	/* prologue: function */
 1716               	/* frame size = 3 */
 1717               	/* stack size = 6 */
 1718               	.L__stack_usage = 6
 594:quantum/rgblight.c **** 
 1719               		.loc 1 594 0
 1720 000e 9091 0000 		lds r25,rgblight_config
 1721 0012 90FF      		sbrs r25,0
 1722 0014 00C0      		rjmp .L104
 1723 0016 122F      		mov r17,r18
 1724               	.LVL132:
 1725               	.LBB66:
 1726               	.LBB67:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 1727               		.loc 1 128 0
 1728 0018 9E01      		movw r18,r28
 1729               	.LVL133:
 1730 001a 2F5F      		subi r18,-1
 1731 001c 3F4F      		sbci r19,-1
 1732 001e 0E94 0000 		call sethsv_raw
 1733               	.LVL134:
 1734               	.LBE67:
 1735               	.LBE66:
 598:quantum/rgblight.c **** }
 1736               		.loc 1 598 0
 1737 0022 212F      		mov r18,r17
 1738 0024 4B81      		ldd r20,Y+3
 1739 0026 6981      		ldd r22,Y+1
 1740 0028 8A81      		ldd r24,Y+2
 1741 002a 0E94 0000 		call rgblight_setrgb_at
 1742               	.LVL135:
 1743               	.L104:
 1744               	/* epilogue start */
 599:quantum/rgblight.c **** 
 1745               		.loc 1 599 0
 1746 002e 0F90      		pop __tmp_reg__
 1747 0030 0F90      		pop __tmp_reg__
 1748 0032 0F90      		pop __tmp_reg__
 1749 0034 DF91      		pop r29
 1750 0036 CF91      		pop r28
 1751 0038 1F91      		pop r17
 1752 003a 0895      		ret
 1753               		.cfi_endproc
 1754               	.LFE140:
 1756               		.section	.text.rgblight_setrgb_range,"ax",@progbits
 1757               	.global	rgblight_setrgb_range
 1759               	rgblight_setrgb_range:
 1760               	.LFB142:
 614:quantum/rgblight.c ****   if (!rgblight_config.enable || start < 0 || start >= end || end > RGBLED_NUM) { return; }
 1761               		.loc 1 614 0
 1762               		.cfi_startproc
 1763               	.LVL136:
 1764 0000 0F93      		push r16
 1765               	.LCFI37:
 1766               		.cfi_def_cfa_offset 3
 1767               		.cfi_offset 16, -2
 1768               	/* prologue: function */
 1769               	/* frame size = 0 */
 1770               	/* stack size = 1 */
 1771               	.L__stack_usage = 1
 615:quantum/rgblight.c **** 
 1772               		.loc 1 615 0
 1773 0002 9091 0000 		lds r25,rgblight_config
 1774 0006 90FF      		sbrs r25,0
 1775 0008 00C0      		rjmp .L110
 615:quantum/rgblight.c **** 
 1776               		.loc 1 615 0 is_stmt 0 discriminator 1
 1777 000a 2017      		cp r18,r16
 1778 000c 00F4      		brsh .L110
 615:quantum/rgblight.c **** 
 1779               		.loc 1 615 0 discriminator 2
 1780 000e 0530      		cpi r16,lo8(5)
 1781 0010 00F4      		brsh .L110
 1782               	.LVL137:
 1783               	.L112:
 1784               	.LBB68:
 618:quantum/rgblight.c ****     led[i].g = g;
 1785               		.loc 1 618 0 is_stmt 1 discriminator 3
 1786 0012 E22F      		mov r30,r18
 1787 0014 F0E0      		ldi r31,0
 1788 0016 DF01      		movw r26,r30
 1789 0018 AA0F      		lsl r26
 1790 001a BB1F      		rol r27
 1791 001c EA0F      		add r30,r26
 1792 001e FB1F      		adc r31,r27
 1793 0020 E050      		subi r30,lo8(-(led))
 1794 0022 F040      		sbci r31,hi8(-(led))
 1795 0024 8183      		std Z+1,r24
 619:quantum/rgblight.c ****     led[i].b = b;
 1796               		.loc 1 619 0 discriminator 3
 1797 0026 6083      		st Z,r22
 620:quantum/rgblight.c ****   }
 1798               		.loc 1 620 0 discriminator 3
 1799 0028 4283      		std Z+2,r20
 617:quantum/rgblight.c ****     led[i].r = r;
 1800               		.loc 1 617 0 discriminator 3
 1801 002a 2F5F      		subi r18,lo8(-(1))
 1802               	.LVL138:
 1803 002c 0213      		cpse r16,r18
 1804 002e 00C0      		rjmp .L112
 1805               	.LBE68:
 622:quantum/rgblight.c ****   wait_ms(1);
 1806               		.loc 1 622 0
 1807 0030 0E94 0000 		call rgblight_set
 1808               	.LVL139:
 1809               	.LBB69:
 1810               	.LBB70:
 1811               		.file 3 "c:\\msys64_2\\home\\egypt2\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h"
   1:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1812               		.loc 3 187 0
 1813 0034 8FE9      		ldi r24,lo8(3999)
 1814 0036 9FE0      		ldi r25,hi8(3999)
 1815 0038 0197      	1:	sbiw r24,1
 1816 003a 01F4      		brne 1b
 1817 003c 00C0      		rjmp .
 1818 003e 0000      		nop
 1819               	.LVL140:
 1820               	.L110:
 1821               	/* epilogue start */
 1822               	.LBE70:
 1823               	.LBE69:
 624:quantum/rgblight.c **** 
 1824               		.loc 1 624 0
 1825 0040 0F91      		pop r16
 1826               	.LVL141:
 1827 0042 0895      		ret
 1828               		.cfi_endproc
 1829               	.LFE142:
 1831               		.section	.text.rgblight_sethsv_range,"ax",@progbits
 1832               	.global	rgblight_sethsv_range
 1834               	rgblight_sethsv_range:
 1835               	.LFB143:
 626:quantum/rgblight.c ****   if (!rgblight_config.enable) { return; }
 1836               		.loc 1 626 0
 1837               		.cfi_startproc
 1838               	.LVL142:
 1839 0000 0F93      		push r16
 1840               	.LCFI38:
 1841               		.cfi_def_cfa_offset 3
 1842               		.cfi_offset 16, -2
 1843 0002 1F93      		push r17
 1844               	.LCFI39:
 1845               		.cfi_def_cfa_offset 4
 1846               		.cfi_offset 17, -3
 1847 0004 CF93      		push r28
 1848               	.LCFI40:
 1849               		.cfi_def_cfa_offset 5
 1850               		.cfi_offset 28, -4
 1851 0006 DF93      		push r29
 1852               	.LCFI41:
 1853               		.cfi_def_cfa_offset 6
 1854               		.cfi_offset 29, -5
 1855 0008 00D0      		rcall .
 1856 000a 1F92      		push __zero_reg__
 1857               	.LCFI42:
 1858               		.cfi_def_cfa_offset 9
 1859 000c CDB7      		in r28,__SP_L__
 1860 000e DEB7      		in r29,__SP_H__
 1861               	.LCFI43:
 1862               		.cfi_def_cfa_register 28
 1863               	/* prologue: function */
 1864               	/* frame size = 3 */
 1865               	/* stack size = 7 */
 1866               	.L__stack_usage = 7
 627:quantum/rgblight.c **** 
 1867               		.loc 1 627 0
 1868 0010 9091 0000 		lds r25,rgblight_config
 1869 0014 90FF      		sbrs r25,0
 1870 0016 00C0      		rjmp .L117
 1871 0018 122F      		mov r17,r18
 1872               	.LVL143:
 1873               	.LBB73:
 1874               	.LBB74:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 1875               		.loc 1 128 0
 1876 001a 9E01      		movw r18,r28
 1877               	.LVL144:
 1878 001c 2F5F      		subi r18,-1
 1879 001e 3F4F      		sbci r19,-1
 1880 0020 0E94 0000 		call sethsv_raw
 1881               	.LVL145:
 1882               	.LBE74:
 1883               	.LBE73:
 631:quantum/rgblight.c **** }
 1884               		.loc 1 631 0
 1885 0024 212F      		mov r18,r17
 1886 0026 4B81      		ldd r20,Y+3
 1887 0028 6981      		ldd r22,Y+1
 1888 002a 8A81      		ldd r24,Y+2
 1889 002c 0E94 0000 		call rgblight_setrgb_range
 1890               	.LVL146:
 1891               	.L117:
 1892               	/* epilogue start */
 632:quantum/rgblight.c **** 
 1893               		.loc 1 632 0
 1894 0030 0F90      		pop __tmp_reg__
 1895 0032 0F90      		pop __tmp_reg__
 1896 0034 0F90      		pop __tmp_reg__
 1897 0036 DF91      		pop r29
 1898 0038 CF91      		pop r28
 1899 003a 1F91      		pop r17
 1900 003c 0F91      		pop r16
 1901               	.LVL147:
 1902 003e 0895      		ret
 1903               		.cfi_endproc
 1904               	.LFE143:
 1906               		.section	.text.rgblight_sethsv_master,"ax",@progbits
 1907               	.global	rgblight_sethsv_master
 1909               	rgblight_sethsv_master:
 1910               	.LFB146:
 643:quantum/rgblight.c ****   rgblight_sethsv_range(hue, sat, val, 0, (uint8_t) RGBLED_NUM/2);
 1911               		.loc 1 643 0
 1912               		.cfi_startproc
 1913               	.LVL148:
 1914 0000 0F93      		push r16
 1915               	.LCFI44:
 1916               		.cfi_def_cfa_offset 3
 1917               		.cfi_offset 16, -2
 1918               	/* prologue: function */
 1919               	/* frame size = 0 */
 1920               	/* stack size = 1 */
 1921               	.L__stack_usage = 1
 644:quantum/rgblight.c **** }
 1922               		.loc 1 644 0
 1923 0002 02E0      		ldi r16,lo8(2)
 1924 0004 20E0      		ldi r18,0
 1925 0006 0E94 0000 		call rgblight_sethsv_range
 1926               	.LVL149:
 1927               	/* epilogue start */
 645:quantum/rgblight.c **** 
 1928               		.loc 1 645 0
 1929 000a 0F91      		pop r16
 1930 000c 0895      		ret
 1931               		.cfi_endproc
 1932               	.LFE146:
 1934               		.section	.text.rgblight_sethsv_slave,"ax",@progbits
 1935               	.global	rgblight_sethsv_slave
 1937               	rgblight_sethsv_slave:
 1938               	.LFB147:
 647:quantum/rgblight.c ****   rgblight_sethsv_range(hue, sat, val, (uint8_t) RGBLED_NUM/2, (uint8_t) RGBLED_NUM);
 1939               		.loc 1 647 0
 1940               		.cfi_startproc
 1941               	.LVL150:
 1942 0000 0F93      		push r16
 1943               	.LCFI45:
 1944               		.cfi_def_cfa_offset 3
 1945               		.cfi_offset 16, -2
 1946               	/* prologue: function */
 1947               	/* frame size = 0 */
 1948               	/* stack size = 1 */
 1949               	.L__stack_usage = 1
 648:quantum/rgblight.c **** }
 1950               		.loc 1 648 0
 1951 0002 04E0      		ldi r16,lo8(4)
 1952 0004 22E0      		ldi r18,lo8(2)
 1953 0006 0E94 0000 		call rgblight_sethsv_range
 1954               	.LVL151:
 1955               	/* epilogue start */
 649:quantum/rgblight.c **** #endif // ifndef RGBLIGHT_SPLIT
 1956               		.loc 1 649 0
 1957 000a 0F91      		pop r16
 1958 000c 0895      		ret
 1959               		.cfi_endproc
 1960               	.LFE147:
 1962               		.section	.text.rgblight_setrgb_master,"ax",@progbits
 1963               	.global	rgblight_setrgb_master
 1965               	rgblight_setrgb_master:
 1966               	.LFB144:
 635:quantum/rgblight.c ****   rgblight_setrgb_range(r, g, b, 0 , (uint8_t) RGBLED_NUM/2);
 1967               		.loc 1 635 0
 1968               		.cfi_startproc
 1969               	.LVL152:
 1970 0000 0F93      		push r16
 1971               	.LCFI46:
 1972               		.cfi_def_cfa_offset 3
 1973               		.cfi_offset 16, -2
 1974               	/* prologue: function */
 1975               	/* frame size = 0 */
 1976               	/* stack size = 1 */
 1977               	.L__stack_usage = 1
 636:quantum/rgblight.c **** }
 1978               		.loc 1 636 0
 1979 0002 02E0      		ldi r16,lo8(2)
 1980 0004 20E0      		ldi r18,0
 1981 0006 0E94 0000 		call rgblight_setrgb_range
 1982               	.LVL153:
 1983               	/* epilogue start */
 637:quantum/rgblight.c **** 
 1984               		.loc 1 637 0
 1985 000a 0F91      		pop r16
 1986 000c 0895      		ret
 1987               		.cfi_endproc
 1988               	.LFE144:
 1990               		.section	.text.rgblight_setrgb_slave,"ax",@progbits
 1991               	.global	rgblight_setrgb_slave
 1993               	rgblight_setrgb_slave:
 1994               	.LFB145:
 639:quantum/rgblight.c ****   rgblight_setrgb_range(r, g, b, (uint8_t) RGBLED_NUM/2, (uint8_t) RGBLED_NUM);
 1995               		.loc 1 639 0
 1996               		.cfi_startproc
 1997               	.LVL154:
 1998 0000 0F93      		push r16
 1999               	.LCFI47:
 2000               		.cfi_def_cfa_offset 3
 2001               		.cfi_offset 16, -2
 2002               	/* prologue: function */
 2003               	/* frame size = 0 */
 2004               	/* stack size = 1 */
 2005               	.L__stack_usage = 1
 640:quantum/rgblight.c **** }
 2006               		.loc 1 640 0
 2007 0002 04E0      		ldi r16,lo8(4)
 2008 0004 22E0      		ldi r18,lo8(2)
 2009 0006 0E94 0000 		call rgblight_setrgb_range
 2010               	.LVL155:
 2011               	/* epilogue start */
 641:quantum/rgblight.c **** 
 2012               		.loc 1 641 0
 2013 000a 0F91      		pop r16
 2014 000c 0895      		ret
 2015               		.cfi_endproc
 2016               	.LFE145:
 2018               		.section	.text.rgblight_effect_rainbow_swirl,"ax",@progbits
 2019               	.global	rgblight_effect_rainbow_swirl
 2021               	rgblight_effect_rainbow_swirl:
 2022               	.LFB158:
 940:quantum/rgblight.c ****   uint8_t hue;
 2023               		.loc 1 940 0
 2024               		.cfi_startproc
 2025               	.LVL156:
 2026 0000 FF92      		push r15
 2027               	.LCFI48:
 2028               		.cfi_def_cfa_offset 3
 2029               		.cfi_offset 15, -2
 2030 0002 0F93      		push r16
 2031               	.LCFI49:
 2032               		.cfi_def_cfa_offset 4
 2033               		.cfi_offset 16, -3
 2034 0004 1F93      		push r17
 2035               	.LCFI50:
 2036               		.cfi_def_cfa_offset 5
 2037               		.cfi_offset 17, -4
 2038 0006 CF93      		push r28
 2039               	.LCFI51:
 2040               		.cfi_def_cfa_offset 6
 2041               		.cfi_offset 28, -5
 2042 0008 DF93      		push r29
 2043               	.LCFI52:
 2044               		.cfi_def_cfa_offset 7
 2045               		.cfi_offset 29, -6
 2046               	/* prologue: function */
 2047               	/* frame size = 0 */
 2048               	/* stack size = 5 */
 2049               	.L__stack_usage = 5
 2050 000a EC01      		movw r28,r24
 2051               	.LVL157:
 944:quantum/rgblight.c ****     hue = (RGBLIGHT_RAINBOW_SWIRL_RANGE / effect_num_leds * i + anim->current_hue);
 2052               		.loc 1 944 0
 2053 000c F12C      		mov r15,__zero_reg__
 2054               	.LBB77:
 2055               	.LBB78:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 2056               		.loc 1 128 0
 2057 000e 0FEF      		ldi r16,lo8(-1)
 2058 0010 10E0      		ldi r17,0
 2059               	.LVL158:
 2060               	.L128:
 2061               	.LBE78:
 2062               	.LBE77:
 944:quantum/rgblight.c ****     hue = (RGBLIGHT_RAINBOW_SWIRL_RANGE / effect_num_leds * i + anim->current_hue);
 2063               		.loc 1 944 0 discriminator 1
 2064 0012 6091 0000 		lds r22,effect_num_leds
 2065 0016 F616      		cp r15,r22
 2066 0018 00F4      		brsh .L133
 2067               	.LVL159:
 946:quantum/rgblight.c ****   }
 2068               		.loc 1 946 0 discriminator 3
 2069 001a 8091 0000 		lds r24,effect_start_pos
 2070 001e 2F2D      		mov r18,r15
 2071 0020 30E0      		ldi r19,0
 2072 0022 280F      		add r18,r24
 2073 0024 311D      		adc r19,__zero_reg__
 2074 0026 C901      		movw r24,r18
 2075 0028 880F      		lsl r24
 2076 002a 991F      		rol r25
 2077 002c 280F      		add r18,r24
 2078 002e 391F      		adc r19,r25
 2079 0030 2050      		subi r18,lo8(-(led))
 2080 0032 3040      		sbci r19,hi8(-(led))
 2081               	.LBB80:
 2082               	.LBB79:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 2083               		.loc 1 128 0 discriminator 3
 2084 0034 70E0      		ldi r23,0
 2085 0036 C801      		movw r24,r16
 2086 0038 0E94 0000 		call __divmodhi4
 2087               	.LVL160:
 2088 003c 962F      		mov r25,r22
 2089 003e 8C81      		ldd r24,Y+4
 2090 0040 4091 0000 		lds r20,rgblight_config+3
 2091 0044 6091 0000 		lds r22,rgblight_config+2
 2092 0048 F99E      		mul r15,r25
 2093 004a 800D      		add r24,r0
 2094 004c 1124      		clr __zero_reg__
 2095 004e 0E94 0000 		call sethsv_raw
 2096               	.LVL161:
 2097               	.LBE79:
 2098               	.LBE80:
 944:quantum/rgblight.c ****     hue = (RGBLIGHT_RAINBOW_SWIRL_RANGE / effect_num_leds * i + anim->current_hue);
 2099               		.loc 1 944 0 discriminator 3
 2100 0052 F394      		inc r15
 2101               	.LVL162:
 2102 0054 00C0      		rjmp .L128
 2103               	.L133:
 948:quantum/rgblight.c **** 
 2104               		.loc 1 948 0
 2105 0056 0E94 0000 		call rgblight_set
 2106               	.LVL163:
 950:quantum/rgblight.c ****     anim->current_hue++;
 2107               		.loc 1 950 0
 2108 005a 9A81      		ldd r25,Y+2
 2109 005c 8C81      		ldd r24,Y+4
 2110 005e 90FF      		sbrs r25,0
 2111 0060 00C0      		rjmp .L130
 951:quantum/rgblight.c ****   } else {
 2112               		.loc 1 951 0
 2113 0062 8F5F      		subi r24,lo8(-(1))
 2114 0064 00C0      		rjmp .L132
 2115               	.L130:
 953:quantum/rgblight.c ****   }
 2116               		.loc 1 953 0
 2117 0066 8150      		subi r24,lo8(-(-1))
 2118               	.L132:
 2119 0068 8C83      		std Y+4,r24
 2120               	/* epilogue start */
 955:quantum/rgblight.c **** #endif
 2121               		.loc 1 955 0
 2122 006a DF91      		pop r29
 2123 006c CF91      		pop r28
 2124               	.LVL164:
 2125 006e 1F91      		pop r17
 2126 0070 0F91      		pop r16
 2127 0072 FF90      		pop r15
 2128               	.LVL165:
 2129 0074 0895      		ret
 2130               		.cfi_endproc
 2131               	.LFE158:
 2133               		.section	.text.rgblight_effect_snake,"ax",@progbits
 2134               	.global	rgblight_effect_snake
 2136               	rgblight_effect_snake:
 2137               	.LFB159:
 962:quantum/rgblight.c ****   static uint8_t pos = 0;
 2138               		.loc 1 962 0
 2139               		.cfi_startproc
 2140               	.LVL166:
 2141 0000 BF92      		push r11
 2142               	.LCFI53:
 2143               		.cfi_def_cfa_offset 3
 2144               		.cfi_offset 11, -2
 2145 0002 CF92      		push r12
 2146               	.LCFI54:
 2147               		.cfi_def_cfa_offset 4
 2148               		.cfi_offset 12, -3
 2149 0004 DF92      		push r13
 2150               	.LCFI55:
 2151               		.cfi_def_cfa_offset 5
 2152               		.cfi_offset 13, -4
 2153 0006 EF92      		push r14
 2154               	.LCFI56:
 2155               		.cfi_def_cfa_offset 6
 2156               		.cfi_offset 14, -5
 2157 0008 FF92      		push r15
 2158               	.LCFI57:
 2159               		.cfi_def_cfa_offset 7
 2160               		.cfi_offset 15, -6
 2161 000a 0F93      		push r16
 2162               	.LCFI58:
 2163               		.cfi_def_cfa_offset 8
 2164               		.cfi_offset 16, -7
 2165 000c 1F93      		push r17
 2166               	.LCFI59:
 2167               		.cfi_def_cfa_offset 9
 2168               		.cfi_offset 17, -8
 2169 000e CF93      		push r28
 2170               	.LCFI60:
 2171               		.cfi_def_cfa_offset 10
 2172               		.cfi_offset 28, -9
 2173 0010 DF93      		push r29
 2174               	.LCFI61:
 2175               		.cfi_def_cfa_offset 11
 2176               		.cfi_offset 29, -10
 2177               	/* prologue: function */
 2178               	/* frame size = 0 */
 2179               	/* stack size = 9 */
 2180               	.L__stack_usage = 9
 2181               	.LVL167:
 968:quantum/rgblight.c ****     increment = -1;
 2182               		.loc 1 968 0
 2183 0012 FC01      		movw r30,r24
 2184 0014 8281      		ldd r24,Z+2
 2185               	.LVL168:
 2186 0016 80FF      		sbrs r24,0
 2187 0018 00C0      		rjmp .L144
 969:quantum/rgblight.c ****   }
 2188               		.loc 1 969 0
 2189 001a 0FEF      		ldi r16,lo8(-1)
 2190 001c 00C0      		rjmp .L135
 2191               	.L144:
 966:quantum/rgblight.c **** 
 2192               		.loc 1 966 0
 2193 001e 01E0      		ldi r16,lo8(1)
 2194               	.L135:
 2195               	.LVL169:
 983:quantum/rgblight.c ****     LED_TYPE *ledp = led + i + effect_start_pos;
 2196               		.loc 1 983 0
 2197 0020 10E0      		ldi r17,0
 2198               	.LVL170:
 2199               	.L136:
 983:quantum/rgblight.c ****     LED_TYPE *ledp = led + i + effect_start_pos;
 2200               		.loc 1 983 0 is_stmt 0 discriminator 1
 2201 0022 8091 0000 		lds r24,effect_num_leds
 2202 0026 1817      		cp r17,r24
 2203 0028 00F4      		brsh .L147
 2204               	.LBB84:
 984:quantum/rgblight.c ****     ledp->r = 0;
 2205               		.loc 1 984 0 is_stmt 1
 2206 002a 8091 0000 		lds r24,effect_start_pos
 2207 002e C12E      		mov r12,r17
 2208 0030 D12C      		mov r13,__zero_reg__
 2209 0032 E601      		movw r28,r12
 2210 0034 C80F      		add r28,r24
 2211 0036 D11D      		adc r29,__zero_reg__
 2212 0038 CE01      		movw r24,r28
 2213 003a 880F      		lsl r24
 2214 003c 991F      		rol r25
 2215 003e C80F      		add r28,r24
 2216 0040 D91F      		adc r29,r25
 2217 0042 C050      		subi r28,lo8(-(led))
 2218 0044 D040      		sbci r29,hi8(-(led))
 2219               	.LVL171:
 985:quantum/rgblight.c ****     ledp->g = 0;
 2220               		.loc 1 985 0
 2221 0046 1982      		std Y+1,__zero_reg__
 986:quantum/rgblight.c ****     ledp->b = 0;
 2222               		.loc 1 986 0
 2223 0048 1882      		st Y,__zero_reg__
 987:quantum/rgblight.c ****     for (j = 0; j < RGBLIGHT_EFFECT_SNAKE_LENGTH; j++) {
 2224               		.loc 1 987 0
 2225 004a 1A82      		std Y+2,__zero_reg__
 2226               	.LVL172:
 2227 004c 34E0      		ldi r19,lo8(4)
 2228 004e E32E      		mov r14,r19
 2229 0050 F12C      		mov r15,__zero_reg__
 2230 0052 B12C      		mov r11,__zero_reg__
 2231               	.LVL173:
 2232               	.L139:
 989:quantum/rgblight.c ****       if (k < 0) {
 2233               		.loc 1 989 0
 2234 0054 8091 0000 		lds r24,pos.3243
 2235 0058 8B0D      		add r24,r11
 2236               	.LVL174:
 990:quantum/rgblight.c ****         k = k + effect_num_leds;
 2237               		.loc 1 990 0
 2238 005a 87FF      		sbrs r24,7
 2239 005c 00C0      		rjmp .L137
 991:quantum/rgblight.c ****       }
 2240               		.loc 1 991 0
 2241 005e 9091 0000 		lds r25,effect_num_leds
 2242 0062 890F      		add r24,r25
 2243               	.LVL175:
 2244               	.L137:
 993:quantum/rgblight.c ****         sethsv(rgblight_config.hue, rgblight_config.sat,
 2245               		.loc 1 993 0
 2246 0064 082E      		mov __tmp_reg__,r24
 2247 0066 000C      		lsl r0
 2248 0068 990B      		sbc r25,r25
 2249 006a C816      		cp r12,r24
 2250 006c D906      		cpc r13,r25
 2251 006e 01F4      		brne .L138
 2252               	.LVL176:
 2253               	.LBB85:
 2254               	.LBB86:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 2255               		.loc 1 128 0
 2256 0070 8091 0000 		lds r24,rgblight_config+3
 2257               	.LVL177:
 2258 0074 8E9D      		mul r24,r14
 2259 0076 A001      		movw r20,r0
 2260 0078 8F9D      		mul r24,r15
 2261 007a 500D      		add r21,r0
 2262 007c 1124      		clr __zero_reg__
 2263 007e 5595      		asr r21
 2264 0080 4795      		ror r20
 2265 0082 5595      		asr r21
 2266 0084 4795      		ror r20
 2267 0086 9E01      		movw r18,r28
 2268 0088 6091 0000 		lds r22,rgblight_config+2
 2269 008c 8091 0000 		lds r24,rgblight_config+1
 2270 0090 0E94 0000 		call sethsv_raw
 2271               	.LVL178:
 2272               	.L138:
 2273 0094 B00E      		add r11,r16
 2274 0096 F1E0      		ldi r31,1
 2275 0098 EF1A      		sub r14,r31
 2276 009a F108      		sbc r15,__zero_reg__
 2277               	.LBE86:
 2278               	.LBE85:
 988:quantum/rgblight.c ****       k = pos + j * increment;
 2279               		.loc 1 988 0 discriminator 2
 2280 009c 01F4      		brne .L139
 2281               	.LBE84:
 983:quantum/rgblight.c ****     LED_TYPE *ledp = led + i + effect_start_pos;
 2282               		.loc 1 983 0 discriminator 2
 2283 009e 1F5F      		subi r17,lo8(-(1))
 2284               	.LVL179:
 2285 00a0 00C0      		rjmp .L136
 2286               	.LVL180:
 2287               	.L147:
1000:quantum/rgblight.c ****   if (increment == 1) {
 2288               		.loc 1 1000 0
 2289 00a2 0E94 0000 		call rgblight_set
 2290               	.LVL181:
 2291 00a6 8091 0000 		lds r24,pos.3243
1001:quantum/rgblight.c ****     if (pos - 1 < 0) {
 2292               		.loc 1 1001 0
 2293 00aa 0130      		cpi r16,lo8(1)
 2294 00ac 01F4      		brne .L141
1002:quantum/rgblight.c ****       pos = effect_num_leds - 1;
 2295               		.loc 1 1002 0
 2296 00ae 8111      		cpse r24,__zero_reg__
 2297 00b0 00C0      		rjmp .L142
1003:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 2298               		.loc 1 1003 0
 2299 00b2 8091 0000 		lds r24,effect_num_leds
 2300               	.L142:
1008:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 2301               		.loc 1 1008 0
 2302 00b6 8150      		subi r24,lo8(-(-1))
 2303 00b8 00C0      		rjmp .L146
 2304               	.L141:
1014:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 2305               		.loc 1 1014 0
 2306 00ba 90E0      		ldi r25,0
 2307 00bc 0196      		adiw r24,1
 2308 00be 6091 0000 		lds r22,effect_num_leds
 2309 00c2 70E0      		ldi r23,0
 2310 00c4 0E94 0000 		call __divmodhi4
 2311               	.L146:
 2312 00c8 8093 0000 		sts pos.3243,r24
 2313               	/* epilogue start */
1019:quantum/rgblight.c **** #endif
 2314               		.loc 1 1019 0
 2315 00cc DF91      		pop r29
 2316 00ce CF91      		pop r28
 2317 00d0 1F91      		pop r17
 2318               	.LVL182:
 2319 00d2 0F91      		pop r16
 2320               	.LVL183:
 2321 00d4 FF90      		pop r15
 2322 00d6 EF90      		pop r14
 2323 00d8 DF90      		pop r13
 2324 00da CF90      		pop r12
 2325 00dc BF90      		pop r11
 2326 00de 0895      		ret
 2327               		.cfi_endproc
 2328               	.LFE159:
 2330               		.section	.text.rgblight_effect_knight,"ax",@progbits
 2331               	.global	rgblight_effect_knight
 2333               	rgblight_effect_knight:
 2334               	.LFB160:
1026:quantum/rgblight.c **** 
 2335               		.loc 1 1026 0
 2336               		.cfi_startproc
 2337               	.LVL184:
 2338 0000 CF93      		push r28
 2339               	.LCFI62:
 2340               		.cfi_def_cfa_offset 3
 2341               		.cfi_offset 28, -2
 2342               	/* prologue: function */
 2343               	/* frame size = 0 */
 2344               	/* stack size = 1 */
 2345               	.L__stack_usage = 1
1042:quantum/rgblight.c ****     led[i].r = 0;
 2346               		.loc 1 1042 0
 2347 0002 8091 0000 		lds r24,effect_start_pos
 2348               	.LVL185:
 2349 0006 9091 0000 		lds r25,effect_end_pos
 2350               	.L149:
1042:quantum/rgblight.c ****     led[i].r = 0;
 2351               		.loc 1 1042 0 is_stmt 0 discriminator 1
 2352 000a 8917      		cp r24,r25
 2353 000c 00F4      		brsh .L157
1043:quantum/rgblight.c ****     led[i].g = 0;
 2354               		.loc 1 1043 0 is_stmt 1 discriminator 3
 2355 000e E82F      		mov r30,r24
 2356 0010 F0E0      		ldi r31,0
 2357 0012 9F01      		movw r18,r30
 2358 0014 220F      		lsl r18
 2359 0016 331F      		rol r19
 2360 0018 E20F      		add r30,r18
 2361 001a F31F      		adc r31,r19
 2362 001c E050      		subi r30,lo8(-(led))
 2363 001e F040      		sbci r31,hi8(-(led))
 2364 0020 1182      		std Z+1,__zero_reg__
1044:quantum/rgblight.c ****     led[i].b = 0;
 2365               		.loc 1 1044 0 discriminator 3
 2366 0022 1082      		st Z,__zero_reg__
1045:quantum/rgblight.c ****   }
 2367               		.loc 1 1045 0 discriminator 3
 2368 0024 1282      		std Z+2,__zero_reg__
1042:quantum/rgblight.c ****     led[i].r = 0;
 2369               		.loc 1 1042 0 discriminator 3
 2370 0026 8F5F      		subi r24,lo8(-(1))
 2371               	.LVL186:
 2372 0028 00C0      		rjmp .L149
 2373               	.L157:
 2374 002a C0E0      		ldi r28,0
 2375               	.LVL187:
 2376               	.L151:
1048:quantum/rgblight.c ****     cur = (i + RGBLIGHT_EFFECT_KNIGHT_OFFSET) % effect_num_leds + effect_start_pos;
 2377               		.loc 1 1048 0 discriminator 1
 2378 002c 6091 0000 		lds r22,effect_num_leds
 2379 0030 C617      		cp r28,r22
 2380 0032 00F4      		brsh .L158
1049:quantum/rgblight.c **** 
 2381               		.loc 1 1049 0
 2382 0034 EC2F      		mov r30,r28
 2383 0036 F0E0      		ldi r31,0
 2384 0038 70E0      		ldi r23,0
 2385 003a CF01      		movw r24,r30
 2386 003c 0E94 0000 		call __divmodhi4
 2387 0040 2091 0000 		lds r18,effect_start_pos
 2388 0044 820F      		add r24,r18
 2389               	.LVL188:
1051:quantum/rgblight.c ****       sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[cur]);
 2390               		.loc 1 1051 0
 2391 0046 2091 0000 		lds r18,low_bound.3259
 2392 004a 022E      		mov __tmp_reg__,r18
 2393 004c 000C      		lsl r0
 2394 004e 330B      		sbc r19,r19
 2395 0050 90E0      		ldi r25,0
 2396 0052 E217      		cp r30,r18
 2397 0054 F307      		cpc r31,r19
 2398 0056 04F0      		brlt .L152
1051:quantum/rgblight.c ****       sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[cur]);
 2399               		.loc 1 1051 0 is_stmt 0 discriminator 1
 2400 0058 2091 0000 		lds r18,high_bound.3260
 2401 005c 022E      		mov __tmp_reg__,r18
 2402 005e 000C      		lsl r0
 2403 0060 330B      		sbc r19,r19
 2404 0062 2E17      		cp r18,r30
 2405 0064 3F07      		cpc r19,r31
 2406 0066 04F0      		brlt .L152
 2407               	.LVL189:
1052:quantum/rgblight.c ****     } else {
 2408               		.loc 1 1052 0 is_stmt 1
 2409 0068 9C01      		movw r18,r24
 2410 006a 220F      		lsl r18
 2411 006c 331F      		rol r19
 2412 006e 820F      		add r24,r18
 2413 0070 931F      		adc r25,r19
 2414               	.LVL190:
 2415 0072 9C01      		movw r18,r24
 2416 0074 2050      		subi r18,lo8(-(led))
 2417 0076 3040      		sbci r19,hi8(-(led))
 2418               	.LBB89:
 2419               	.LBB90:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 2420               		.loc 1 128 0
 2421 0078 4091 0000 		lds r20,rgblight_config+3
 2422 007c 6091 0000 		lds r22,rgblight_config+2
 2423 0080 8091 0000 		lds r24,rgblight_config+1
 2424 0084 0E94 0000 		call sethsv_raw
 2425               	.LVL191:
 2426 0088 00C0      		rjmp .L153
 2427               	.LVL192:
 2428               	.L152:
 2429               	.LBE90:
 2430               	.LBE89:
1054:quantum/rgblight.c ****       led[cur].g = 0;
 2431               		.loc 1 1054 0
 2432 008a FC01      		movw r30,r24
 2433 008c EE0F      		lsl r30
 2434 008e FF1F      		rol r31
 2435 0090 8E0F      		add r24,r30
 2436 0092 9F1F      		adc r25,r31
 2437               	.LVL193:
 2438 0094 FC01      		movw r30,r24
 2439 0096 E050      		subi r30,lo8(-(led))
 2440 0098 F040      		sbci r31,hi8(-(led))
 2441 009a 1182      		std Z+1,__zero_reg__
1055:quantum/rgblight.c ****       led[cur].b = 0;
 2442               		.loc 1 1055 0
 2443 009c 1082      		st Z,__zero_reg__
1056:quantum/rgblight.c ****     }
 2444               		.loc 1 1056 0
 2445 009e 1282      		std Z+2,__zero_reg__
 2446               	.L153:
1048:quantum/rgblight.c ****     cur = (i + RGBLIGHT_EFFECT_KNIGHT_OFFSET) % effect_num_leds + effect_start_pos;
 2447               		.loc 1 1048 0 discriminator 2
 2448 00a0 CF5F      		subi r28,lo8(-(1))
 2449               	.LVL194:
 2450 00a2 00C0      		rjmp .L151
 2451               	.L158:
1059:quantum/rgblight.c **** 
 2452               		.loc 1 1059 0
 2453 00a4 0E94 0000 		call rgblight_set
 2454               	.LVL195:
1063:quantum/rgblight.c ****   high_bound += increment;
 2455               		.loc 1 1063 0
 2456 00a8 2091 0000 		lds r18,increment.3261
 2457 00ac 8091 0000 		lds r24,low_bound.3259
 2458 00b0 820F      		add r24,r18
 2459 00b2 8093 0000 		sts low_bound.3259,r24
1064:quantum/rgblight.c **** 
 2460               		.loc 1 1064 0
 2461 00b6 9091 0000 		lds r25,high_bound.3260
 2462 00ba 920F      		add r25,r18
 2463 00bc 9093 0000 		sts high_bound.3260,r25
1066:quantum/rgblight.c ****     increment = -increment;
 2464               		.loc 1 1066 0
 2465 00c0 1916      		cp __zero_reg__,r25
 2466 00c2 04F4      		brge .L155
1066:quantum/rgblight.c ****     increment = -increment;
 2467               		.loc 1 1066 0 is_stmt 0 discriminator 1
 2468 00c4 082E      		mov __tmp_reg__,r24
 2469 00c6 000C      		lsl r0
 2470 00c8 990B      		sbc r25,r25
 2471 00ca 4091 0000 		lds r20,effect_num_leds
 2472 00ce 50E0      		ldi r21,0
 2473 00d0 4150      		subi r20,1
 2474 00d2 5109      		sbc r21,__zero_reg__
 2475 00d4 8417      		cp r24,r20
 2476 00d6 9507      		cpc r25,r21
 2477 00d8 04F0      		brlt .L148
 2478               	.L155:
1067:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 2479               		.loc 1 1067 0 is_stmt 1
 2480 00da 2195      		neg r18
 2481 00dc 2093 0000 		sts increment.3261,r18
 2482               	.L148:
 2483               	/* epilogue start */
1074:quantum/rgblight.c **** #endif
 2484               		.loc 1 1074 0
 2485 00e0 CF91      		pop r28
 2486               	.LVL196:
 2487 00e2 0895      		ret
 2488               		.cfi_endproc
 2489               	.LFE160:
 2491               		.section	.text.rgblight_effect_christmas,"ax",@progbits
 2492               	.global	rgblight_effect_christmas
 2494               	rgblight_effect_christmas:
 2495               	.LFB161:
1078:quantum/rgblight.c ****   uint8_t hue;
 2496               		.loc 1 1078 0
 2497               		.cfi_startproc
 2498               	.LVL197:
 2499 0000 0F93      		push r16
 2500               	.LCFI63:
 2501               		.cfi_def_cfa_offset 3
 2502               		.cfi_offset 16, -2
 2503 0002 1F93      		push r17
 2504               	.LCFI64:
 2505               		.cfi_def_cfa_offset 4
 2506               		.cfi_offset 17, -3
 2507 0004 CF93      		push r28
 2508               	.LCFI65:
 2509               		.cfi_def_cfa_offset 5
 2510               		.cfi_offset 28, -4
 2511 0006 DF93      		push r29
 2512               	.LCFI66:
 2513               		.cfi_def_cfa_offset 6
 2514               		.cfi_offset 29, -5
 2515               	/* prologue: function */
 2516               	/* frame size = 0 */
 2517               	/* stack size = 4 */
 2518               	.L__stack_usage = 4
 2519 0008 8C01      		movw r16,r24
1082:quantum/rgblight.c ****   for (i = 0; i < effect_num_leds; i++) {
 2520               		.loc 1 1082 0
 2521 000a FC01      		movw r30,r24
 2522 000c 8481      		ldd r24,Z+4
 2523 000e 9581      		ldd r25,Z+5
 2524               	.LVL198:
 2525 0010 0196      		adiw r24,1
 2526 0012 8170      		andi r24,1
 2527 0014 9927      		clr r25
 2528 0016 9583      		std Z+5,r25
 2529 0018 8483      		std Z+4,r24
 2530               	.LVL199:
1083:quantum/rgblight.c ****     hue = 0 + ((i/RGBLIGHT_EFFECT_CHRISTMAS_STEP + anim->current_offset) % 2) * 85;
 2531               		.loc 1 1083 0
 2532 001a C0E0      		ldi r28,0
 2533               	.LBB93:
 2534               	.LBB94:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 2535               		.loc 1 128 0
 2536 001c D5E5      		ldi r29,lo8(85)
 2537               	.LVL200:
 2538               	.L160:
 2539               	.LBE94:
 2540               	.LBE93:
1083:quantum/rgblight.c ****     hue = 0 + ((i/RGBLIGHT_EFFECT_CHRISTMAS_STEP + anim->current_offset) % 2) * 85;
 2541               		.loc 1 1083 0 discriminator 1
 2542 001e 8091 0000 		lds r24,effect_num_leds
 2543 0022 C817      		cp r28,r24
 2544 0024 00F4      		brsh .L162
 2545               	.LVL201:
1085:quantum/rgblight.c ****   }
 2546               		.loc 1 1085 0 discriminator 3
 2547 0026 8091 0000 		lds r24,effect_start_pos
 2548 002a 2C2F      		mov r18,r28
 2549 002c 30E0      		ldi r19,0
 2550 002e 280F      		add r18,r24
 2551 0030 311D      		adc r19,__zero_reg__
 2552 0032 C901      		movw r24,r18
 2553 0034 880F      		lsl r24
 2554 0036 991F      		rol r25
 2555 0038 280F      		add r18,r24
 2556 003a 391F      		adc r19,r25
 2557 003c 2050      		subi r18,lo8(-(led))
 2558 003e 3040      		sbci r19,hi8(-(led))
 2559               	.LBB96:
 2560               	.LBB95:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 2561               		.loc 1 128 0 discriminator 3
 2562 0040 4C2F      		mov r20,r28
 2563 0042 4695      		lsr r20
 2564 0044 F801      		movw r30,r16
 2565 0046 8481      		ldd r24,Z+4
 2566 0048 9581      		ldd r25,Z+5
 2567 004a 840F      		add r24,r20
 2568 004c 911D      		adc r25,__zero_reg__
 2569 004e 8170      		andi r24,lo8(1)
 2570 0050 4091 0000 		lds r20,rgblight_config+3
 2571 0054 6091 0000 		lds r22,rgblight_config+2
 2572 0058 8D9F      		mul r24,r29
 2573 005a 802D      		mov r24,r0
 2574 005c 1124      		clr r1
 2575 005e 0E94 0000 		call sethsv_raw
 2576               	.LVL202:
 2577               	.LBE95:
 2578               	.LBE96:
1083:quantum/rgblight.c ****     hue = 0 + ((i/RGBLIGHT_EFFECT_CHRISTMAS_STEP + anim->current_offset) % 2) * 85;
 2579               		.loc 1 1083 0 discriminator 3
 2580 0062 CF5F      		subi r28,lo8(-(1))
 2581               	.LVL203:
 2582 0064 00C0      		rjmp .L160
 2583               	.L162:
 2584               	/* epilogue start */
1088:quantum/rgblight.c **** #endif
 2585               		.loc 1 1088 0
 2586 0066 DF91      		pop r29
 2587 0068 CF91      		pop r28
 2588               	.LVL204:
 2589 006a 1F91      		pop r17
 2590 006c 0F91      		pop r16
 2591               	.LVL205:
1087:quantum/rgblight.c **** }
 2592               		.loc 1 1087 0
 2593 006e 0C94 0000 		jmp rgblight_set
 2594               	.LVL206:
 2595               		.cfi_endproc
 2596               	.LFE161:
 2598               		.section	.text.rgblight_effect_alternating,"ax",@progbits
 2599               	.global	rgblight_effect_alternating
 2601               	rgblight_effect_alternating:
 2602               	.LFB163:
1113:quantum/rgblight.c **** #endif
1114:quantum/rgblight.c **** 
1115:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_ALTERNATING
1116:quantum/rgblight.c **** void rgblight_effect_alternating(animation_status_t *anim) {
 2603               		.loc 1 1116 0
 2604               		.cfi_startproc
 2605               	.LVL207:
 2606 0000 0F93      		push r16
 2607               	.LCFI67:
 2608               		.cfi_def_cfa_offset 3
 2609               		.cfi_offset 16, -2
 2610 0002 1F93      		push r17
 2611               	.LCFI68:
 2612               		.cfi_def_cfa_offset 4
 2613               		.cfi_offset 17, -3
 2614 0004 CF93      		push r28
 2615               	.LCFI69:
 2616               		.cfi_def_cfa_offset 5
 2617               		.cfi_offset 28, -4
 2618 0006 DF93      		push r29
 2619               	.LCFI70:
 2620               		.cfi_def_cfa_offset 6
 2621               		.cfi_offset 29, -5
 2622               	/* prologue: function */
 2623               	/* frame size = 0 */
 2624               	/* stack size = 4 */
 2625               	.L__stack_usage = 4
 2626 0008 EC01      		movw r28,r24
 2627               	.LVL208:
 2628               	.LBB105:
1117:quantum/rgblight.c **** 
1118:quantum/rgblight.c ****   for (int i = 0; i < effect_num_leds; i++) {
 2629               		.loc 1 1118 0
 2630 000a 00E0      		ldi r16,0
 2631 000c 10E0      		ldi r17,0
 2632               	.LVL209:
 2633               	.L164:
 2634               		.loc 1 1118 0 is_stmt 0 discriminator 1
 2635 000e 8091 0000 		lds r24,effect_num_leds
 2636 0012 282F      		mov r18,r24
 2637 0014 30E0      		ldi r19,0
 2638 0016 0217      		cp r16,r18
 2639 0018 1307      		cpc r17,r19
 2640 001a 04F4      		brge .L174
 2641               	.LBB106:
1119:quantum/rgblight.c ****       LED_TYPE *ledp = led + i + effect_start_pos;
 2642               		.loc 1 1119 0 is_stmt 1
 2643 001c 9091 0000 		lds r25,effect_start_pos
 2644 0020 9801      		movw r18,r16
 2645 0022 290F      		add r18,r25
 2646 0024 311D      		adc r19,__zero_reg__
 2647 0026 A901      		movw r20,r18
 2648 0028 440F      		lsl r20
 2649 002a 551F      		rol r21
 2650 002c 240F      		add r18,r20
 2651 002e 351F      		adc r19,r21
 2652 0030 2050      		subi r18,lo8(-(led))
 2653 0032 3040      		sbci r19,hi8(-(led))
 2654               	.LVL210:
1120:quantum/rgblight.c ****       if (i<effect_num_leds/2 && anim->pos) {
 2655               		.loc 1 1120 0
 2656 0034 8695      		lsr r24
 2657 0036 90E0      		ldi r25,0
 2658 0038 4C81      		ldd r20,Y+4
 2659 003a 0817      		cp r16,r24
 2660 003c 1907      		cpc r17,r25
 2661 003e 04F4      		brge .L165
 2662               		.loc 1 1120 0 is_stmt 0 discriminator 1
 2663 0040 4423      		tst r20
 2664 0042 01F0      		breq .L166
 2665 0044 00C0      		rjmp .L173
 2666               	.L165:
1121:quantum/rgblight.c ****           sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, ledp);
1122:quantum/rgblight.c ****       } else if (i>=effect_num_leds/2 && !anim->pos) {
 2667               		.loc 1 1122 0 is_stmt 1 discriminator 1
 2668 0046 4111      		cpse r20,__zero_reg__
 2669 0048 00C0      		rjmp .L166
 2670               	.L173:
 2671               	.LVL211:
 2672               	.LBB107:
 2673               	.LBB108:
 128:quantum/rgblight.c ****               val > RGBLIGHT_LIMIT_VAL ? RGBLIGHT_LIMIT_VAL : val,
 2674               		.loc 1 128 0
 2675 004a 4091 0000 		lds r20,rgblight_config+3
 2676 004e 00C0      		rjmp .L172
 2677               	.LVL212:
 2678               	.L166:
 2679               	.LBE108:
 2680               	.LBE107:
 2681               	.LBB109:
 2682               	.LBB110:
 2683 0050 40E0      		ldi r20,0
 2684               	.LVL213:
 2685               	.L172:
 2686 0052 6091 0000 		lds r22,rgblight_config+2
 2687 0056 8091 0000 		lds r24,rgblight_config+1
 2688 005a 0E94 0000 		call sethsv_raw
 2689               	.LVL214:
 2690               	.LBE110:
 2691               	.LBE109:
 2692               	.LBE106:
1118:quantum/rgblight.c ****       LED_TYPE *ledp = led + i + effect_start_pos;
 2693               		.loc 1 1118 0
 2694 005e 0F5F      		subi r16,-1
 2695 0060 1F4F      		sbci r17,-1
 2696               	.LVL215:
 2697 0062 00C0      		rjmp .L164
 2698               	.L174:
 2699               	.LBE105:
1123:quantum/rgblight.c ****           sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, ledp);
1124:quantum/rgblight.c ****       } else {
1125:quantum/rgblight.c ****           sethsv(rgblight_config.hue, rgblight_config.sat, 0, ledp);
1126:quantum/rgblight.c ****       }
1127:quantum/rgblight.c ****   }
1128:quantum/rgblight.c ****   rgblight_set();
 2700               		.loc 1 1128 0
 2701 0064 0E94 0000 		call rgblight_set
 2702               	.LVL216:
1129:quantum/rgblight.c ****   anim->pos = (anim->pos + 1) % 2;
 2703               		.loc 1 1129 0
 2704 0068 8C81      		ldd r24,Y+4
 2705 006a 90E0      		ldi r25,0
 2706 006c 0196      		adiw r24,1
 2707 006e 8170      		andi r24,1
 2708 0070 9927      		clr r25
 2709 0072 8C83      		std Y+4,r24
 2710               	/* epilogue start */
1130:quantum/rgblight.c **** }
 2711               		.loc 1 1130 0
 2712 0074 DF91      		pop r29
 2713 0076 CF91      		pop r28
 2714               	.LVL217:
 2715 0078 1F91      		pop r17
 2716 007a 0F91      		pop r16
 2717               	.LVL218:
 2718 007c 0895      		ret
 2719               		.cfi_endproc
 2720               	.LFE163:
 2722               		.section	.text.rgblight_disable,"ax",@progbits
 2723               	.global	rgblight_disable
 2725               	rgblight_disable:
 2726               	.LFB109:
 373:quantum/rgblight.c ****   rgblight_config.enable = 0;
 2727               		.loc 1 373 0
 2728               		.cfi_startproc
 2729               	/* prologue: function */
 2730               	/* frame size = 0 */
 2731               	/* stack size = 0 */
 2732               	.L__stack_usage = 0
 374:quantum/rgblight.c ****   eeconfig_update_rgblight(rgblight_config.raw);
 2733               		.loc 1 374 0
 2734 0000 E0E0      		ldi r30,lo8(rgblight_config)
 2735 0002 F0E0      		ldi r31,hi8(rgblight_config)
 2736 0004 8081      		ld r24,Z
 2737 0006 8E7F      		andi r24,lo8(~(1<<0))
 2738 0008 8083      		st Z,r24
 375:quantum/rgblight.c ****   xprintf("rgblight disable [EEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 2739               		.loc 1 375 0
 2740 000a 6081      		ld r22,Z
 2741 000c 7181      		ldd r23,Z+1
 2742 000e 8281      		ldd r24,Z+2
 2743 0010 9381      		ldd r25,Z+3
 2744 0012 0E94 0000 		call eeconfig_update_rgblight
 2745               	.LVL219:
 2746               	.LBB115:
 2747               	.LBB116:
 761:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 2748               		.loc 1 761 0
 2749 0016 1092 0000 		sts rgblight_status+1,__zero_reg__
 2750               	.LVL220:
 2751               	.LBE116:
 2752               	.LBE115:
 2753               	.LBB117:
 2754               	.LBB118:
 2755               		.loc 3 187 0
 2756 001a 2FEF      		ldi r18,lo8(159999)
 2757 001c 80E7      		ldi r24,hi8(159999)
 2758 001e 92E0      		ldi r25,hlo8(159999)
 2759 0020 2150      	1:	subi r18,1
 2760 0022 8040      		sbci r24,0
 2761 0024 9040      		sbci r25,0
 2762 0026 01F4      		brne 1b
 2763 0028 00C0      		rjmp .
 2764 002a 0000      		nop
 2765               	.LVL221:
 2766               	.LBE118:
 2767               	.LBE117:
 382:quantum/rgblight.c **** }
 2768               		.loc 1 382 0
 2769 002c 0C94 0000 		jmp rgblight_set
 2770               	.LVL222:
 2771               		.cfi_endproc
 2772               	.LFE109:
 2774               		.section	.text.rgblight_disable_noeeprom,"ax",@progbits
 2775               	.global	rgblight_disable_noeeprom
 2777               	rgblight_disable_noeeprom:
 2778               	.LFB110:
 385:quantum/rgblight.c ****   rgblight_config.enable = 0;
 2779               		.loc 1 385 0
 2780               		.cfi_startproc
 2781               	/* prologue: function */
 2782               	/* frame size = 0 */
 2783               	/* stack size = 0 */
 2784               	.L__stack_usage = 0
 386:quantum/rgblight.c ****   xprintf("rgblight disable [noEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 2785               		.loc 1 386 0
 2786 0000 E0E0      		ldi r30,lo8(rgblight_config)
 2787 0002 F0E0      		ldi r31,hi8(rgblight_config)
 2788 0004 8081      		ld r24,Z
 2789 0006 8E7F      		andi r24,lo8(~(1<<0))
 2790 0008 8083      		st Z,r24
 2791               	.LBB123:
 2792               	.LBB124:
 761:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 2793               		.loc 1 761 0
 2794 000a 1092 0000 		sts rgblight_status+1,__zero_reg__
 2795               	.LVL223:
 2796               	.LBE124:
 2797               	.LBE123:
 2798               	.LBB125:
 2799               	.LBB126:
 2800               		.loc 3 187 0
 2801 000e 2FEF      		ldi r18,lo8(159999)
 2802 0010 80E7      		ldi r24,hi8(159999)
 2803 0012 92E0      		ldi r25,hlo8(159999)
 2804 0014 2150      	1:	subi r18,1
 2805 0016 8040      		sbci r24,0
 2806 0018 9040      		sbci r25,0
 2807 001a 01F4      		brne 1b
 2808 001c 00C0      		rjmp .
 2809 001e 0000      		nop
 2810               	.LVL224:
 2811               	.LBE126:
 2812               	.LBE125:
 393:quantum/rgblight.c **** }
 2813               		.loc 1 393 0
 2814 0020 0C94 0000 		jmp rgblight_set
 2815               	.LVL225:
 2816               		.cfi_endproc
 2817               	.LFE110:
 2819               		.section	.text.rgblight_timer_init,"ax",@progbits
 2820               	.global	rgblight_timer_init
 2822               	rgblight_timer_init:
 2823               	.LFB166:
 2824               		.cfi_startproc
 2825               	/* prologue: function */
 2826               	/* frame size = 0 */
 2827               	/* stack size = 0 */
 2828               	.L__stack_usage = 0
 2829 0000 1092 0000 		sts rgblight_status+1,__zero_reg__
 2830 0004 0895      		ret
 2831               		.cfi_endproc
 2832               	.LFE166:
 2834               		.section	.text.rgblight_timer_enable,"ax",@progbits
 2835               	.global	rgblight_timer_enable
 2837               	rgblight_timer_enable:
 2838               	.LFB150:
 752:quantum/rgblight.c ****   if( !is_static_effect(rgblight_config.mode) ) {
 2839               		.loc 1 752 0
 2840               		.cfi_startproc
 2841               	/* prologue: function */
 2842               	/* frame size = 0 */
 2843               	/* stack size = 0 */
 2844               	.L__stack_usage = 0
 2845               	.LVL226:
 753:quantum/rgblight.c ****       rgblight_status.timer_enabled = true;
 2846               		.loc 1 753 0
 2847 0000 6091 0000 		lds r22,rgblight_config
 2848 0004 6695      		lsr r22
 2849               	.LBB129:
 2850               	.LBB130:
  76:quantum/rgblight.c **** }
 2851               		.loc 1 76 0
 2852 0006 70E0      		ldi r23,0
 2853 0008 4BE0      		ldi r20,lo8(11)
 2854 000a 50E0      		ldi r21,0
 2855 000c 80E0      		ldi r24,lo8(static_effect_table)
 2856 000e 90E0      		ldi r25,hi8(static_effect_table)
 2857 0010 0E94 0000 		call memchr
 2858               	.LVL227:
 2859               	.LBE130:
 2860               	.LBE129:
 753:quantum/rgblight.c ****       rgblight_status.timer_enabled = true;
 2861               		.loc 1 753 0
 2862 0014 892B      		or r24,r25
 2863 0016 01F4      		brne .L179
 754:quantum/rgblight.c ****   }
 2864               		.loc 1 754 0
 2865 0018 81E0      		ldi r24,lo8(1)
 2866 001a 8093 0000 		sts rgblight_status+1,r24
 2867               	.L179:
 756:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 2868               		.loc 1 756 0
 2869 001e 0E94 0000 		call timer_read
 2870               	.LVL228:
 2871 0022 9093 0000 		sts animation_status+1,r25
 2872 0026 8093 0000 		sts animation_status,r24
 2873 002a 0895      		ret
 2874               		.cfi_endproc
 2875               	.LFE150:
 2877               		.section	.text.rgblight_mode_eeprom_helper,"ax",@progbits
 2878               	.global	rgblight_mode_eeprom_helper
 2880               	rgblight_mode_eeprom_helper:
 2881               	.LFB102:
 297:quantum/rgblight.c ****   if (!rgblight_config.enable) {
 2882               		.loc 1 297 0
 2883               		.cfi_startproc
 2884               	.LVL229:
 2885               	/* prologue: function */
 2886               	/* frame size = 0 */
 2887               	/* stack size = 0 */
 2888               	.L__stack_usage = 0
 298:quantum/rgblight.c ****     return;
 2889               		.loc 1 298 0
 2890 0000 9091 0000 		lds r25,rgblight_config
 2891 0004 90FF      		sbrs r25,0
 2892 0006 00C0      		rjmp .L180
 2893 0008 9170      		andi r25,lo8(1)
 301:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODE_STATIC_LIGHT;
 2894               		.loc 1 301 0
 2895 000a 8111      		cpse r24,__zero_reg__
 2896 000c 00C0      		rjmp .L182
 302:quantum/rgblight.c ****   } else if (mode > RGBLIGHT_MODES) {
 2897               		.loc 1 302 0
 2898 000e 9260      		ori r25,lo8(2)
 2899 0010 00C0      		rjmp .L191
 2900               	.L182:
 303:quantum/rgblight.c ****     rgblight_config.mode = RGBLIGHT_MODES;
 2901               		.loc 1 303 0
 2902 0012 8532      		cpi r24,lo8(37)
 2903 0014 00F0      		brlo .L184
 304:quantum/rgblight.c ****   } else {
 2904               		.loc 1 304 0
 2905 0016 9864      		ori r25,lo8(72)
 2906 0018 00C0      		rjmp .L191
 2907               	.L184:
 306:quantum/rgblight.c ****   }
 2908               		.loc 1 306 0
 2909 001a 880F      		lsl r24
 2910               	.LVL230:
 2911 001c 982B      		or r25,r24
 2912               	.L191:
 2913 001e 9093 0000 		sts rgblight_config,r25
 309:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);
 2914               		.loc 1 309 0
 2915 0022 6623      		tst r22
 2916 0024 01F0      		breq .L185
 310:quantum/rgblight.c ****     xprintf("rgblight mode [EEPROM]: %u\n", rgblight_config.mode);
 2917               		.loc 1 310 0
 2918 0026 6091 0000 		lds r22,rgblight_config
 2919 002a 7091 0000 		lds r23,rgblight_config+1
 2920 002e 8091 0000 		lds r24,rgblight_config+2
 2921 0032 9091 0000 		lds r25,rgblight_config+3
 2922               	.LVL231:
 2923 0036 0E94 0000 		call eeconfig_update_rgblight
 2924               	.LVL232:
 2925               	.L185:
 315:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 2926               		.loc 1 315 0
 2927 003a 6091 0000 		lds r22,rgblight_config
 2928 003e 6695      		lsr r22
 2929               	.LBB135:
 2930               	.LBB136:
  76:quantum/rgblight.c **** }
 2931               		.loc 1 76 0
 2932 0040 70E0      		ldi r23,0
 2933 0042 4BE0      		ldi r20,lo8(11)
 2934 0044 50E0      		ldi r21,0
 2935 0046 80E0      		ldi r24,lo8(static_effect_table)
 2936 0048 90E0      		ldi r25,hi8(static_effect_table)
 2937 004a 0E94 0000 		call memchr
 2938               	.LVL233:
 2939               	.LBE136:
 2940               	.LBE135:
 315:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 2941               		.loc 1 315 0
 2942 004e 892B      		or r24,r25
 2943 0050 01F0      		breq .L186
 2944               	.LBB137:
 2945               	.LBB138:
 761:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 2946               		.loc 1 761 0
 2947 0052 1092 0000 		sts rgblight_status+1,__zero_reg__
 2948 0056 00C0      		rjmp .L187
 2949               	.L186:
 2950               	.LBE138:
 2951               	.LBE137:
 321:quantum/rgblight.c **** #endif
 2952               		.loc 1 321 0
 2953 0058 0E94 0000 		call rgblight_timer_enable
 2954               	.LVL234:
 2955               	.L187:
 325:quantum/rgblight.c **** #endif
 2956               		.loc 1 325 0
 2957 005c 81E0      		ldi r24,lo8(1)
 2958 005e 8093 0000 		sts animation_status+3,r24
 327:quantum/rgblight.c **** }
 2959               		.loc 1 327 0
 2960 0062 4091 0000 		lds r20,rgblight_config+3
 2961 0066 6091 0000 		lds r22,rgblight_config+2
 2962 006a 8091 0000 		lds r24,rgblight_config+1
 2963 006e 0C94 0000 		jmp rgblight_sethsv_noeeprom
 2964               	.LVL235:
 2965               	.L180:
 2966 0072 0895      		ret
 2967               		.cfi_endproc
 2968               	.LFE102:
 2970               		.section	.text.rgblight_step_helper,"ax",@progbits
 2971               	.global	rgblight_step_helper
 2973               	rgblight_step_helper:
 2974               	.LFB95:
 260:quantum/rgblight.c ****   uint8_t mode = 0;
 2975               		.loc 1 260 0
 2976               		.cfi_startproc
 2977               	.LVL236:
 2978               	/* prologue: function */
 2979               	/* frame size = 0 */
 2980               	/* stack size = 0 */
 2981               	.L__stack_usage = 0
 2982 0000 682F      		mov r22,r24
 2983               	.LVL237:
 262:quantum/rgblight.c ****   if (mode > RGBLIGHT_MODES) {
 2984               		.loc 1 262 0
 2985 0002 9091 0000 		lds r25,rgblight_config
 2986 0006 9695      		lsr r25
 2987 0008 81E0      		ldi r24,lo8(1)
 2988               	.LVL238:
 2989 000a 890F      		add r24,r25
 2990               	.LVL239:
 263:quantum/rgblight.c ****     mode = 1;
 2991               		.loc 1 263 0
 2992 000c 8532      		cpi r24,lo8(37)
 2993 000e 00F0      		brlo .L193
 264:quantum/rgblight.c ****   }
 2994               		.loc 1 264 0
 2995 0010 81E0      		ldi r24,lo8(1)
 2996               	.LVL240:
 2997               	.L193:
 266:quantum/rgblight.c **** }
 2998               		.loc 1 266 0
 2999 0012 0C94 0000 		jmp rgblight_mode_eeprom_helper
 3000               	.LVL241:
 3001               		.cfi_endproc
 3002               	.LFE95:
 3004               		.section	.text.rgblight_step_noeeprom,"ax",@progbits
 3005               	.global	rgblight_step_noeeprom
 3007               	rgblight_step_noeeprom:
 3008               	.LFB96:
 268:quantum/rgblight.c ****   rgblight_step_helper(false);
 3009               		.loc 1 268 0
 3010               		.cfi_startproc
 3011               	/* prologue: function */
 3012               	/* frame size = 0 */
 3013               	/* stack size = 0 */
 3014               	.L__stack_usage = 0
 269:quantum/rgblight.c **** }
 3015               		.loc 1 269 0
 3016 0000 80E0      		ldi r24,0
 3017 0002 0C94 0000 		jmp rgblight_step_helper
 3018               	.LVL242:
 3019               		.cfi_endproc
 3020               	.LFE96:
 3022               		.section	.text.rgblight_step,"ax",@progbits
 3023               	.global	rgblight_step
 3025               	rgblight_step:
 3026               	.LFB97:
 271:quantum/rgblight.c ****   rgblight_step_helper(true);
 3027               		.loc 1 271 0
 3028               		.cfi_startproc
 3029               	/* prologue: function */
 3030               	/* frame size = 0 */
 3031               	/* stack size = 0 */
 3032               	.L__stack_usage = 0
 272:quantum/rgblight.c **** }
 3033               		.loc 1 272 0
 3034 0000 81E0      		ldi r24,lo8(1)
 3035 0002 0C94 0000 		jmp rgblight_step_helper
 3036               	.LVL243:
 3037               		.cfi_endproc
 3038               	.LFE97:
 3040               		.section	.text.rgblight_step_reverse_helper,"ax",@progbits
 3041               	.global	rgblight_step_reverse_helper
 3043               	rgblight_step_reverse_helper:
 3044               	.LFB98:
 274:quantum/rgblight.c ****   uint8_t mode = 0;
 3045               		.loc 1 274 0
 3046               		.cfi_startproc
 3047               	.LVL244:
 3048               	/* prologue: function */
 3049               	/* frame size = 0 */
 3050               	/* stack size = 0 */
 3051               	.L__stack_usage = 0
 3052 0000 682F      		mov r22,r24
 3053               	.LVL245:
 276:quantum/rgblight.c ****   if (mode < 1) {
 3054               		.loc 1 276 0
 3055 0002 9091 0000 		lds r25,rgblight_config
 3056 0006 9695      		lsr r25
 3057 0008 8FEF      		ldi r24,lo8(-1)
 3058               	.LVL246:
 3059 000a 890F      		add r24,r25
 3060               	.LVL247:
 277:quantum/rgblight.c ****     mode = RGBLIGHT_MODES;
 3061               		.loc 1 277 0
 3062 000c 01F4      		brne .L197
 278:quantum/rgblight.c ****   }
 3063               		.loc 1 278 0
 3064 000e 84E2      		ldi r24,lo8(36)
 3065               	.LVL248:
 3066               	.L197:
 280:quantum/rgblight.c **** }
 3067               		.loc 1 280 0
 3068 0010 0C94 0000 		jmp rgblight_mode_eeprom_helper
 3069               	.LVL249:
 3070               		.cfi_endproc
 3071               	.LFE98:
 3073               		.section	.text.rgblight_step_reverse_noeeprom,"ax",@progbits
 3074               	.global	rgblight_step_reverse_noeeprom
 3076               	rgblight_step_reverse_noeeprom:
 3077               	.LFB99:
 282:quantum/rgblight.c ****   rgblight_step_reverse_helper(false);
 3078               		.loc 1 282 0
 3079               		.cfi_startproc
 3080               	/* prologue: function */
 3081               	/* frame size = 0 */
 3082               	/* stack size = 0 */
 3083               	.L__stack_usage = 0
 283:quantum/rgblight.c **** }
 3084               		.loc 1 283 0
 3085 0000 80E0      		ldi r24,0
 3086 0002 0C94 0000 		jmp rgblight_step_reverse_helper
 3087               	.LVL250:
 3088               		.cfi_endproc
 3089               	.LFE99:
 3091               		.section	.text.rgblight_step_reverse,"ax",@progbits
 3092               	.global	rgblight_step_reverse
 3094               	rgblight_step_reverse:
 3095               	.LFB100:
 285:quantum/rgblight.c ****   rgblight_step_reverse_helper(true);
 3096               		.loc 1 285 0
 3097               		.cfi_startproc
 3098               	/* prologue: function */
 3099               	/* frame size = 0 */
 3100               	/* stack size = 0 */
 3101               	.L__stack_usage = 0
 286:quantum/rgblight.c **** }
 3102               		.loc 1 286 0
 3103 0000 81E0      		ldi r24,lo8(1)
 3104 0002 0C94 0000 		jmp rgblight_step_reverse_helper
 3105               	.LVL251:
 3106               		.cfi_endproc
 3107               	.LFE100:
 3109               		.section	.text.rgblight_mode,"ax",@progbits
 3110               	.global	rgblight_mode
 3112               	rgblight_mode:
 3113               	.LFB103:
 330:quantum/rgblight.c ****   rgblight_mode_eeprom_helper(mode, true);
 3114               		.loc 1 330 0
 3115               		.cfi_startproc
 3116               	.LVL252:
 3117               	/* prologue: function */
 3118               	/* frame size = 0 */
 3119               	/* stack size = 0 */
 3120               	.L__stack_usage = 0
 331:quantum/rgblight.c **** }
 3121               		.loc 1 331 0
 3122 0000 61E0      		ldi r22,lo8(1)
 3123 0002 0C94 0000 		jmp rgblight_mode_eeprom_helper
 3124               	.LVL253:
 3125               		.cfi_endproc
 3126               	.LFE103:
 3128               		.section	.text.rgblight_increase,"ax",@progbits
 3129               	.global	rgblight_increase
 3131               	rgblight_increase:
 3132               	.LFB93:
 245:quantum/rgblight.c ****   uint8_t mode = 0;
 3133               		.loc 1 245 0
 3134               		.cfi_startproc
 3135               	/* prologue: function */
 3136               	/* frame size = 0 */
 3137               	/* stack size = 0 */
 3138               	.L__stack_usage = 0
 3139               	.LVL254:
 247:quantum/rgblight.c ****     mode = rgblight_config.mode + 1;
 3140               		.loc 1 247 0
 3141 0000 8091 0000 		lds r24,rgblight_config
 3142 0004 8695      		lsr r24
 3143 0006 282F      		mov r18,r24
 3144 0008 30E0      		ldi r19,0
 3145 000a 2432      		cpi r18,36
 3146 000c 3105      		cpc r19,__zero_reg__
 3147 000e 04F4      		brge .L203
 248:quantum/rgblight.c ****   }
 3148               		.loc 1 248 0
 3149 0010 8F5F      		subi r24,lo8(-(1))
 3150               	.LVL255:
 3151 0012 00C0      		rjmp .L202
 3152               	.LVL256:
 3153               	.L203:
 246:quantum/rgblight.c ****   if (rgblight_config.mode < RGBLIGHT_MODES) {
 3154               		.loc 1 246 0
 3155 0014 80E0      		ldi r24,0
 3156               	.LVL257:
 3157               	.L202:
 250:quantum/rgblight.c **** }
 3158               		.loc 1 250 0
 3159 0016 0C94 0000 		jmp rgblight_mode
 3160               	.LVL258:
 3161               		.cfi_endproc
 3162               	.LFE93:
 3164               		.section	.text.rgblight_decrease,"ax",@progbits
 3165               	.global	rgblight_decrease
 3167               	rgblight_decrease:
 3168               	.LFB94:
 252:quantum/rgblight.c ****   uint8_t mode = 0;
 3169               		.loc 1 252 0
 3170               		.cfi_startproc
 3171               	/* prologue: function */
 3172               	/* frame size = 0 */
 3173               	/* stack size = 0 */
 3174               	.L__stack_usage = 0
 3175               	.LVL259:
 255:quantum/rgblight.c ****     mode = rgblight_config.mode - 1;
 3176               		.loc 1 255 0
 3177 0000 8091 0000 		lds r24,rgblight_config
 3178 0004 8695      		lsr r24
 3179 0006 282F      		mov r18,r24
 3180 0008 30E0      		ldi r19,0
 3181 000a 2230      		cpi r18,2
 3182 000c 3105      		cpc r19,__zero_reg__
 3183 000e 04F0      		brlt .L206
 256:quantum/rgblight.c ****   }
 3184               		.loc 1 256 0
 3185 0010 8150      		subi r24,lo8(-(-1))
 3186               	.LVL260:
 3187 0012 00C0      		rjmp .L205
 3188               	.LVL261:
 3189               	.L206:
 253:quantum/rgblight.c ****   // Mode will never be < 1. If it ever is, eeprom needs to be initialized.
 3190               		.loc 1 253 0
 3191 0014 80E0      		ldi r24,0
 3192               	.LVL262:
 3193               	.L205:
 258:quantum/rgblight.c **** }
 3194               		.loc 1 258 0
 3195 0016 0C94 0000 		jmp rgblight_mode
 3196               	.LVL263:
 3197               		.cfi_endproc
 3198               	.LFE94:
 3200               		.section	.text.rgblight_enable,"ax",@progbits
 3201               	.global	rgblight_enable
 3203               	rgblight_enable:
 3204               	.LFB107:
 359:quantum/rgblight.c ****   rgblight_config.enable = 1;
 3205               		.loc 1 359 0
 3206               		.cfi_startproc
 3207               	/* prologue: function */
 3208               	/* frame size = 0 */
 3209               	/* stack size = 0 */
 3210               	.L__stack_usage = 0
 360:quantum/rgblight.c ****   // No need to update EEPROM here. rgblight_mode() will do that, actually
 3211               		.loc 1 360 0
 3212 0000 E0E0      		ldi r30,lo8(rgblight_config)
 3213 0002 F0E0      		ldi r31,hi8(rgblight_config)
 3214 0004 8081      		ld r24,Z
 3215 0006 8160      		ori r24,lo8(1<<0)
 3216 0008 8083      		st Z,r24
 364:quantum/rgblight.c **** }
 3217               		.loc 1 364 0
 3218 000a 8695      		lsr r24
 3219 000c 0C94 0000 		jmp rgblight_mode
 3220               	.LVL264:
 3221               		.cfi_endproc
 3222               	.LFE107:
 3224               		.section	.text.rgblight_toggle,"ax",@progbits
 3225               	.global	rgblight_toggle
 3227               	rgblight_toggle:
 3228               	.LFB105:
 339:quantum/rgblight.c ****   xprintf("rgblight toggle [EEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 3229               		.loc 1 339 0
 3230               		.cfi_startproc
 3231               	/* prologue: function */
 3232               	/* frame size = 0 */
 3233               	/* stack size = 0 */
 3234               	.L__stack_usage = 0
 341:quantum/rgblight.c ****     rgblight_disable();
 3235               		.loc 1 341 0
 3236 0000 8091 0000 		lds r24,rgblight_config
 3237 0004 80FD      		sbrc r24,0
 342:quantum/rgblight.c ****   }
 3238               		.loc 1 342 0
 3239 0006 0C94 0000 		jmp rgblight_disable
 3240               	.LVL265:
 3241               	.L209:
 345:quantum/rgblight.c ****   }
 3242               		.loc 1 345 0
 3243 000a 0C94 0000 		jmp rgblight_enable
 3244               	.LVL266:
 3245               		.cfi_endproc
 3246               	.LFE105:
 3248               		.section	.text.rgblight_mode_noeeprom,"ax",@progbits
 3249               	.global	rgblight_mode_noeeprom
 3251               	rgblight_mode_noeeprom:
 3252               	.LFB104:
 334:quantum/rgblight.c ****   rgblight_mode_eeprom_helper(mode, false);
 3253               		.loc 1 334 0
 3254               		.cfi_startproc
 3255               	.LVL267:
 3256               	/* prologue: function */
 3257               	/* frame size = 0 */
 3258               	/* stack size = 0 */
 3259               	.L__stack_usage = 0
 335:quantum/rgblight.c **** }
 3260               		.loc 1 335 0
 3261 0000 60E0      		ldi r22,0
 3262 0002 0C94 0000 		jmp rgblight_mode_eeprom_helper
 3263               	.LVL268:
 3264               		.cfi_endproc
 3265               	.LFE104:
 3267               		.section	.text.rgblight_init,"ax",@progbits
 3268               	.global	rgblight_init
 3270               	rgblight_init:
 3271               	.LFB90:
 191:quantum/rgblight.c ****   /* if already initialized, don't do it again.
 3272               		.loc 1 191 0
 3273               		.cfi_startproc
 3274               	/* prologue: function */
 3275               	/* frame size = 0 */
 3276               	/* stack size = 0 */
 3277               	.L__stack_usage = 0
 195:quantum/rgblight.c **** 
 3278               		.loc 1 195 0
 3279 0000 8091 0000 		lds r24,is_rgblight_initialized
 3280 0004 8111      		cpse r24,__zero_reg__
 3281 0006 00C0      		rjmp .L211
 197:quantum/rgblight.c ****   dprintf("rgblight_init called.\n");
 3282               		.loc 1 197 0
 3283 0008 8091 0000 		lds r24,debug_config
 3284 000c 8160      		ori r24,lo8(1<<0)
 3285 000e 8093 0000 		sts debug_config,r24
 200:quantum/rgblight.c ****     dprintf("rgblight_init eeconfig is not enabled.\n");
 3286               		.loc 1 200 0
 3287 0012 0E94 0000 		call eeconfig_is_enabled
 3288               	.LVL269:
 3289 0016 8111      		cpse r24,__zero_reg__
 3290 0018 00C0      		rjmp .L213
 202:quantum/rgblight.c ****     eeconfig_update_rgblight_default();
 3291               		.loc 1 202 0
 3292 001a 0E94 0000 		call eeconfig_init
 3293               	.LVL270:
 203:quantum/rgblight.c ****   }
 3294               		.loc 1 203 0
 3295 001e 0E94 0000 		call eeconfig_update_rgblight_default
 3296               	.LVL271:
 3297               	.L213:
 205:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 3298               		.loc 1 205 0
 3299 0022 0E94 0000 		call eeconfig_read_rgblight
 3300               	.LVL272:
 3301 0026 6093 0000 		sts rgblight_config,r22
 3302 002a 7093 0000 		sts rgblight_config+1,r23
 3303 002e 8093 0000 		sts rgblight_config+2,r24
 3304 0032 9093 0000 		sts rgblight_config+3,r25
 207:quantum/rgblight.c ****     dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
 3305               		.loc 1 207 0
 3306 0036 6E7F      		andi r22,lo8(-2)
 3307 0038 01F4      		brne .L214
 209:quantum/rgblight.c ****     rgblight_config.raw = eeconfig_read_rgblight();
 3308               		.loc 1 209 0
 3309 003a 0E94 0000 		call eeconfig_update_rgblight_default
 3310               	.LVL273:
 210:quantum/rgblight.c ****   }
 3311               		.loc 1 210 0
 3312 003e 0E94 0000 		call eeconfig_read_rgblight
 3313               	.LVL274:
 3314 0042 6093 0000 		sts rgblight_config,r22
 3315 0046 7093 0000 		sts rgblight_config+1,r23
 3316 004a 8093 0000 		sts rgblight_config+2,r24
 3317 004e 9093 0000 		sts rgblight_config+3,r25
 3318               	.L214:
 212:quantum/rgblight.c **** 
 3319               		.loc 1 212 0
 3320 0052 0E94 0000 		call rgblight_check_config
 3321               	.LVL275:
 3322               	.LBB141:
 3323               	.LBB142:
 761:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 3324               		.loc 1 761 0
 3325 0056 1092 0000 		sts rgblight_status+1,__zero_reg__
 3326               	.LBE142:
 3327               	.LBE141:
 220:quantum/rgblight.c ****     rgblight_mode_noeeprom(rgblight_config.mode);
 3328               		.loc 1 220 0
 3329 005a 8091 0000 		lds r24,rgblight_config
 3330 005e 80FF      		sbrs r24,0
 3331 0060 00C0      		rjmp .L215
 221:quantum/rgblight.c ****   }
 3332               		.loc 1 221 0
 3333 0062 8695      		lsr r24
 3334 0064 0E94 0000 		call rgblight_mode_noeeprom
 3335               	.LVL276:
 3336               	.L215:
 224:quantum/rgblight.c **** 
 3337               		.loc 1 224 0
 3338 0068 81E0      		ldi r24,lo8(1)
 3339 006a 8093 0000 		sts is_rgblight_initialized,r24
 3340               	.L211:
 3341 006e 0895      		ret
 3342               		.cfi_endproc
 3343               	.LFE90:
 3345               		.section	.text.rgblight_update_dword,"ax",@progbits
 3346               	.global	rgblight_update_dword
 3348               	rgblight_update_dword:
 3349               	.LFB92:
 232:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 3350               		.loc 1 232 0
 3351               		.cfi_startproc
 3352               	.LVL277:
 3353               	/* prologue: function */
 3354               	/* frame size = 0 */
 3355               	/* stack size = 0 */
 3356               	.L__stack_usage = 0
 234:quantum/rgblight.c ****   if (rgblight_config.enable)
 3357               		.loc 1 234 0
 3358 0000 6093 0000 		sts rgblight_config,r22
 3359 0004 7093 0000 		sts rgblight_config+1,r23
 3360 0008 8093 0000 		sts rgblight_config+2,r24
 3361 000c 9093 0000 		sts rgblight_config+3,r25
 235:quantum/rgblight.c ****     rgblight_mode_noeeprom(rgblight_config.mode);
 3362               		.loc 1 235 0
 3363 0010 862F      		mov r24,r22
 3364 0012 60FF      		sbrs r22,0
 3365 0014 00C0      		rjmp .L220
 236:quantum/rgblight.c ****   else {
 3366               		.loc 1 236 0
 3367 0016 8695      		lsr r24
 3368 0018 0C94 0000 		jmp rgblight_mode_noeeprom
 3369               	.LVL278:
 3370               	.L220:
 3371               	.LBB145:
 3372               	.LBB146:
 761:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 3373               		.loc 1 761 0
 3374 001c 1092 0000 		sts rgblight_status+1,__zero_reg__
 3375               	.LBE146:
 3376               	.LBE145:
 241:quantum/rgblight.c ****   }
 3377               		.loc 1 241 0
 3378 0020 0C94 0000 		jmp rgblight_set
 3379               	.LVL279:
 3380               		.cfi_endproc
 3381               	.LFE92:
 3383               		.section	.text.rgblight_enable_noeeprom,"ax",@progbits
 3384               	.global	rgblight_enable_noeeprom
 3386               	rgblight_enable_noeeprom:
 3387               	.LFB108:
 367:quantum/rgblight.c ****   rgblight_config.enable = 1;
 3388               		.loc 1 367 0
 3389               		.cfi_startproc
 3390               	/* prologue: function */
 3391               	/* frame size = 0 */
 3392               	/* stack size = 0 */
 3393               	.L__stack_usage = 0
 368:quantum/rgblight.c ****   xprintf("rgblight enable [NOEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 3394               		.loc 1 368 0
 3395 0000 E0E0      		ldi r30,lo8(rgblight_config)
 3396 0002 F0E0      		ldi r31,hi8(rgblight_config)
 3397 0004 8081      		ld r24,Z
 3398 0006 8160      		ori r24,lo8(1<<0)
 3399 0008 8083      		st Z,r24
 370:quantum/rgblight.c **** }
 3400               		.loc 1 370 0
 3401 000a 8695      		lsr r24
 3402 000c 0C94 0000 		jmp rgblight_mode_noeeprom
 3403               	.LVL280:
 3404               		.cfi_endproc
 3405               	.LFE108:
 3407               		.section	.text.rgblight_toggle_noeeprom,"ax",@progbits
 3408               	.global	rgblight_toggle_noeeprom
 3410               	rgblight_toggle_noeeprom:
 3411               	.LFB106:
 349:quantum/rgblight.c ****   xprintf("rgblight toggle [NOEEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 3412               		.loc 1 349 0
 3413               		.cfi_startproc
 3414               	/* prologue: function */
 3415               	/* frame size = 0 */
 3416               	/* stack size = 0 */
 3417               	.L__stack_usage = 0
 351:quantum/rgblight.c ****     rgblight_disable_noeeprom();
 3418               		.loc 1 351 0
 3419 0000 8091 0000 		lds r24,rgblight_config
 3420 0004 80FD      		sbrc r24,0
 352:quantum/rgblight.c ****   }
 3421               		.loc 1 352 0
 3422 0006 0C94 0000 		jmp rgblight_disable_noeeprom
 3423               	.LVL281:
 3424               	.L223:
 355:quantum/rgblight.c ****   }
 3425               		.loc 1 355 0
 3426 000a 0C94 0000 		jmp rgblight_enable_noeeprom
 3427               	.LVL282:
 3428               		.cfi_endproc
 3429               	.LFE106:
 3431               		.section	.text.rgblight_timer_disable,"ax",@progbits
 3432               	.global	rgblight_timer_disable
 3434               	rgblight_timer_disable:
 3435               	.LFB151:
 760:quantum/rgblight.c ****   rgblight_status.timer_enabled = false;
 3436               		.loc 1 760 0
 3437               		.cfi_startproc
 3438               	/* prologue: function */
 3439               	/* frame size = 0 */
 3440               	/* stack size = 0 */
 3441               	.L__stack_usage = 0
 761:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 3442               		.loc 1 761 0
 3443 0000 1092 0000 		sts rgblight_status+1,__zero_reg__
 3444 0004 0895      		ret
 3445               		.cfi_endproc
 3446               	.LFE151:
 3448               		.section	.text.rgblight_timer_toggle,"ax",@progbits
 3449               	.global	rgblight_timer_toggle
 3451               	rgblight_timer_toggle:
 3452               	.LFB152:
 765:quantum/rgblight.c ****   dprintf("rgblight timer toggle.\n");
 3453               		.loc 1 765 0
 3454               		.cfi_startproc
 3455               	/* prologue: function */
 3456               	/* frame size = 0 */
 3457               	/* stack size = 0 */
 3458               	.L__stack_usage = 0
 767:quantum/rgblight.c ****       rgblight_timer_disable();
 3459               		.loc 1 767 0
 3460 0000 8091 0000 		lds r24,rgblight_status+1
 3461 0004 8823      		tst r24
 3462 0006 01F0      		breq .L226
 3463               	.LBB149:
 3464               	.LBB150:
 761:quantum/rgblight.c ****   RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 3465               		.loc 1 761 0
 3466 0008 1092 0000 		sts rgblight_status+1,__zero_reg__
 3467 000c 0895      		ret
 3468               	.L226:
 3469               	.LBE150:
 3470               	.LBE149:
 770:quantum/rgblight.c ****   }
 3471               		.loc 1 770 0
 3472 000e 0C94 0000 		jmp rgblight_timer_enable
 3473               	.LVL283:
 3474               		.cfi_endproc
 3475               	.LFE152:
 3477               		.section	.text.rgblight_show_solid_color,"ax",@progbits
 3478               	.global	rgblight_show_solid_color
 3480               	rgblight_show_solid_color:
 3481               	.LFB153:
 774:quantum/rgblight.c ****   rgblight_enable();
 3482               		.loc 1 774 0
 3483               		.cfi_startproc
 3484               	.LVL284:
 3485 0000 1F93      		push r17
 3486               	.LCFI71:
 3487               		.cfi_def_cfa_offset 3
 3488               		.cfi_offset 17, -2
 3489 0002 CF93      		push r28
 3490               	.LCFI72:
 3491               		.cfi_def_cfa_offset 4
 3492               		.cfi_offset 28, -3
 3493 0004 DF93      		push r29
 3494               	.LCFI73:
 3495               		.cfi_def_cfa_offset 5
 3496               		.cfi_offset 29, -4
 3497               	/* prologue: function */
 3498               	/* frame size = 0 */
 3499               	/* stack size = 3 */
 3500               	.L__stack_usage = 3
 3501 0006 C82F      		mov r28,r24
 3502 0008 D62F      		mov r29,r22
 3503 000a 142F      		mov r17,r20
 775:quantum/rgblight.c ****   rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 3504               		.loc 1 775 0
 3505 000c 0E94 0000 		call rgblight_enable
 3506               	.LVL285:
 776:quantum/rgblight.c ****   rgblight_setrgb(r, g, b);
 3507               		.loc 1 776 0
 3508 0010 81E0      		ldi r24,lo8(1)
 3509 0012 0E94 0000 		call rgblight_mode
 3510               	.LVL286:
 777:quantum/rgblight.c **** }
 3511               		.loc 1 777 0
 3512 0016 412F      		mov r20,r17
 3513 0018 6D2F      		mov r22,r29
 3514 001a 8C2F      		mov r24,r28
 3515               	/* epilogue start */
 778:quantum/rgblight.c **** 
 3516               		.loc 1 778 0
 3517 001c DF91      		pop r29
 3518               	.LVL287:
 3519 001e CF91      		pop r28
 3520               	.LVL288:
 3521 0020 1F91      		pop r17
 3522               	.LVL289:
 777:quantum/rgblight.c **** }
 3523               		.loc 1 777 0
 3524 0022 0C94 0000 		jmp rgblight_setrgb
 3525               	.LVL290:
 3526               		.cfi_endproc
 3527               	.LFE153:
 3529               		.section	.text.rgblight_task,"ax",@progbits
 3530               	.global	rgblight_task
 3532               	rgblight_task:
 3533               	.LFB155:
 792:quantum/rgblight.c ****   if (rgblight_status.timer_enabled) {
 3534               		.loc 1 792 0
 3535               		.cfi_startproc
 3536 0000 0F93      		push r16
 3537               	.LCFI74:
 3538               		.cfi_def_cfa_offset 3
 3539               		.cfi_offset 16, -2
 3540 0002 1F93      		push r17
 3541               	.LCFI75:
 3542               		.cfi_def_cfa_offset 4
 3543               		.cfi_offset 17, -3
 3544 0004 CF93      		push r28
 3545               	.LCFI76:
 3546               		.cfi_def_cfa_offset 5
 3547               		.cfi_offset 28, -4
 3548 0006 DF93      		push r29
 3549               	.LCFI77:
 3550               		.cfi_def_cfa_offset 6
 3551               		.cfi_offset 29, -5
 3552               	/* prologue: function */
 3553               	/* frame size = 0 */
 3554               	/* stack size = 4 */
 3555               	.L__stack_usage = 4
 793:quantum/rgblight.c ****     effect_func_t effect_func = rgblight_effect_dummy;
 3556               		.loc 1 793 0
 3557 0008 8091 0000 		lds r24,rgblight_status+1
 3558 000c 8823      		tst r24
 3559 000e 01F4      		brne .+2
 3560 0010 00C0      		rjmp .L230
 3561               	.LVL291:
 3562               	.LBB168:
 796:quantum/rgblight.c ****     animation_status.delta = delta;
 3563               		.loc 1 796 0
 3564 0012 8091 0000 		lds r24,rgblight_status
 3565 0016 E091 0000 		lds r30,rgblight_config
 3566 001a E695      		lsr r30
 3567 001c E81B      		sub r30,r24
 3568               	.LVL292:
 797:quantum/rgblight.c **** 
 3569               		.loc 1 797 0
 3570 001e E093 0000 		sts animation_status+2,r30
 803:quantum/rgblight.c ****       // breathing mode
 3571               		.loc 1 803 0
 3572 0022 8230      		cpi r24,lo8(2)
 3573 0024 01F4      		brne .L233
 3574               	.LVL293:
 805:quantum/rgblight.c ****       effect_func = rgblight_effect_breathing;
 3575               		.loc 1 805 0
 3576 0026 F0E0      		ldi r31,0
 3577 0028 E050      		subi r30,lo8(-(RGBLED_BREATHING_INTERVALS))
 3578 002a F040      		sbci r31,hi8(-(RGBLED_BREATHING_INTERVALS))
 3579               	.LVL294:
 3580               	.LBB169:
 3581               	.LBB170:
 609:quantum/rgblight.c **** }
 3582               		.loc 1 609 0
 3583               	/* #APP */
 3584               	 ;  609 "quantum/rgblight.c" 1
 3585 002c E491      		lpm r30, Z
 3586               		
 3587               	 ;  0 "" 2
 3588               	.LVL295:
 3589               	/* #NOAPP */
 3590               	.LBE170:
 3591               	.LBE169:
 805:quantum/rgblight.c ****       effect_func = rgblight_effect_breathing;
 3592               		.loc 1 805 0
 3593 002e CE2F      		mov r28,r30
 3594 0030 D0E0      		ldi r29,0
 3595               	.LVL296:
 806:quantum/rgblight.c ****     }
 3596               		.loc 1 806 0
 3597 0032 00E0      		ldi r16,lo8(gs(rgblight_effect_breathing))
 3598 0034 10E0      		ldi r17,hi8(gs(rgblight_effect_breathing))
 3599 0036 00C0      		rjmp .L234
 3600               	.LVL297:
 3601               	.L233:
 810:quantum/rgblight.c ****       // rainbow mood mode
 3602               		.loc 1 810 0
 3603 0038 8630      		cpi r24,lo8(6)
 3604 003a 01F4      		brne .L235
 3605               	.LVL298:
 812:quantum/rgblight.c ****       effect_func = rgblight_effect_rainbow_mood;
 3606               		.loc 1 812 0
 3607 003c F0E0      		ldi r31,0
 3608 003e E050      		subi r30,lo8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 3609 0040 F040      		sbci r31,hi8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 3610               	.LVL299:
 3611               	.LBB171:
 3612               	.LBB172:
 609:quantum/rgblight.c **** }
 3613               		.loc 1 609 0
 3614               	/* #APP */
 3615               	 ;  609 "quantum/rgblight.c" 1
 3616 0042 E491      		lpm r30, Z
 3617               		
 3618               	 ;  0 "" 2
 3619               	.LVL300:
 3620               	/* #NOAPP */
 3621               	.LBE172:
 3622               	.LBE171:
 812:quantum/rgblight.c ****       effect_func = rgblight_effect_rainbow_mood;
 3623               		.loc 1 812 0
 3624 0044 CE2F      		mov r28,r30
 3625 0046 D0E0      		ldi r29,0
 3626               	.LVL301:
 813:quantum/rgblight.c ****     }
 3627               		.loc 1 813 0
 3628 0048 00E0      		ldi r16,lo8(gs(rgblight_effect_rainbow_mood))
 3629 004a 10E0      		ldi r17,hi8(gs(rgblight_effect_rainbow_mood))
 3630 004c 00C0      		rjmp .L234
 3631               	.LVL302:
 3632               	.L235:
 817:quantum/rgblight.c ****       // rainbow swirl mode
 3633               		.loc 1 817 0
 3634 004e 8930      		cpi r24,lo8(9)
 3635 0050 01F4      		brne .L236
 3636               	.LVL303:
 819:quantum/rgblight.c ****       effect_func = rgblight_effect_rainbow_swirl;
 3637               		.loc 1 819 0
 3638 0052 E695      		lsr r30
 3639               	.LVL304:
 3640 0054 F0E0      		ldi r31,0
 3641 0056 E050      		subi r30,lo8(-(RGBLED_RAINBOW_SWIRL_INTERVALS))
 3642 0058 F040      		sbci r31,hi8(-(RGBLED_RAINBOW_SWIRL_INTERVALS))
 3643               	.LBB173:
 3644               	.LBB174:
 609:quantum/rgblight.c **** }
 3645               		.loc 1 609 0
 3646               	/* #APP */
 3647               	 ;  609 "quantum/rgblight.c" 1
 3648 005a E491      		lpm r30, Z
 3649               		
 3650               	 ;  0 "" 2
 3651               	.LVL305:
 3652               	/* #NOAPP */
 3653               	.LBE174:
 3654               	.LBE173:
 819:quantum/rgblight.c ****       effect_func = rgblight_effect_rainbow_swirl;
 3655               		.loc 1 819 0
 3656 005c CE2F      		mov r28,r30
 3657 005e D0E0      		ldi r29,0
 3658               	.LVL306:
 820:quantum/rgblight.c ****     }
 3659               		.loc 1 820 0
 3660 0060 00E0      		ldi r16,lo8(gs(rgblight_effect_rainbow_swirl))
 3661 0062 10E0      		ldi r17,hi8(gs(rgblight_effect_rainbow_swirl))
 3662 0064 00C0      		rjmp .L234
 3663               	.LVL307:
 3664               	.L236:
 824:quantum/rgblight.c ****       // snake mode
 3665               		.loc 1 824 0
 3666 0066 8F30      		cpi r24,lo8(15)
 3667 0068 01F4      		brne .L237
 3668               	.LVL308:
 826:quantum/rgblight.c ****       effect_func = rgblight_effect_snake;
 3669               		.loc 1 826 0
 3670 006a E695      		lsr r30
 3671               	.LVL309:
 3672 006c F0E0      		ldi r31,0
 3673 006e E050      		subi r30,lo8(-(RGBLED_SNAKE_INTERVALS))
 3674 0070 F040      		sbci r31,hi8(-(RGBLED_SNAKE_INTERVALS))
 3675               	.LBB175:
 3676               	.LBB176:
 609:quantum/rgblight.c **** }
 3677               		.loc 1 609 0
 3678               	/* #APP */
 3679               	 ;  609 "quantum/rgblight.c" 1
 3680 0072 E491      		lpm r30, Z
 3681               		
 3682               	 ;  0 "" 2
 3683               	.LVL310:
 3684               	/* #NOAPP */
 3685               	.LBE176:
 3686               	.LBE175:
 826:quantum/rgblight.c ****       effect_func = rgblight_effect_snake;
 3687               		.loc 1 826 0
 3688 0074 CE2F      		mov r28,r30
 3689 0076 D0E0      		ldi r29,0
 3690               	.LVL311:
 827:quantum/rgblight.c ****     }
 3691               		.loc 1 827 0
 3692 0078 00E0      		ldi r16,lo8(gs(rgblight_effect_snake))
 3693 007a 10E0      		ldi r17,hi8(gs(rgblight_effect_snake))
 3694 007c 00C0      		rjmp .L234
 3695               	.LVL312:
 3696               	.L237:
 831:quantum/rgblight.c ****       // knight mode
 3697               		.loc 1 831 0
 3698 007e 8531      		cpi r24,lo8(21)
 3699 0080 01F4      		brne .L238
 3700               	.LVL313:
 833:quantum/rgblight.c ****       effect_func = rgblight_effect_knight;
 3701               		.loc 1 833 0
 3702 0082 F0E0      		ldi r31,0
 3703 0084 E050      		subi r30,lo8(-(RGBLED_KNIGHT_INTERVALS))
 3704 0086 F040      		sbci r31,hi8(-(RGBLED_KNIGHT_INTERVALS))
 3705               	.LVL314:
 3706               	.LBB177:
 3707               	.LBB178:
 609:quantum/rgblight.c **** }
 3708               		.loc 1 609 0
 3709               	/* #APP */
 3710               	 ;  609 "quantum/rgblight.c" 1
 3711 0088 E491      		lpm r30, Z
 3712               		
 3713               	 ;  0 "" 2
 3714               	.LVL315:
 3715               	/* #NOAPP */
 3716               	.LBE178:
 3717               	.LBE177:
 833:quantum/rgblight.c ****       effect_func = rgblight_effect_knight;
 3718               		.loc 1 833 0
 3719 008a CE2F      		mov r28,r30
 3720 008c D0E0      		ldi r29,0
 3721               	.LVL316:
 834:quantum/rgblight.c ****     }
 3722               		.loc 1 834 0
 3723 008e 00E0      		ldi r16,lo8(gs(rgblight_effect_knight))
 3724 0090 10E0      		ldi r17,hi8(gs(rgblight_effect_knight))
 3725 0092 00C0      		rjmp .L234
 3726               	.LVL317:
 3727               	.L238:
 838:quantum/rgblight.c ****       // christmas mode
 3728               		.loc 1 838 0
 3729 0094 8831      		cpi r24,lo8(24)
 3730 0096 01F0      		breq .L242
 845:quantum/rgblight.c ****       // RGB test mode
 3731               		.loc 1 845 0
 3732 0098 8332      		cpi r24,lo8(35)
 3733 009a 01F4      		brne .L239
 3734               	.LVL318:
 3735               	.LBB179:
 847:quantum/rgblight.c ****       effect_func = (effect_func_t)rgblight_effect_rgbtest;
 3736               		.loc 1 847 0
 3737 009c E0E0      		ldi r30,lo8(RGBLED_RGBTEST_INTERVALS)
 3738 009e F0E0      		ldi r31,hi8(RGBLED_RGBTEST_INTERVALS)
 3739               	.LVL319:
 3740               	/* #APP */
 3741               	 ;  847 "quantum/rgblight.c" 1
 3742 00a0 C591      		lpm r28, Z+
 3743 00a2 D491      		lpm r29, Z
 3744               		
 3745               	 ;  0 "" 2
 3746               	.LVL320:
 3747               	/* #NOAPP */
 3748               	.LBE179:
 848:quantum/rgblight.c ****     }
 3749               		.loc 1 848 0
 3750 00a4 00E0      		ldi r16,lo8(gs(rgblight_effect_rgbtest))
 3751 00a6 10E0      		ldi r17,hi8(gs(rgblight_effect_rgbtest))
 3752 00a8 00C0      		rjmp .L234
 3753               	.LVL321:
 3754               	.L239:
 852:quantum/rgblight.c ****       interval_time = 500;
 3755               		.loc 1 852 0
 3756 00aa 8432      		cpi r24,lo8(36)
 3757 00ac 01F4      		brne .L243
 853:quantum/rgblight.c ****       effect_func = (effect_func_t)rgblight_effect_alternating;
 3758               		.loc 1 853 0
 3759 00ae C4EF      		ldi r28,lo8(-12)
 3760 00b0 D1E0      		ldi r29,lo8(1)
 854:quantum/rgblight.c ****     }
 3761               		.loc 1 854 0
 3762 00b2 00E0      		ldi r16,lo8(gs(rgblight_effect_alternating))
 3763 00b4 10E0      		ldi r17,hi8(gs(rgblight_effect_alternating))
 3764 00b6 00C0      		rjmp .L234
 3765               	.L242:
 840:quantum/rgblight.c ****       effect_func = (effect_func_t)rgblight_effect_christmas;
 3766               		.loc 1 840 0
 3767 00b8 C8EE      		ldi r28,lo8(-24)
 3768 00ba D3E0      		ldi r29,lo8(3)
 841:quantum/rgblight.c ****     }
 3769               		.loc 1 841 0
 3770 00bc 00E0      		ldi r16,lo8(gs(rgblight_effect_christmas))
 3771 00be 10E0      		ldi r17,hi8(gs(rgblight_effect_christmas))
 3772 00c0 00C0      		rjmp .L234
 3773               	.L243:
 795:quantum/rgblight.c ****     uint8_t delta = rgblight_config.mode - rgblight_status.base_mode;
 3774               		.loc 1 795 0
 3775 00c2 C0ED      		ldi r28,lo8(-48)
 3776 00c4 D7E0      		ldi r29,lo8(7)
 794:quantum/rgblight.c ****     uint16_t interval_time = 2000; // dummy interval
 3777               		.loc 1 794 0
 3778 00c6 00E0      		ldi r16,lo8(gs(rgblight_effect_dummy))
 3779 00c8 10E0      		ldi r17,hi8(gs(rgblight_effect_dummy))
 3780               	.LVL322:
 3781               	.L234:
 857:quantum/rgblight.c ****       animation_status.restart = false;
 3782               		.loc 1 857 0
 3783 00ca 8091 0000 		lds r24,animation_status+3
 3784 00ce 8823      		tst r24
 3785 00d0 01F0      		breq .L240
 858:quantum/rgblight.c ****       animation_status.last_timer = timer_read() - interval_time - 1;
 3786               		.loc 1 858 0
 3787 00d2 1092 0000 		sts animation_status+3,__zero_reg__
 859:quantum/rgblight.c ****       animation_status.pos16 = 0; // restart signal to local each effect
 3788               		.loc 1 859 0
 3789 00d6 0E94 0000 		call timer_read
 3790               	.LVL323:
 3791 00da 9E01      		movw r18,r28
 3792 00dc 2095      		com r18
 3793 00de 3095      		com r19
 3794 00e0 820F      		add r24,r18
 3795 00e2 931F      		adc r25,r19
 3796 00e4 9093 0000 		sts animation_status+1,r25
 3797 00e8 8093 0000 		sts animation_status,r24
 860:quantum/rgblight.c ****     }
 3798               		.loc 1 860 0
 3799 00ec 1092 0000 		sts animation_status+4+1,__zero_reg__
 3800 00f0 1092 0000 		sts animation_status+4,__zero_reg__
 3801               	.L240:
 862:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 3802               		.loc 1 862 0
 3803 00f4 8091 0000 		lds r24,animation_status
 3804 00f8 9091 0000 		lds r25,animation_status+1
 3805 00fc 0E94 0000 		call timer_elapsed
 3806               	.LVL324:
 3807 0100 8C17      		cp r24,r28
 3808 0102 9D07      		cpc r25,r29
 3809 0104 00F0      		brlo .L230
 879:quantum/rgblight.c ****       effect_func(&animation_status);
 3810               		.loc 1 879 0
 3811 0106 E091 0000 		lds r30,animation_status
 3812 010a F091 0000 		lds r31,animation_status+1
 3813 010e CE0F      		add r28,r30
 3814 0110 DF1F      		adc r29,r31
 3815               	.LVL325:
 3816 0112 D093 0000 		sts animation_status+1,r29
 3817 0116 C093 0000 		sts animation_status,r28
 880:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 3818               		.loc 1 880 0
 3819 011a 80E0      		ldi r24,lo8(animation_status)
 3820 011c 90E0      		ldi r25,hi8(animation_status)
 3821 011e F801      		movw r30,r16
 3822               	/* epilogue start */
 3823               	.LBE168:
 891:quantum/rgblight.c **** 
 3824               		.loc 1 891 0
 3825 0120 DF91      		pop r29
 3826 0122 CF91      		pop r28
 3827 0124 1F91      		pop r17
 3828 0126 0F91      		pop r16
 3829               	.LVL326:
 3830               	.LBB180:
 880:quantum/rgblight.c **** #if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 3831               		.loc 1 880 0
 3832 0128 0994      		ijmp
 3833               	.LVL327:
 3834               	.L230:
 3835               	/* epilogue start */
 3836               	.LBE180:
 891:quantum/rgblight.c **** 
 3837               		.loc 1 891 0
 3838 012a DF91      		pop r29
 3839 012c CF91      		pop r28
 3840 012e 1F91      		pop r17
 3841 0130 0F91      		pop r16
 3842 0132 0895      		ret
 3843               		.cfi_endproc
 3844               	.LFE155:
 3846               		.section	.bss.maxval.3282,"aw",@nobits
 3849               	maxval.3282:
 3850 0000 00        		.zero	1
 3851               		.section	.data.increment.3261,"aw",@progbits
 3854               	increment.3261:
 3855 0000 01        		.byte	1
 3856               		.section	.data.high_bound.3260,"aw",@progbits
 3859               	high_bound.3260:
 3860 0000 02        		.byte	2
 3861               		.section	.bss.low_bound.3259,"aw",@nobits
 3864               	low_bound.3259:
 3865 0000 00        		.zero	1
 3866               		.section	.bss.pos.3243,"aw",@nobits
 3869               	pos.3243:
 3870 0000 00        		.zero	1
 3871               		.weak	RGBLED_RGBTEST_INTERVALS
 3872               		.section	.progmem.data.RGBLED_RGBTEST_INTERVALS,"a",@progbits
 3875               	RGBLED_RGBTEST_INTERVALS:
 3876 0000 0004      		.word	1024
 3877               		.weak	RGBLED_KNIGHT_INTERVALS
 3878               		.section	.progmem.data.RGBLED_KNIGHT_INTERVALS,"a",@progbits
 3881               	RGBLED_KNIGHT_INTERVALS:
 3882 0000 7F        		.byte	127
 3883 0001 3F        		.byte	63
 3884 0002 1F        		.byte	31
 3885               		.weak	RGBLED_SNAKE_INTERVALS
 3886               		.section	.progmem.data.RGBLED_SNAKE_INTERVALS,"a",@progbits
 3889               	RGBLED_SNAKE_INTERVALS:
 3890 0000 64        		.byte	100
 3891 0001 32        		.byte	50
 3892 0002 14        		.byte	20
 3893               		.weak	RGBLED_RAINBOW_SWIRL_INTERVALS
 3894               		.section	.progmem.data.RGBLED_RAINBOW_SWIRL_INTERVALS,"a",@progbits
 3897               	RGBLED_RAINBOW_SWIRL_INTERVALS:
 3898 0000 64        		.byte	100
 3899 0001 32        		.byte	50
 3900 0002 14        		.byte	20
 3901               		.weak	RGBLED_RAINBOW_MOOD_INTERVALS
 3902               		.section	.progmem.data.RGBLED_RAINBOW_MOOD_INTERVALS,"a",@progbits
 3905               	RGBLED_RAINBOW_MOOD_INTERVALS:
 3906 0000 78        		.byte	120
 3907 0001 3C        		.byte	60
 3908 0002 1E        		.byte	30
 3909               		.weak	RGBLED_BREATHING_INTERVALS
 3910               		.section	.progmem.data.RGBLED_BREATHING_INTERVALS,"a",@progbits
 3913               	RGBLED_BREATHING_INTERVALS:
 3914 0000 1E        		.byte	30
 3915 0001 14        		.byte	20
 3916 0002 0A        		.byte	10
 3917 0003 05        		.byte	5
 3918               	.global	rgblight_effect_breathe_table
 3919               		.section	.progmem.data.rgblight_effect_breathe_table,"a",@progbits
 3922               	rgblight_effect_breathe_table:
 3923 0000 22        		.byte	34
 3924 0001 23        		.byte	35
 3925 0002 25        		.byte	37
 3926 0003 26        		.byte	38
 3927 0004 28        		.byte	40
 3928 0005 29        		.byte	41
 3929 0006 2A        		.byte	42
 3930 0007 2C        		.byte	44
 3931 0008 2D        		.byte	45
 3932 0009 2F        		.byte	47
 3933 000a 30        		.byte	48
 3934 000b 32        		.byte	50
 3935 000c 33        		.byte	51
 3936 000d 35        		.byte	53
 3937 000e 36        		.byte	54
 3938 000f 38        		.byte	56
 3939 0010 3A        		.byte	58
 3940 0011 3B        		.byte	59
 3941 0012 3D        		.byte	61
 3942 0013 3E        		.byte	62
 3943 0014 40        		.byte	64
 3944 0015 42        		.byte	66
 3945 0016 43        		.byte	67
 3946 0017 45        		.byte	69
 3947 0018 47        		.byte	71
 3948 0019 49        		.byte	73
 3949 001a 4A        		.byte	74
 3950 001b 4C        		.byte	76
 3951 001c 4E        		.byte	78
 3952 001d 50        		.byte	80
 3953 001e 51        		.byte	81
 3954 001f 53        		.byte	83
 3955 0020 55        		.byte	85
 3956 0021 57        		.byte	87
 3957 0022 59        		.byte	89
 3958 0023 5A        		.byte	90
 3959 0024 5C        		.byte	92
 3960 0025 5E        		.byte	94
 3961 0026 60        		.byte	96
 3962 0027 62        		.byte	98
 3963 0028 64        		.byte	100
 3964 0029 66        		.byte	102
 3965 002a 68        		.byte	104
 3966 002b 69        		.byte	105
 3967 002c 6B        		.byte	107
 3968 002d 6D        		.byte	109
 3969 002e 6F        		.byte	111
 3970 002f 71        		.byte	113
 3971 0030 73        		.byte	115
 3972 0031 75        		.byte	117
 3973 0032 77        		.byte	119
 3974 0033 79        		.byte	121
 3975 0034 7B        		.byte	123
 3976 0035 7D        		.byte	125
 3977 0036 7F        		.byte	127
 3978 0037 81        		.byte	-127
 3979 0038 83        		.byte	-125
 3980 0039 85        		.byte	-123
 3981 003a 87        		.byte	-121
 3982 003b 89        		.byte	-119
 3983 003c 8A        		.byte	-118
 3984 003d 8C        		.byte	-116
 3985 003e 8E        		.byte	-114
 3986 003f 90        		.byte	-112
 3987 0040 92        		.byte	-110
 3988 0041 94        		.byte	-108
 3989 0042 96        		.byte	-106
 3990 0043 98        		.byte	-104
 3991 0044 9A        		.byte	-102
 3992 0045 9C        		.byte	-100
 3993 0046 9E        		.byte	-98
 3994 0047 9F        		.byte	-97
 3995 0048 A1        		.byte	-95
 3996 0049 A3        		.byte	-93
 3997 004a A5        		.byte	-91
 3998 004b A7        		.byte	-89
 3999 004c A8        		.byte	-88
 4000 004d AA        		.byte	-86
 4001 004e AC        		.byte	-84
 4002 004f AE        		.byte	-82
 4003 0050 AF        		.byte	-81
 4004 0051 B1        		.byte	-79
 4005 0052 B3        		.byte	-77
 4006 0053 B4        		.byte	-76
 4007 0054 B6        		.byte	-74
 4008 0055 B8        		.byte	-72
 4009 0056 B9        		.byte	-71
 4010 0057 BB        		.byte	-69
 4011 0058 BC        		.byte	-68
 4012 0059 BE        		.byte	-66
 4013 005a BF        		.byte	-65
 4014 005b C1        		.byte	-63
 4015 005c C2        		.byte	-62
 4016 005d C3        		.byte	-61
 4017 005e C5        		.byte	-59
 4018 005f C6        		.byte	-58
 4019 0060 C7        		.byte	-57
 4020 0061 C9        		.byte	-55
 4021 0062 CA        		.byte	-54
 4022 0063 CB        		.byte	-53
 4023 0064 CC        		.byte	-52
 4024 0065 CD        		.byte	-51
 4025 0066 CE        		.byte	-50
 4026 0067 D0        		.byte	-48
 4027 0068 D1        		.byte	-47
 4028 0069 D2        		.byte	-46
 4029 006a D2        		.byte	-46
 4030 006b D3        		.byte	-45
 4031 006c D4        		.byte	-44
 4032 006d D5        		.byte	-43
 4033 006e D6        		.byte	-42
 4034 006f D7        		.byte	-41
 4035 0070 D7        		.byte	-41
 4036 0071 D8        		.byte	-40
 4037 0072 D9        		.byte	-39
 4038 0073 D9        		.byte	-39
 4039 0074 DA        		.byte	-38
 4040 0075 DA        		.byte	-38
 4041 0076 DB        		.byte	-37
 4042 0077 DB        		.byte	-37
 4043 0078 DB        		.byte	-37
 4044 0079 DC        		.byte	-36
 4045 007a DC        		.byte	-36
 4046 007b DC        		.byte	-36
 4047 007c DC        		.byte	-36
 4048 007d DC        		.byte	-36
 4049 007e DD        		.byte	-35
 4050 007f DD        		.byte	-35
 4051 0080 DD        		.byte	-35
 4052 0081 DD        		.byte	-35
 4053 0082 DC        		.byte	-36
 4054 0083 DC        		.byte	-36
 4055 0084 DC        		.byte	-36
 4056 0085 DC        		.byte	-36
 4057 0086 DC        		.byte	-36
 4058 0087 DB        		.byte	-37
 4059 0088 DB        		.byte	-37
 4060 0089 DB        		.byte	-37
 4061 008a DA        		.byte	-38
 4062 008b DA        		.byte	-38
 4063 008c D9        		.byte	-39
 4064 008d D9        		.byte	-39
 4065 008e D8        		.byte	-40
 4066 008f D7        		.byte	-41
 4067 0090 D7        		.byte	-41
 4068 0091 D6        		.byte	-42
 4069 0092 D5        		.byte	-43
 4070 0093 D4        		.byte	-44
 4071 0094 D3        		.byte	-45
 4072 0095 D2        		.byte	-46
 4073 0096 D2        		.byte	-46
 4074 0097 D1        		.byte	-47
 4075 0098 D0        		.byte	-48
 4076 0099 CE        		.byte	-50
 4077 009a CD        		.byte	-51
 4078 009b CC        		.byte	-52
 4079 009c CB        		.byte	-53
 4080 009d CA        		.byte	-54
 4081 009e C9        		.byte	-55
 4082 009f C7        		.byte	-57
 4083 00a0 C6        		.byte	-58
 4084 00a1 C5        		.byte	-59
 4085 00a2 C3        		.byte	-61
 4086 00a3 C2        		.byte	-62
 4087 00a4 C1        		.byte	-63
 4088 00a5 BF        		.byte	-65
 4089 00a6 BE        		.byte	-66
 4090 00a7 BC        		.byte	-68
 4091 00a8 BB        		.byte	-69
 4092 00a9 B9        		.byte	-71
 4093 00aa B8        		.byte	-72
 4094 00ab B6        		.byte	-74
 4095 00ac B4        		.byte	-76
 4096 00ad B3        		.byte	-77
 4097 00ae B1        		.byte	-79
 4098 00af AF        		.byte	-81
 4099 00b0 AE        		.byte	-82
 4100 00b1 AC        		.byte	-84
 4101 00b2 AA        		.byte	-86
 4102 00b3 A8        		.byte	-88
 4103 00b4 A7        		.byte	-89
 4104 00b5 A5        		.byte	-91
 4105 00b6 A3        		.byte	-93
 4106 00b7 A1        		.byte	-95
 4107 00b8 9F        		.byte	-97
 4108 00b9 9E        		.byte	-98
 4109 00ba 9C        		.byte	-100
 4110 00bb 9A        		.byte	-102
 4111 00bc 98        		.byte	-104
 4112 00bd 96        		.byte	-106
 4113 00be 94        		.byte	-108
 4114 00bf 92        		.byte	-110
 4115 00c0 90        		.byte	-112
 4116 00c1 8E        		.byte	-114
 4117 00c2 8C        		.byte	-116
 4118 00c3 8A        		.byte	-118
 4119 00c4 89        		.byte	-119
 4120 00c5 87        		.byte	-121
 4121 00c6 85        		.byte	-123
 4122 00c7 83        		.byte	-125
 4123 00c8 81        		.byte	-127
 4124 00c9 7F        		.byte	127
 4125 00ca 7D        		.byte	125
 4126 00cb 7B        		.byte	123
 4127 00cc 79        		.byte	121
 4128 00cd 77        		.byte	119
 4129 00ce 75        		.byte	117
 4130 00cf 73        		.byte	115
 4131 00d0 71        		.byte	113
 4132 00d1 6F        		.byte	111
 4133 00d2 6D        		.byte	109
 4134 00d3 6B        		.byte	107
 4135 00d4 69        		.byte	105
 4136 00d5 68        		.byte	104
 4137 00d6 66        		.byte	102
 4138 00d7 64        		.byte	100
 4139 00d8 62        		.byte	98
 4140 00d9 60        		.byte	96
 4141 00da 5E        		.byte	94
 4142 00db 5C        		.byte	92
 4143 00dc 5A        		.byte	90
 4144 00dd 59        		.byte	89
 4145 00de 57        		.byte	87
 4146 00df 55        		.byte	85
 4147 00e0 53        		.byte	83
 4148 00e1 51        		.byte	81
 4149 00e2 50        		.byte	80
 4150 00e3 4E        		.byte	78
 4151 00e4 4C        		.byte	76
 4152 00e5 4A        		.byte	74
 4153 00e6 49        		.byte	73
 4154 00e7 47        		.byte	71
 4155 00e8 45        		.byte	69
 4156 00e9 43        		.byte	67
 4157 00ea 42        		.byte	66
 4158 00eb 40        		.byte	64
 4159 00ec 3E        		.byte	62
 4160 00ed 3D        		.byte	61
 4161 00ee 3B        		.byte	59
 4162 00ef 3A        		.byte	58
 4163 00f0 38        		.byte	56
 4164 00f1 36        		.byte	54
 4165 00f2 35        		.byte	53
 4166 00f3 33        		.byte	51
 4167 00f4 32        		.byte	50
 4168 00f5 30        		.byte	48
 4169 00f6 2F        		.byte	47
 4170 00f7 2D        		.byte	45
 4171 00f8 2C        		.byte	44
 4172 00f9 2A        		.byte	42
 4173 00fa 29        		.byte	41
 4174 00fb 28        		.byte	40
 4175 00fc 26        		.byte	38
 4176 00fd 25        		.byte	37
 4177 00fe 23        		.byte	35
 4178 00ff 22        		.byte	34
 4179               		.section	.data.effect_num_leds,"aw",@progbits
 4182               	effect_num_leds:
 4183 0000 04        		.byte	4
 4184               		.section	.data.effect_end_pos,"aw",@progbits
 4187               	effect_end_pos:
 4188 0000 04        		.byte	4
 4189               		.section	.bss.effect_start_pos,"aw",@nobits
 4192               	effect_start_pos:
 4193 0000 00        		.zero	1
 4194               		.section	.data.clipping_num_leds,"aw",@progbits
 4197               	clipping_num_leds:
 4198 0000 04        		.byte	4
 4199               		.section	.bss.clipping_start_pos,"aw",@nobits
 4202               	clipping_start_pos:
 4203 0000 00        		.zero	1
 4204               		.comm	led,12,1
 4205               	.global	animation_status
 4206               		.section	.bss.animation_status,"aw",@nobits
 4209               	animation_status:
 4210 0000 0000 0000 		.zero	6
 4210      0000 
 4211               	.global	is_rgblight_initialized
 4212               		.section	.bss.is_rgblight_initialized,"aw",@nobits
 4215               	is_rgblight_initialized:
 4216 0000 00        		.zero	1
 4217               	.global	rgblight_status
 4218               		.section	.bss.rgblight_status,"aw",@nobits
 4221               	rgblight_status:
 4222 0000 0000      		.zero	2
 4223               		.comm	rgblight_config,5,1
 4224               		.weak	RGBLED_GRADIENT_RANGES
 4225               		.section	.progmem.data.RGBLED_GRADIENT_RANGES,"a",@progbits
 4228               	RGBLED_GRADIENT_RANGES:
 4229 0000 FF        		.byte	-1
 4230 0001 AA        		.byte	-86
 4231 0002 7F        		.byte	127
 4232 0003 55        		.byte	85
 4233 0004 40        		.byte	64
 4234               		.section	.rodata.mode_base_table,"a",@progbits
 4237               	mode_base_table:
 4238 0000 00        		.byte	0
 4239 0001 01        		.byte	1
 4240 0002 02        		.byte	2
 4241 0003 02        		.byte	2
 4242 0004 02        		.byte	2
 4243 0005 02        		.byte	2
 4244 0006 06        		.byte	6
 4245 0007 06        		.byte	6
 4246 0008 06        		.byte	6
 4247 0009 09        		.byte	9
 4248 000a 09        		.byte	9
 4249 000b 09        		.byte	9
 4250 000c 09        		.byte	9
 4251 000d 09        		.byte	9
 4252 000e 09        		.byte	9
 4253 000f 0F        		.byte	15
 4254 0010 0F        		.byte	15
 4255 0011 0F        		.byte	15
 4256 0012 0F        		.byte	15
 4257 0013 0F        		.byte	15
 4258 0014 0F        		.byte	15
 4259 0015 15        		.byte	21
 4260 0016 15        		.byte	21
 4261 0017 15        		.byte	21
 4262 0018 18        		.byte	24
 4263 0019 19        		.byte	25
 4264 001a 19        		.byte	25
 4265 001b 19        		.byte	25
 4266 001c 19        		.byte	25
 4267 001d 19        		.byte	25
 4268 001e 19        		.byte	25
 4269 001f 19        		.byte	25
 4270 0020 19        		.byte	25
 4271 0021 19        		.byte	25
 4272 0022 19        		.byte	25
 4273 0023 23        		.byte	35
 4274 0024 24        		.byte	36
 4275               		.section	.data.static_effect_table,"aw",@progbits
 4278               	static_effect_table:
 4279 0000 01        		.byte	1
 4280 0001 19        		.byte	25
 4281 0002 1A        		.byte	26
 4282 0003 1B        		.byte	27
 4283 0004 1C        		.byte	28
 4284 0005 1D        		.byte	29
 4285 0006 1E        		.byte	30
 4286 0007 1F        		.byte	31
 4287 0008 20        		.byte	32
 4288 0009 21        		.byte	33
 4289 000a 22        		.byte	34
 4290               		.text
 4291               	.Letext0:
 4292               		.file 4 "c:\\msys64_2\\home\\egypt2\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 4293               		.file 5 "./quantum/color.h"
 4294               		.file 6 "quantum/rgblight.h"
 4295               		.file 7 "tmk_core/common/debug.h"
 4296               		.file 8 "./lib/lib8tion/trig8.h"
 4297               		.file 9 "quantum/rgblight_breathe_table.h"
 4298               		.file 10 "./lib/lib8tion/random8.h"
 4299               		.file 11 "c:\\msys64_2\\home\\egypt2\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\avr\\eeprom.h"
 4300               		.file 12 "drivers/avr/ws2812.h"
 4301               		.file 13 "c:\\msys64_2\\home\\egypt2\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\string.h"
 4302               		.file 14 "tmk_core/common/timer.h"
 4303               		.file 15 "tmk_core/common/eeconfig.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rgblight.c
C:\msys64_2\tmp\ccfLDhDj.s:2      *ABS*:0000003e __SP_H__
C:\msys64_2\tmp\ccfLDhDj.s:3      *ABS*:0000003d __SP_L__
C:\msys64_2\tmp\ccfLDhDj.s:4      *ABS*:0000003f __SREG__
C:\msys64_2\tmp\ccfLDhDj.s:5      *ABS*:00000000 __tmp_reg__
C:\msys64_2\tmp\ccfLDhDj.s:6      *ABS*:00000001 __zero_reg__
C:\msys64_2\tmp\ccfLDhDj.s:12     .text.rgblight_effect_dummy:00000000 rgblight_effect_dummy
C:\msys64_2\tmp\ccfLDhDj.s:29     .text.rgblight_set_clipping_range:00000000 rgblight_set_clipping_range
C:\msys64_2\tmp\ccfLDhDj.s:4202   .bss.clipping_start_pos:00000000 clipping_start_pos
C:\msys64_2\tmp\ccfLDhDj.s:4197   .data.clipping_num_leds:00000000 clipping_num_leds
C:\msys64_2\tmp\ccfLDhDj.s:49     .text.rgblight_set_effect_range:00000000 rgblight_set_effect_range
C:\msys64_2\tmp\ccfLDhDj.s:4192   .bss.effect_start_pos:00000000 effect_start_pos
C:\msys64_2\tmp\ccfLDhDj.s:4187   .data.effect_end_pos:00000000 effect_end_pos
C:\msys64_2\tmp\ccfLDhDj.s:4182   .data.effect_num_leds:00000000 effect_num_leds
C:\msys64_2\tmp\ccfLDhDj.s:86     .text.sethsv_raw:00000000 sethsv_raw
C:\msys64_2\tmp\ccfLDhDj.s:135    .text.sethsv:00000000 sethsv
C:\msys64_2\tmp\ccfLDhDj.s:153    .text.setrgb:00000000 setrgb
C:\msys64_2\tmp\ccfLDhDj.s:176    .text.rgblight_check_config:00000000 rgblight_check_config
                            *COM*:00000005 rgblight_config
C:\msys64_2\tmp\ccfLDhDj.s:214    .text.eeconfig_read_rgblight:00000000 eeconfig_read_rgblight
C:\msys64_2\tmp\ccfLDhDj.s:233    .text.eeconfig_update_rgblight:00000000 eeconfig_update_rgblight
C:\msys64_2\tmp\ccfLDhDj.s:284    .text.eeconfig_update_rgblight_default:00000000 eeconfig_update_rgblight_default
C:\msys64_2\tmp\ccfLDhDj.s:320    .text.eeconfig_debug_rgblight:00000000 eeconfig_debug_rgblight
C:\msys64_2\tmp\ccfLDhDj.s:335    .text.rgblight_read_dword:00000000 rgblight_read_dword
C:\msys64_2\tmp\ccfLDhDj.s:356    .text.rgblight_get_mode:00000000 rgblight_get_mode
C:\msys64_2\tmp\ccfLDhDj.s:382    .text.rgblight_increase_speed:00000000 rgblight_increase_speed
C:\msys64_2\tmp\ccfLDhDj.s:411    .text.rgblight_decrease_speed:00000000 rgblight_decrease_speed
C:\msys64_2\tmp\ccfLDhDj.s:440    .text.rgblight_get_hue:00000000 rgblight_get_hue
C:\msys64_2\tmp\ccfLDhDj.s:457    .text.rgblight_get_sat:00000000 rgblight_get_sat
C:\msys64_2\tmp\ccfLDhDj.s:474    .text.rgblight_get_val:00000000 rgblight_get_val
C:\msys64_2\tmp\ccfLDhDj.s:491    .text.rgblight_set:00000000 rgblight_set
                            *COM*:0000000c led
C:\msys64_2\tmp\ccfLDhDj.s:557    .text.rgblight_setrgb:00000000 rgblight_setrgb
C:\msys64_2\tmp\ccfLDhDj.s:611    .text.rgblight_sethsv_noeeprom_old:00000000 rgblight_sethsv_noeeprom_old
C:\msys64_2\tmp\ccfLDhDj.s:674    .text.rgblight_effect_breathing:00000000 rgblight_effect_breathing
C:\msys64_2\tmp\ccfLDhDj.s:3922   .progmem.data.rgblight_effect_breathe_table:00000000 rgblight_effect_breathe_table
C:\msys64_2\tmp\ccfLDhDj.s:731    .text.rgblight_effect_rainbow_mood:00000000 rgblight_effect_rainbow_mood
C:\msys64_2\tmp\ccfLDhDj.s:774    .text.rgblight_effect_rgbtest:00000000 rgblight_effect_rgbtest
C:\msys64_2\tmp\ccfLDhDj.s:3849   .bss.maxval.3282:00000000 maxval.3282
C:\msys64_2\tmp\ccfLDhDj.s:904    .text.rgblight_sethsv_eeprom_helper:00000000 rgblight_sethsv_eeprom_helper
C:\msys64_2\tmp\ccfLDhDj.s:4237   .rodata.mode_base_table:00000000 mode_base_table
C:\msys64_2\tmp\ccfLDhDj.s:4221   .bss.rgblight_status:00000000 rgblight_status
C:\msys64_2\tmp\ccfLDhDj.s:4228   .progmem.data.RGBLED_GRADIENT_RANGES:00000000 RGBLED_GRADIENT_RANGES
C:\msys64_2\tmp\ccfLDhDj.s:1172   .text.rgblight_increase_hue_helper:00000000 rgblight_increase_hue_helper
C:\msys64_2\tmp\ccfLDhDj.s:1200   .text.rgblight_increase_hue_noeeprom:00000000 rgblight_increase_hue_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:1218   .text.rgblight_increase_hue:00000000 rgblight_increase_hue
C:\msys64_2\tmp\ccfLDhDj.s:1236   .text.rgblight_decrease_hue_helper:00000000 rgblight_decrease_hue_helper
C:\msys64_2\tmp\ccfLDhDj.s:1264   .text.rgblight_decrease_hue_noeeprom:00000000 rgblight_decrease_hue_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:1282   .text.rgblight_decrease_hue:00000000 rgblight_decrease_hue
C:\msys64_2\tmp\ccfLDhDj.s:1300   .text.rgblight_increase_sat_helper:00000000 rgblight_increase_sat_helper
C:\msys64_2\tmp\ccfLDhDj.s:1323   .text.rgblight_increase_sat_helper:0000000e L_1112
C:\msys64_2\tmp\ccfLDhDj.s:1342   .text.rgblight_increase_sat_noeeprom:00000000 rgblight_increase_sat_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:1360   .text.rgblight_increase_sat:00000000 rgblight_increase_sat
C:\msys64_2\tmp\ccfLDhDj.s:1378   .text.rgblight_decrease_sat_helper:00000000 rgblight_decrease_sat_helper
C:\msys64_2\tmp\ccfLDhDj.s:1400   .text.rgblight_decrease_sat_helper:0000000e L_1156
C:\msys64_2\tmp\ccfLDhDj.s:1419   .text.rgblight_decrease_sat_noeeprom:00000000 rgblight_decrease_sat_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:1437   .text.rgblight_decrease_sat:00000000 rgblight_decrease_sat
C:\msys64_2\tmp\ccfLDhDj.s:1455   .text.rgblight_increase_val_helper:00000000 rgblight_increase_val_helper
C:\msys64_2\tmp\ccfLDhDj.s:1477   .text.rgblight_increase_val_helper:0000000e L_1200
C:\msys64_2\tmp\ccfLDhDj.s:1496   .text.rgblight_increase_val_noeeprom:00000000 rgblight_increase_val_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:1514   .text.rgblight_increase_val:00000000 rgblight_increase_val
C:\msys64_2\tmp\ccfLDhDj.s:1532   .text.rgblight_decrease_val_helper:00000000 rgblight_decrease_val_helper
C:\msys64_2\tmp\ccfLDhDj.s:1554   .text.rgblight_decrease_val_helper:0000000e L_1244
C:\msys64_2\tmp\ccfLDhDj.s:1573   .text.rgblight_decrease_val_noeeprom:00000000 rgblight_decrease_val_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:1591   .text.rgblight_decrease_val:00000000 rgblight_decrease_val
C:\msys64_2\tmp\ccfLDhDj.s:1609   .text.rgblight_sethsv:00000000 rgblight_sethsv
C:\msys64_2\tmp\ccfLDhDj.s:1628   .text.rgblight_sethsv_noeeprom:00000000 rgblight_sethsv_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:1647   .text.rgblight_setrgb_at:00000000 rgblight_setrgb_at
C:\msys64_2\tmp\ccfLDhDj.s:1690   .text.rgblight_sethsv_at:00000000 rgblight_sethsv_at
C:\msys64_2\tmp\ccfLDhDj.s:1759   .text.rgblight_setrgb_range:00000000 rgblight_setrgb_range
C:\msys64_2\tmp\ccfLDhDj.s:1834   .text.rgblight_sethsv_range:00000000 rgblight_sethsv_range
C:\msys64_2\tmp\ccfLDhDj.s:1909   .text.rgblight_sethsv_master:00000000 rgblight_sethsv_master
C:\msys64_2\tmp\ccfLDhDj.s:1937   .text.rgblight_sethsv_slave:00000000 rgblight_sethsv_slave
C:\msys64_2\tmp\ccfLDhDj.s:1965   .text.rgblight_setrgb_master:00000000 rgblight_setrgb_master
C:\msys64_2\tmp\ccfLDhDj.s:1993   .text.rgblight_setrgb_slave:00000000 rgblight_setrgb_slave
C:\msys64_2\tmp\ccfLDhDj.s:2021   .text.rgblight_effect_rainbow_swirl:00000000 rgblight_effect_rainbow_swirl
C:\msys64_2\tmp\ccfLDhDj.s:2136   .text.rgblight_effect_snake:00000000 rgblight_effect_snake
C:\msys64_2\tmp\ccfLDhDj.s:3869   .bss.pos.3243:00000000 pos.3243
C:\msys64_2\tmp\ccfLDhDj.s:2333   .text.rgblight_effect_knight:00000000 rgblight_effect_knight
C:\msys64_2\tmp\ccfLDhDj.s:3864   .bss.low_bound.3259:00000000 low_bound.3259
C:\msys64_2\tmp\ccfLDhDj.s:3859   .data.high_bound.3260:00000000 high_bound.3260
C:\msys64_2\tmp\ccfLDhDj.s:3854   .data.increment.3261:00000000 increment.3261
C:\msys64_2\tmp\ccfLDhDj.s:2494   .text.rgblight_effect_christmas:00000000 rgblight_effect_christmas
C:\msys64_2\tmp\ccfLDhDj.s:2601   .text.rgblight_effect_alternating:00000000 rgblight_effect_alternating
C:\msys64_2\tmp\ccfLDhDj.s:2725   .text.rgblight_disable:00000000 rgblight_disable
C:\msys64_2\tmp\ccfLDhDj.s:2777   .text.rgblight_disable_noeeprom:00000000 rgblight_disable_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:2822   .text.rgblight_timer_init:00000000 rgblight_timer_init
C:\msys64_2\tmp\ccfLDhDj.s:2837   .text.rgblight_timer_enable:00000000 rgblight_timer_enable
C:\msys64_2\tmp\ccfLDhDj.s:4278   .data.static_effect_table:00000000 static_effect_table
C:\msys64_2\tmp\ccfLDhDj.s:4209   .bss.animation_status:00000000 animation_status
C:\msys64_2\tmp\ccfLDhDj.s:2880   .text.rgblight_mode_eeprom_helper:00000000 rgblight_mode_eeprom_helper
C:\msys64_2\tmp\ccfLDhDj.s:2973   .text.rgblight_step_helper:00000000 rgblight_step_helper
C:\msys64_2\tmp\ccfLDhDj.s:3007   .text.rgblight_step_noeeprom:00000000 rgblight_step_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:3025   .text.rgblight_step:00000000 rgblight_step
C:\msys64_2\tmp\ccfLDhDj.s:3043   .text.rgblight_step_reverse_helper:00000000 rgblight_step_reverse_helper
C:\msys64_2\tmp\ccfLDhDj.s:3076   .text.rgblight_step_reverse_noeeprom:00000000 rgblight_step_reverse_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:3094   .text.rgblight_step_reverse:00000000 rgblight_step_reverse
C:\msys64_2\tmp\ccfLDhDj.s:3112   .text.rgblight_mode:00000000 rgblight_mode
C:\msys64_2\tmp\ccfLDhDj.s:3131   .text.rgblight_increase:00000000 rgblight_increase
C:\msys64_2\tmp\ccfLDhDj.s:3167   .text.rgblight_decrease:00000000 rgblight_decrease
C:\msys64_2\tmp\ccfLDhDj.s:3203   .text.rgblight_enable:00000000 rgblight_enable
C:\msys64_2\tmp\ccfLDhDj.s:3227   .text.rgblight_toggle:00000000 rgblight_toggle
C:\msys64_2\tmp\ccfLDhDj.s:3251   .text.rgblight_mode_noeeprom:00000000 rgblight_mode_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:3270   .text.rgblight_init:00000000 rgblight_init
C:\msys64_2\tmp\ccfLDhDj.s:4215   .bss.is_rgblight_initialized:00000000 is_rgblight_initialized
C:\msys64_2\tmp\ccfLDhDj.s:3348   .text.rgblight_update_dword:00000000 rgblight_update_dword
C:\msys64_2\tmp\ccfLDhDj.s:3386   .text.rgblight_enable_noeeprom:00000000 rgblight_enable_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:3410   .text.rgblight_toggle_noeeprom:00000000 rgblight_toggle_noeeprom
C:\msys64_2\tmp\ccfLDhDj.s:3434   .text.rgblight_timer_disable:00000000 rgblight_timer_disable
C:\msys64_2\tmp\ccfLDhDj.s:3451   .text.rgblight_timer_toggle:00000000 rgblight_timer_toggle
C:\msys64_2\tmp\ccfLDhDj.s:3480   .text.rgblight_show_solid_color:00000000 rgblight_show_solid_color
C:\msys64_2\tmp\ccfLDhDj.s:3532   .text.rgblight_task:00000000 rgblight_task
C:\msys64_2\tmp\ccfLDhDj.s:3913   .progmem.data.RGBLED_BREATHING_INTERVALS:00000000 RGBLED_BREATHING_INTERVALS
C:\msys64_2\tmp\ccfLDhDj.s:3905   .progmem.data.RGBLED_RAINBOW_MOOD_INTERVALS:00000000 RGBLED_RAINBOW_MOOD_INTERVALS
C:\msys64_2\tmp\ccfLDhDj.s:3897   .progmem.data.RGBLED_RAINBOW_SWIRL_INTERVALS:00000000 RGBLED_RAINBOW_SWIRL_INTERVALS
C:\msys64_2\tmp\ccfLDhDj.s:3889   .progmem.data.RGBLED_SNAKE_INTERVALS:00000000 RGBLED_SNAKE_INTERVALS
C:\msys64_2\tmp\ccfLDhDj.s:3881   .progmem.data.RGBLED_KNIGHT_INTERVALS:00000000 RGBLED_KNIGHT_INTERVALS
C:\msys64_2\tmp\ccfLDhDj.s:3875   .progmem.data.RGBLED_RGBTEST_INTERVALS:00000000 RGBLED_RGBTEST_INTERVALS

UNDEFINED SYMBOLS
hsv_to_rgb
eeprom_read_dword
eeprom_update_dword
ws2812_setleds
__divmodhi4
__udivmodhi4
memchr
timer_read
debug_config
eeconfig_is_enabled
eeconfig_init
timer_elapsed
__do_copy_data
__do_clear_bss

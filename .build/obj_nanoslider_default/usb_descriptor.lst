   1               		.file	"usb_descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_usb_descriptor,"ax",@progbits
  11               	.global	get_usb_descriptor
  13               	get_usb_descriptor:
  14               	.LFB100:
  15               		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****              LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****      Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****   dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****            www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****   software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****   without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****   all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****   permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****   documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****   advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****   software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****   The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****   software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****   and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****   special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****   in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****   arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****   this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** 
  43:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
  44:tmk_core/protocol/usb_descriptor.c **** #define USB_MAX_POWER_CONSUMPTION 500
  45:tmk_core/protocol/usb_descriptor.c **** #endif
  46:tmk_core/protocol/usb_descriptor.c **** 
  47:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
  48:tmk_core/protocol/usb_descriptor.c ****  * HID Report Descriptors
  49:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
  50:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  51:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
  52:tmk_core/protocol/usb_descriptor.c **** #define SHARED_REPORT_STARTED
  53:tmk_core/protocol/usb_descriptor.c **** #else
  54:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] = {
  55:tmk_core/protocol/usb_descriptor.c **** #endif
  56:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  57:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
  58:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  59:tmk_core/protocol/usb_descriptor.c **** #   ifdef KEYBOARD_SHARED_EP
  60:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_KEYBOARD),
  61:tmk_core/protocol/usb_descriptor.c **** #   endif
  62:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
  63:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
  64:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
  65:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  66:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  67:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  68:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  69:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  70:tmk_core/protocol/usb_descriptor.c **** 
  71:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  72:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  73:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),  /* reserved */
  74:tmk_core/protocol/usb_descriptor.c **** 
  75:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
  76:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
  77:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
  78:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  79:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  80:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  81:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  82:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  83:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  84:tmk_core/protocol/usb_descriptor.c **** 
  85:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Keyboard */
  86:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Reserved (no event indicated) */
  87:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF), /* Keyboard Application */
  88:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  89:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  90:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  91:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  92:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  93:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
  94:tmk_core/protocol/usb_descriptor.c **** 
  95:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
  96:tmk_core/protocol/usb_descriptor.c **** };
  97:tmk_core/protocol/usb_descriptor.c **** #endif
  98:tmk_core/protocol/usb_descriptor.c **** 
  99:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE)
 100:tmk_core/protocol/usb_descriptor.c **** 
 101:tmk_core/protocol/usb_descriptor.c **** #   if !defined(MOUSE_SHARED_EP)
 102:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] = {
 103:tmk_core/protocol/usb_descriptor.c **** #   elif !defined(SHARED_REPORT_STARTED)
 104:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 105:tmk_core/protocol/usb_descriptor.c **** #define SHARED_REPORT_STARTED
 106:tmk_core/protocol/usb_descriptor.c **** #   endif
 107:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 108:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02), /* Mouse */
 109:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 110:tmk_core/protocol/usb_descriptor.c **** #   ifdef MOUSE_SHARED_EP
 111:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_MOUSE),
 112:tmk_core/protocol/usb_descriptor.c **** #   endif
 113:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x01), /* Pointer */
 114:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00), /* Physical */
 115:tmk_core/protocol/usb_descriptor.c **** 
 116:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09), /* Button */
 117:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01),  /* Button 1 */
 118:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05),  /* Button 5 */
 119:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 120:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 121:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 122:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 123:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 124:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 125:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 126:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 127:tmk_core/protocol/usb_descriptor.c **** 
 128:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 129:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30), /* Usage X */
 130:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31), /* Usage Y */
 131:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 132:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 133:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 134:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 135:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 136:tmk_core/protocol/usb_descriptor.c **** 
 137:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x38), /* Wheel */
 138:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 139:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 140:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 141:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 142:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 143:tmk_core/protocol/usb_descriptor.c **** 
 144:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 145:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(16, 0x0238), /* AC Pan (Horizontal wheel) */
 146:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 147:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 148:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 149:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 150:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 151:tmk_core/protocol/usb_descriptor.c **** 
 152:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 153:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 154:tmk_core/protocol/usb_descriptor.c **** #   ifndef MOUSE_SHARED_EP
 155:tmk_core/protocol/usb_descriptor.c **** };
 156:tmk_core/protocol/usb_descriptor.c **** #   endif
 157:tmk_core/protocol/usb_descriptor.c **** #endif
 158:tmk_core/protocol/usb_descriptor.c **** 
 159:tmk_core/protocol/usb_descriptor.c **** #if defined(SHARED_EP_ENABLE) && !defined(SHARED_REPORT_STARTED)
 160:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 161:tmk_core/protocol/usb_descriptor.c **** #endif
 162:tmk_core/protocol/usb_descriptor.c **** #   ifdef EXTRAKEY_ENABLE
 163:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 164:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80), /* System Control */
 165:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 166:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 167:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 168:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x0003),
 169:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0081), /* System Power Down */
 170:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x0083), /* System Wake Up */
 171:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 172:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 173:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 174:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 175:tmk_core/protocol/usb_descriptor.c **** 
 176:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 177:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01), /* Consumer Control */
 178:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 179:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 180:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 181:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 182:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), /* +10 */
 183:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x029C), /* AC Distribute Vertically */
 184:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 185:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 186:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 187:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 188:tmk_core/protocol/usb_descriptor.c **** #   endif
 189:tmk_core/protocol/usb_descriptor.c **** 
 190:tmk_core/protocol/usb_descriptor.c **** #   ifdef NKRO_ENABLE
 191:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 192:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
 193:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 194:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_NKRO),
 195:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 196:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
 197:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
 198:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 199:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 200:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 201:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 202:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 203:tmk_core/protocol/usb_descriptor.c **** 
 204:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
 205:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
 206:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
 207:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 208:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 209:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 210:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 211:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 212:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 213:tmk_core/protocol/usb_descriptor.c **** 
 214:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 215:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Keyboard 0 */
 216:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, KEYBOARD_REPORT_BITS*8-1),
 217:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 218:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 219:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, KEYBOARD_REPORT_BITS*8),
 220:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 221:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 222:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 223:tmk_core/protocol/usb_descriptor.c **** #   endif
 224:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 225:tmk_core/protocol/usb_descriptor.c **** };
 226:tmk_core/protocol/usb_descriptor.c **** #endif
 227:tmk_core/protocol/usb_descriptor.c **** 
 228:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 229:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] =
 230:tmk_core/protocol/usb_descriptor.c **** {
 231:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF60), /* Vendor Page 0xFF60 */
 232:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x61), /* Vendor Usage 0x61 */
 233:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 234:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x62), /* Vendor Usage 0x62 */
 235:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 236:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 237:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 238:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 239:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 240:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x63), /* Vendor Usage 0x63 */
 241:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 242:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 243:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 244:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 245:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 246:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 247:tmk_core/protocol/usb_descriptor.c **** };
 248:tmk_core/protocol/usb_descriptor.c **** #endif
 249:tmk_core/protocol/usb_descriptor.c **** 
 250:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 251:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] =
 252:tmk_core/protocol/usb_descriptor.c **** {
 253:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), /* Vendor Page(PJRC Teensy compatible) */
 254:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74), /* Vendor Usage(PJRC Teensy compatible) */
 255:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 256:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x75), /* Vendor Usage 0x75 */
 257:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 258:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 259:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 260:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 261:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 262:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x76), /* Vendor Usage 0x76 */
 263:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 264:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 265:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 266:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 267:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 268:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 269:tmk_core/protocol/usb_descriptor.c **** };
 270:tmk_core/protocol/usb_descriptor.c **** #endif
 271:tmk_core/protocol/usb_descriptor.c **** 
 272:tmk_core/protocol/usb_descriptor.c **** 
 273:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
 274:tmk_core/protocol/usb_descriptor.c ****  * Device Descriptors
 275:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
 276:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
 277:tmk_core/protocol/usb_descriptor.c **** {
 278:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
 279:tmk_core/protocol/usb_descriptor.c **** 
 280:tmk_core/protocol/usb_descriptor.c ****     .USBSpecification       = VERSION_BCD(1,1,0),
 281:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 282:tmk_core/protocol/usb_descriptor.c ****     .Class                  = USB_CSCP_IADDeviceClass,
 283:tmk_core/protocol/usb_descriptor.c ****     .SubClass               = USB_CSCP_IADDeviceSubclass,
 284:tmk_core/protocol/usb_descriptor.c ****     .Protocol               = USB_CSCP_IADDeviceProtocol,
 285:tmk_core/protocol/usb_descriptor.c **** #else
 286:tmk_core/protocol/usb_descriptor.c ****     .Class                  = USB_CSCP_NoDeviceClass,
 287:tmk_core/protocol/usb_descriptor.c ****     .SubClass               = USB_CSCP_NoDeviceSubclass,
 288:tmk_core/protocol/usb_descriptor.c ****     .Protocol               = USB_CSCP_NoDeviceProtocol,
 289:tmk_core/protocol/usb_descriptor.c **** #endif
 290:tmk_core/protocol/usb_descriptor.c **** 
 291:tmk_core/protocol/usb_descriptor.c ****     .Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
 292:tmk_core/protocol/usb_descriptor.c **** 
 293:tmk_core/protocol/usb_descriptor.c ****     /* specified in config.h */
 294:tmk_core/protocol/usb_descriptor.c ****     .VendorID               = VENDOR_ID,
 295:tmk_core/protocol/usb_descriptor.c ****     .ProductID              = PRODUCT_ID,
 296:tmk_core/protocol/usb_descriptor.c ****     .ReleaseNumber          = DEVICE_VER,
 297:tmk_core/protocol/usb_descriptor.c **** 
 298:tmk_core/protocol/usb_descriptor.c ****     .ManufacturerStrIndex   = 0x01,
 299:tmk_core/protocol/usb_descriptor.c ****     .ProductStrIndex        = 0x02,
 300:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex      = 0x03,
 301:tmk_core/protocol/usb_descriptor.c **** 
 302:tmk_core/protocol/usb_descriptor.c ****     .NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 303:tmk_core/protocol/usb_descriptor.c **** };
 304:tmk_core/protocol/usb_descriptor.c **** 
 305:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
 306:tmk_core/protocol/usb_descriptor.c ****  * Configuration Descriptors
 307:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
 308:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 309:tmk_core/protocol/usb_descriptor.c **** {
 310:tmk_core/protocol/usb_descriptor.c ****     .Config =
 311:tmk_core/protocol/usb_descriptor.c ****         {
 312:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type
 313:tmk_core/protocol/usb_descriptor.c **** 
 314:tmk_core/protocol/usb_descriptor.c ****             .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 315:tmk_core/protocol/usb_descriptor.c ****             .TotalInterfaces        = TOTAL_INTERFACES,
 316:tmk_core/protocol/usb_descriptor.c **** 
 317:tmk_core/protocol/usb_descriptor.c ****             .ConfigurationNumber    = 1,
 318:tmk_core/protocol/usb_descriptor.c ****             .ConfigurationStrIndex  = NO_DESCRIPTOR,
 319:tmk_core/protocol/usb_descriptor.c **** 
 320:tmk_core/protocol/usb_descriptor.c ****             .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 321:tmk_core/protocol/usb_descriptor.c **** 
 322:tmk_core/protocol/usb_descriptor.c ****             .MaxPowerConsumption    = USB_CONFIG_POWER_MA(USB_MAX_POWER_CONSUMPTION)
 323:tmk_core/protocol/usb_descriptor.c ****         },
 324:tmk_core/protocol/usb_descriptor.c **** 
 325:tmk_core/protocol/usb_descriptor.c ****     /*
 326:tmk_core/protocol/usb_descriptor.c ****      * Keyboard
 327:tmk_core/protocol/usb_descriptor.c ****      */
 328:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 329:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_Interface =
 330:tmk_core/protocol/usb_descriptor.c ****         {
 331:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 332:tmk_core/protocol/usb_descriptor.c **** 
 333:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = KEYBOARD_INTERFACE,
 334:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 335:tmk_core/protocol/usb_descriptor.c **** 
 336:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 337:tmk_core/protocol/usb_descriptor.c **** 
 338:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 339:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 340:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_KeyboardBootProtocol,
 341:tmk_core/protocol/usb_descriptor.c **** 
 342:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 343:tmk_core/protocol/usb_descriptor.c ****         },
 344:tmk_core/protocol/usb_descriptor.c **** 
 345:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_HID =
 346:tmk_core/protocol/usb_descriptor.c ****         {
 347:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 348:tmk_core/protocol/usb_descriptor.c **** 
 349:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 350:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 351:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 352:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 353:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(KeyboardReport)
 354:tmk_core/protocol/usb_descriptor.c ****         },
 355:tmk_core/protocol/usb_descriptor.c **** 
 356:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_INEndpoint =
 357:tmk_core/protocol/usb_descriptor.c ****         {
 358:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 359:tmk_core/protocol/usb_descriptor.c **** 
 360:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 361:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 362:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = KEYBOARD_EPSIZE,
 363:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x0A
 364:tmk_core/protocol/usb_descriptor.c ****         },
 365:tmk_core/protocol/usb_descriptor.c **** #endif
 366:tmk_core/protocol/usb_descriptor.c **** 
 367:tmk_core/protocol/usb_descriptor.c ****     /*
 368:tmk_core/protocol/usb_descriptor.c ****      * Mouse
 369:tmk_core/protocol/usb_descriptor.c ****      */
 370:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 371:tmk_core/protocol/usb_descriptor.c ****     .Mouse_Interface =
 372:tmk_core/protocol/usb_descriptor.c ****         {
 373:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 374:tmk_core/protocol/usb_descriptor.c **** 
 375:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = MOUSE_INTERFACE,
 376:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 377:tmk_core/protocol/usb_descriptor.c **** 
 378:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 379:tmk_core/protocol/usb_descriptor.c **** 
 380:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 381:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 382:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_MouseBootProtocol,
 383:tmk_core/protocol/usb_descriptor.c **** 
 384:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 385:tmk_core/protocol/usb_descriptor.c ****         },
 386:tmk_core/protocol/usb_descriptor.c **** 
 387:tmk_core/protocol/usb_descriptor.c ****     .Mouse_HID =
 388:tmk_core/protocol/usb_descriptor.c ****         {
 389:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 390:tmk_core/protocol/usb_descriptor.c **** 
 391:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 392:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 393:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 394:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 395:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(MouseReport)
 396:tmk_core/protocol/usb_descriptor.c ****         },
 397:tmk_core/protocol/usb_descriptor.c **** 
 398:tmk_core/protocol/usb_descriptor.c ****     .Mouse_INEndpoint =
 399:tmk_core/protocol/usb_descriptor.c ****         {
 400:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 401:tmk_core/protocol/usb_descriptor.c **** 
 402:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 403:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 404:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = MOUSE_EPSIZE,
 405:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x0A
 406:tmk_core/protocol/usb_descriptor.c ****         },
 407:tmk_core/protocol/usb_descriptor.c **** #endif
 408:tmk_core/protocol/usb_descriptor.c **** 
 409:tmk_core/protocol/usb_descriptor.c ****     /*
 410:tmk_core/protocol/usb_descriptor.c ****      * Shared
 411:tmk_core/protocol/usb_descriptor.c ****      */
 412:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 413:tmk_core/protocol/usb_descriptor.c ****     .Shared_Interface =
 414:tmk_core/protocol/usb_descriptor.c ****         {
 415:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 416:tmk_core/protocol/usb_descriptor.c **** 
 417:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = SHARED_INTERFACE,
 418:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 419:tmk_core/protocol/usb_descriptor.c **** 
 420:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 421:tmk_core/protocol/usb_descriptor.c **** 
 422:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 423:tmk_core/protocol/usb_descriptor.c **** #   ifdef KEYBOARD_SHARED_EP
 424:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 425:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_KeyboardBootProtocol,
 426:tmk_core/protocol/usb_descriptor.c **** #   else
 427:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 428:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 429:tmk_core/protocol/usb_descriptor.c **** #endif
 430:tmk_core/protocol/usb_descriptor.c **** 
 431:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 432:tmk_core/protocol/usb_descriptor.c ****         },
 433:tmk_core/protocol/usb_descriptor.c **** 
 434:tmk_core/protocol/usb_descriptor.c ****     .Shared_HID =
 435:tmk_core/protocol/usb_descriptor.c ****         {
 436:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 437:tmk_core/protocol/usb_descriptor.c **** 
 438:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 439:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 440:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 441:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 442:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(SharedReport)
 443:tmk_core/protocol/usb_descriptor.c ****         },
 444:tmk_core/protocol/usb_descriptor.c **** 
 445:tmk_core/protocol/usb_descriptor.c ****     .Shared_INEndpoint =
 446:tmk_core/protocol/usb_descriptor.c ****         {
 447:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 448:tmk_core/protocol/usb_descriptor.c **** 
 449:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | SHARED_IN_EPNUM),
 450:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 451:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = SHARED_EPSIZE,
 452:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x0A
 453:tmk_core/protocol/usb_descriptor.c ****         },
 454:tmk_core/protocol/usb_descriptor.c **** #endif
 455:tmk_core/protocol/usb_descriptor.c **** 
 456:tmk_core/protocol/usb_descriptor.c **** 		/*
 457:tmk_core/protocol/usb_descriptor.c **** 	     * Raw
 458:tmk_core/protocol/usb_descriptor.c **** 	     */
 459:tmk_core/protocol/usb_descriptor.c **** 	#ifdef RAW_ENABLE
 460:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_Interface =
 461:tmk_core/protocol/usb_descriptor.c **** 	        {
 462:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_I
 463:tmk_core/protocol/usb_descriptor.c **** 
 464:tmk_core/protocol/usb_descriptor.c **** 	            .InterfaceNumber        = RAW_INTERFACE,
 465:tmk_core/protocol/usb_descriptor.c **** 	            .AlternateSetting       = 0x00,
 466:tmk_core/protocol/usb_descriptor.c **** 
 467:tmk_core/protocol/usb_descriptor.c **** 	            .TotalEndpoints         = 2,
 468:tmk_core/protocol/usb_descriptor.c **** 
 469:tmk_core/protocol/usb_descriptor.c **** 	            .Class                  = HID_CSCP_HIDClass,
 470:tmk_core/protocol/usb_descriptor.c **** 	            .SubClass               = HID_CSCP_NonBootSubclass,
 471:tmk_core/protocol/usb_descriptor.c **** 	            .Protocol               = HID_CSCP_NonBootProtocol,
 472:tmk_core/protocol/usb_descriptor.c **** 
 473:tmk_core/protocol/usb_descriptor.c **** 	            .InterfaceStrIndex      = NO_DESCRIPTOR
 474:tmk_core/protocol/usb_descriptor.c **** 	        },
 475:tmk_core/protocol/usb_descriptor.c **** 
 476:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_HID =
 477:tmk_core/protocol/usb_descriptor.c **** 	        {
 478:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE
 479:tmk_core/protocol/usb_descriptor.c **** 
 480:tmk_core/protocol/usb_descriptor.c **** 	            .HIDSpec                = VERSION_BCD(1,1,1),
 481:tmk_core/protocol/usb_descriptor.c **** 	            .CountryCode            = 0x00,
 482:tmk_core/protocol/usb_descriptor.c **** 	            .TotalReportDescriptors = 1,
 483:tmk_core/protocol/usb_descriptor.c **** 	            .HIDReportType          = HID_DTYPE_Report,
 484:tmk_core/protocol/usb_descriptor.c **** 	            .HIDReportLength        = sizeof(RawReport)
 485:tmk_core/protocol/usb_descriptor.c **** 	        },
 486:tmk_core/protocol/usb_descriptor.c **** 
 487:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_INEndpoint =
 488:tmk_core/protocol/usb_descriptor.c **** 	        {
 489:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_En
 490:tmk_core/protocol/usb_descriptor.c **** 
 491:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointAddress        = (ENDPOINT_DIR_IN | RAW_IN_EPNUM),
 492:tmk_core/protocol/usb_descriptor.c **** 	            .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_
 493:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointSize           = RAW_EPSIZE,
 494:tmk_core/protocol/usb_descriptor.c **** 	            .PollingIntervalMS      = 0x01
 495:tmk_core/protocol/usb_descriptor.c **** 	        },
 496:tmk_core/protocol/usb_descriptor.c **** 
 497:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_OUTEndpoint =
 498:tmk_core/protocol/usb_descriptor.c **** 	        {
 499:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_En
 500:tmk_core/protocol/usb_descriptor.c **** 
 501:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointAddress        = (ENDPOINT_DIR_OUT | RAW_OUT_EPNUM),
 502:tmk_core/protocol/usb_descriptor.c **** 	            .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_
 503:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointSize           = RAW_EPSIZE,
 504:tmk_core/protocol/usb_descriptor.c **** 	            .PollingIntervalMS      = 0x01
 505:tmk_core/protocol/usb_descriptor.c **** 	        },
 506:tmk_core/protocol/usb_descriptor.c **** 	#endif
 507:tmk_core/protocol/usb_descriptor.c **** 
 508:tmk_core/protocol/usb_descriptor.c ****     /*
 509:tmk_core/protocol/usb_descriptor.c ****      * Console
 510:tmk_core/protocol/usb_descriptor.c ****      */
 511:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 512:tmk_core/protocol/usb_descriptor.c ****     .Console_Interface =
 513:tmk_core/protocol/usb_descriptor.c ****         {
 514:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 515:tmk_core/protocol/usb_descriptor.c **** 
 516:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = CONSOLE_INTERFACE,
 517:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 518:tmk_core/protocol/usb_descriptor.c **** 
 519:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 2,
 520:tmk_core/protocol/usb_descriptor.c **** 
 521:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 522:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 523:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 524:tmk_core/protocol/usb_descriptor.c **** 
 525:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 526:tmk_core/protocol/usb_descriptor.c ****         },
 527:tmk_core/protocol/usb_descriptor.c **** 
 528:tmk_core/protocol/usb_descriptor.c ****     .Console_HID =
 529:tmk_core/protocol/usb_descriptor.c ****         {
 530:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 531:tmk_core/protocol/usb_descriptor.c **** 
 532:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 533:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 534:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 535:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 536:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(ConsoleReport)
 537:tmk_core/protocol/usb_descriptor.c ****         },
 538:tmk_core/protocol/usb_descriptor.c **** 
 539:tmk_core/protocol/usb_descriptor.c ****     .Console_INEndpoint =
 540:tmk_core/protocol/usb_descriptor.c ****         {
 541:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 542:tmk_core/protocol/usb_descriptor.c **** 
 543:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 544:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 545:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 546:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x01
 547:tmk_core/protocol/usb_descriptor.c ****         },
 548:tmk_core/protocol/usb_descriptor.c **** 
 549:tmk_core/protocol/usb_descriptor.c ****     .Console_OUTEndpoint =
 550:tmk_core/protocol/usb_descriptor.c ****         {
 551:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 552:tmk_core/protocol/usb_descriptor.c **** 
 553:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 554:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 555:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 556:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x01
 557:tmk_core/protocol/usb_descriptor.c ****         },
 558:tmk_core/protocol/usb_descriptor.c **** #endif
 559:tmk_core/protocol/usb_descriptor.c **** 
 560:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 561:tmk_core/protocol/usb_descriptor.c ****     .Audio_Interface_Association =
 562:tmk_core/protocol/usb_descriptor.c ****         {
 563:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Descriptor_Interface_Association_t), .T
 564:tmk_core/protocol/usb_descriptor.c **** 
 565:tmk_core/protocol/usb_descriptor.c ****             .FirstInterfaceIndex      = AC_INTERFACE,
 566:tmk_core/protocol/usb_descriptor.c ****             .TotalInterfaces          = 2,
 567:tmk_core/protocol/usb_descriptor.c **** 
 568:tmk_core/protocol/usb_descriptor.c ****             .Class                    = AUDIO_CSCP_AudioClass,
 569:tmk_core/protocol/usb_descriptor.c ****             .SubClass                 = AUDIO_CSCP_ControlSubclass,
 570:tmk_core/protocol/usb_descriptor.c ****             .Protocol                 = AUDIO_CSCP_ControlProtocol,
 571:tmk_core/protocol/usb_descriptor.c **** 
 572:tmk_core/protocol/usb_descriptor.c ****             .IADStrIndex              = NO_DESCRIPTOR,
 573:tmk_core/protocol/usb_descriptor.c ****         },
 574:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface =
 575:tmk_core/protocol/usb_descriptor.c ****         {
 576:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_
 577:tmk_core/protocol/usb_descriptor.c **** 
 578:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber          = AC_INTERFACE,
 579:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting         = 0,
 580:tmk_core/protocol/usb_descriptor.c **** 
 581:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints           = 0,
 582:tmk_core/protocol/usb_descriptor.c **** 
 583:tmk_core/protocol/usb_descriptor.c ****             .Class                    = AUDIO_CSCP_AudioClass,
 584:tmk_core/protocol/usb_descriptor.c ****             .SubClass                 = AUDIO_CSCP_ControlSubclass,
 585:tmk_core/protocol/usb_descriptor.c ****             .Protocol                 = AUDIO_CSCP_ControlProtocol,
 586:tmk_core/protocol/usb_descriptor.c **** 
 587:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex        = NO_DESCRIPTOR
 588:tmk_core/protocol/usb_descriptor.c ****         },
 589:tmk_core/protocol/usb_descriptor.c **** 
 590:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface_SPC =
 591:tmk_core/protocol/usb_descriptor.c ****         {
 592:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Audio_Descriptor_Interface_AC_t), .Type
 593:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_Header,
 594:tmk_core/protocol/usb_descriptor.c **** 
 595:tmk_core/protocol/usb_descriptor.c ****             .ACSpecification          = VERSION_BCD(1,0,0),
 596:tmk_core/protocol/usb_descriptor.c ****             .TotalLength              = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 597:tmk_core/protocol/usb_descriptor.c **** 
 598:tmk_core/protocol/usb_descriptor.c ****             .InCollection             = 1,
 599:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber          = AS_INTERFACE,
 600:tmk_core/protocol/usb_descriptor.c ****         },
 601:tmk_core/protocol/usb_descriptor.c **** 
 602:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface =
 603:tmk_core/protocol/usb_descriptor.c ****         {
 604:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_
 605:tmk_core/protocol/usb_descriptor.c **** 
 606:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber          = AS_INTERFACE,
 607:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting         = 0,
 608:tmk_core/protocol/usb_descriptor.c **** 
 609:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints           = 2,
 610:tmk_core/protocol/usb_descriptor.c **** 
 611:tmk_core/protocol/usb_descriptor.c ****             .Class                    = AUDIO_CSCP_AudioClass,
 612:tmk_core/protocol/usb_descriptor.c ****             .SubClass                 = AUDIO_CSCP_MIDIStreamingSubclass,
 613:tmk_core/protocol/usb_descriptor.c ****             .Protocol                 = AUDIO_CSCP_StreamingProtocol,
 614:tmk_core/protocol/usb_descriptor.c **** 
 615:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex        = NO_DESCRIPTOR
 616:tmk_core/protocol/usb_descriptor.c ****         },
 617:tmk_core/protocol/usb_descriptor.c **** 
 618:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface_SPC =
 619:tmk_core/protocol/usb_descriptor.c ****         {
 620:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_AudioInterface_AS_t), .
 621:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_General,
 622:tmk_core/protocol/usb_descriptor.c **** 
 623:tmk_core/protocol/usb_descriptor.c ****             .AudioSpecification       = VERSION_BCD(1,0,0),
 624:tmk_core/protocol/usb_descriptor.c **** 
 625:tmk_core/protocol/usb_descriptor.c ****             .TotalLength              = offsetof(USB_Descriptor_Configuration_t, MIDI_Out_Jack_Endp
 626:tmk_core/protocol/usb_descriptor.c ****                                         + sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t)
 627:tmk_core/protocol/usb_descriptor.c ****                                         - offsetof(USB_Descriptor_Configuration_t, Audio_StreamInte
 628:tmk_core/protocol/usb_descriptor.c ****         },
 629:tmk_core/protocol/usb_descriptor.c **** 
 630:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Emb =
 631:tmk_core/protocol/usb_descriptor.c ****         {
 632:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_t), .Type = D
 633:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 634:tmk_core/protocol/usb_descriptor.c **** 
 635:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_Embedded,
 636:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x01,
 637:tmk_core/protocol/usb_descriptor.c **** 
 638:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 639:tmk_core/protocol/usb_descriptor.c ****         },
 640:tmk_core/protocol/usb_descriptor.c **** 
 641:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Ext =
 642:tmk_core/protocol/usb_descriptor.c ****         {
 643:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_t), .Type = D
 644:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 645:tmk_core/protocol/usb_descriptor.c **** 
 646:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_External,
 647:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x02,
 648:tmk_core/protocol/usb_descriptor.c **** 
 649:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 650:tmk_core/protocol/usb_descriptor.c ****         },
 651:tmk_core/protocol/usb_descriptor.c **** 
 652:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Emb =
 653:tmk_core/protocol/usb_descriptor.c ****         {
 654:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack_t), .Type = 
 655:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 656:tmk_core/protocol/usb_descriptor.c **** 
 657:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_Embedded,
 658:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x03,
 659:tmk_core/protocol/usb_descriptor.c **** 
 660:tmk_core/protocol/usb_descriptor.c ****             .NumberOfPins             = 1,
 661:tmk_core/protocol/usb_descriptor.c ****             .SourceJackID             = {0x02},
 662:tmk_core/protocol/usb_descriptor.c ****             .SourcePinID              = {0x01},
 663:tmk_core/protocol/usb_descriptor.c **** 
 664:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 665:tmk_core/protocol/usb_descriptor.c ****         },
 666:tmk_core/protocol/usb_descriptor.c **** 
 667:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Ext =
 668:tmk_core/protocol/usb_descriptor.c ****         {
 669:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack_t), .Type = 
 670:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 671:tmk_core/protocol/usb_descriptor.c **** 
 672:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_External,
 673:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x04,
 674:tmk_core/protocol/usb_descriptor.c **** 
 675:tmk_core/protocol/usb_descriptor.c ****             .NumberOfPins             = 1,
 676:tmk_core/protocol/usb_descriptor.c ****             .SourceJackID             = {0x01},
 677:tmk_core/protocol/usb_descriptor.c ****             .SourcePinID              = {0x01},
 678:tmk_core/protocol/usb_descriptor.c **** 
 679:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 680:tmk_core/protocol/usb_descriptor.c ****         },
 681:tmk_core/protocol/usb_descriptor.c **** 
 682:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint =
 683:tmk_core/protocol/usb_descriptor.c ****         {
 684:tmk_core/protocol/usb_descriptor.c ****             .Endpoint =
 685:tmk_core/protocol/usb_descriptor.c ****                 {
 686:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_
 687:tmk_core/protocol/usb_descriptor.c **** 
 688:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress     = MIDI_STREAM_OUT_EPADDR,
 689:tmk_core/protocol/usb_descriptor.c ****                     .Attributes          = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 690:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize        = MIDI_STREAM_EPSIZE,
 691:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS   = 0x05
 692:tmk_core/protocol/usb_descriptor.c ****                 },
 693:tmk_core/protocol/usb_descriptor.c **** 
 694:tmk_core/protocol/usb_descriptor.c ****             .Refresh                  = 0,
 695:tmk_core/protocol/usb_descriptor.c ****             .SyncEndpointNumber       = 0
 696:tmk_core/protocol/usb_descriptor.c ****         },
 697:tmk_core/protocol/usb_descriptor.c **** 
 698:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint_SPC =
 699:tmk_core/protocol/usb_descriptor.c ****         {
 700:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t), .Type
 701:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSEndpoint_General,
 702:tmk_core/protocol/usb_descriptor.c **** 
 703:tmk_core/protocol/usb_descriptor.c ****             .TotalEmbeddedJacks       = 0x01,
 704:tmk_core/protocol/usb_descriptor.c ****             .AssociatedJackID         = {0x01}
 705:tmk_core/protocol/usb_descriptor.c ****         },
 706:tmk_core/protocol/usb_descriptor.c **** 
 707:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint =
 708:tmk_core/protocol/usb_descriptor.c ****         {
 709:tmk_core/protocol/usb_descriptor.c ****             .Endpoint =
 710:tmk_core/protocol/usb_descriptor.c ****                 {
 711:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_
 712:tmk_core/protocol/usb_descriptor.c **** 
 713:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress     = MIDI_STREAM_IN_EPADDR,
 714:tmk_core/protocol/usb_descriptor.c ****                     .Attributes          = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 715:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize        = MIDI_STREAM_EPSIZE,
 716:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS   = 0x05
 717:tmk_core/protocol/usb_descriptor.c ****                 },
 718:tmk_core/protocol/usb_descriptor.c **** 
 719:tmk_core/protocol/usb_descriptor.c ****             .Refresh                  = 0,
 720:tmk_core/protocol/usb_descriptor.c ****             .SyncEndpointNumber       = 0
 721:tmk_core/protocol/usb_descriptor.c ****         },
 722:tmk_core/protocol/usb_descriptor.c **** 
 723:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint_SPC =
 724:tmk_core/protocol/usb_descriptor.c ****         {
 725:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t), .Type
 726:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSEndpoint_General,
 727:tmk_core/protocol/usb_descriptor.c **** 
 728:tmk_core/protocol/usb_descriptor.c ****             .TotalEmbeddedJacks       = 0x01,
 729:tmk_core/protocol/usb_descriptor.c ****             .AssociatedJackID         = {0x03}
 730:tmk_core/protocol/usb_descriptor.c ****         },
 731:tmk_core/protocol/usb_descriptor.c **** #endif
 732:tmk_core/protocol/usb_descriptor.c **** 
 733:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 734:tmk_core/protocol/usb_descriptor.c ****     .CDC_Interface_Association =
 735:tmk_core/protocol/usb_descriptor.c ****             {
 736:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Interface_Association_
 737:tmk_core/protocol/usb_descriptor.c **** 
 738:tmk_core/protocol/usb_descriptor.c ****                     .FirstInterfaceIndex    = CCI_INTERFACE,
 739:tmk_core/protocol/usb_descriptor.c ****                     .TotalInterfaces        = 2,
 740:tmk_core/protocol/usb_descriptor.c **** 
 741:tmk_core/protocol/usb_descriptor.c ****                     .Class                  = CDC_CSCP_CDCClass,
 742:tmk_core/protocol/usb_descriptor.c ****                     .SubClass               = CDC_CSCP_ACMSubclass,
 743:tmk_core/protocol/usb_descriptor.c ****                     .Protocol               = CDC_CSCP_ATCommandProtocol,
 744:tmk_core/protocol/usb_descriptor.c **** 
 745:tmk_core/protocol/usb_descriptor.c ****                     .IADStrIndex            = NO_DESCRIPTOR,
 746:tmk_core/protocol/usb_descriptor.c ****             },
 747:tmk_core/protocol/usb_descriptor.c **** 
 748:tmk_core/protocol/usb_descriptor.c ****     .CDC_CCI_Interface =
 749:tmk_core/protocol/usb_descriptor.c ****             {
 750:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = 
 751:tmk_core/protocol/usb_descriptor.c **** 
 752:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceNumber        = CCI_INTERFACE,
 753:tmk_core/protocol/usb_descriptor.c ****                     .AlternateSetting       = 0,
 754:tmk_core/protocol/usb_descriptor.c **** 
 755:tmk_core/protocol/usb_descriptor.c ****                     .TotalEndpoints         = 1,
 756:tmk_core/protocol/usb_descriptor.c **** 
 757:tmk_core/protocol/usb_descriptor.c ****                     .Class                  = CDC_CSCP_CDCClass,
 758:tmk_core/protocol/usb_descriptor.c ****                     .SubClass               = CDC_CSCP_ACMSubclass,
 759:tmk_core/protocol/usb_descriptor.c ****                     .Protocol               = CDC_CSCP_ATCommandProtocol,
 760:tmk_core/protocol/usb_descriptor.c **** 
 761:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceStrIndex      = NO_DESCRIPTOR
 762:tmk_core/protocol/usb_descriptor.c ****             },
 763:tmk_core/protocol/usb_descriptor.c **** 
 764:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Header =
 765:tmk_core/protocol/usb_descriptor.c ****             {
 766:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t
 767:tmk_core/protocol/usb_descriptor.c ****                     .Subtype                = 0x00,
 768:tmk_core/protocol/usb_descriptor.c **** 
 769:tmk_core/protocol/usb_descriptor.c ****                     .CDCSpecification       = VERSION_BCD(1,1,0),
 770:tmk_core/protocol/usb_descriptor.c ****             },
 771:tmk_core/protocol/usb_descriptor.c **** 
 772:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_ACM =
 773:tmk_core/protocol/usb_descriptor.c ****             {
 774:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), 
 775:tmk_core/protocol/usb_descriptor.c ****                     .Subtype                = 0x02,
 776:tmk_core/protocol/usb_descriptor.c **** 
 777:tmk_core/protocol/usb_descriptor.c ****                     .Capabilities           = 0x02,
 778:tmk_core/protocol/usb_descriptor.c ****             },
 779:tmk_core/protocol/usb_descriptor.c **** 
 780:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Union =
 781:tmk_core/protocol/usb_descriptor.c ****             {
 782:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t)
 783:tmk_core/protocol/usb_descriptor.c ****                     .Subtype                = 0x06,
 784:tmk_core/protocol/usb_descriptor.c **** 
 785:tmk_core/protocol/usb_descriptor.c ****                     .MasterInterfaceNumber  = CCI_INTERFACE,
 786:tmk_core/protocol/usb_descriptor.c ****                     .SlaveInterfaceNumber   = CDI_INTERFACE,
 787:tmk_core/protocol/usb_descriptor.c ****             },
 788:tmk_core/protocol/usb_descriptor.c **** 
 789:tmk_core/protocol/usb_descriptor.c ****     .CDC_NotificationEndpoint =
 790:tmk_core/protocol/usb_descriptor.c ****             {
 791:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 792:tmk_core/protocol/usb_descriptor.c **** 
 793:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress        = CDC_NOTIFICATION_EPADDR,
 794:tmk_core/protocol/usb_descriptor.c ****                     .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT
 795:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 796:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS      = 0xFF
 797:tmk_core/protocol/usb_descriptor.c ****             },
 798:tmk_core/protocol/usb_descriptor.c **** 
 799:tmk_core/protocol/usb_descriptor.c ****     .CDC_DCI_Interface =
 800:tmk_core/protocol/usb_descriptor.c ****             {
 801:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = 
 802:tmk_core/protocol/usb_descriptor.c **** 
 803:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceNumber        = CDI_INTERFACE,
 804:tmk_core/protocol/usb_descriptor.c ****                     .AlternateSetting       = 0,
 805:tmk_core/protocol/usb_descriptor.c **** 
 806:tmk_core/protocol/usb_descriptor.c ****                     .TotalEndpoints         = 2,
 807:tmk_core/protocol/usb_descriptor.c **** 
 808:tmk_core/protocol/usb_descriptor.c ****                     .Class                  = CDC_CSCP_CDCDataClass,
 809:tmk_core/protocol/usb_descriptor.c ****                     .SubClass               = CDC_CSCP_NoDataSubclass,
 810:tmk_core/protocol/usb_descriptor.c ****                     .Protocol               = CDC_CSCP_NoDataProtocol,
 811:tmk_core/protocol/usb_descriptor.c **** 
 812:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceStrIndex      = NO_DESCRIPTOR
 813:tmk_core/protocol/usb_descriptor.c ****             },
 814:tmk_core/protocol/usb_descriptor.c **** 
 815:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataOutEndpoint =
 816:tmk_core/protocol/usb_descriptor.c ****             {
 817:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 818:tmk_core/protocol/usb_descriptor.c **** 
 819:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress        = CDC_OUT_EPADDR,
 820:tmk_core/protocol/usb_descriptor.c ****                     .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAG
 821:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize           = CDC_EPSIZE,
 822:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS      = 0x05
 823:tmk_core/protocol/usb_descriptor.c ****             },
 824:tmk_core/protocol/usb_descriptor.c **** 
 825:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataInEndpoint =
 826:tmk_core/protocol/usb_descriptor.c ****             {
 827:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 828:tmk_core/protocol/usb_descriptor.c **** 
 829:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress        = CDC_IN_EPADDR,
 830:tmk_core/protocol/usb_descriptor.c ****                     .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAG
 831:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize           = CDC_EPSIZE,
 832:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS      = 0x05
 833:tmk_core/protocol/usb_descriptor.c ****             },
 834:tmk_core/protocol/usb_descriptor.c **** #endif
 835:tmk_core/protocol/usb_descriptor.c **** };
 836:tmk_core/protocol/usb_descriptor.c **** 
 837:tmk_core/protocol/usb_descriptor.c **** 
 838:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
 839:tmk_core/protocol/usb_descriptor.c ****  * String Descriptors
 840:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
 841:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 842:tmk_core/protocol/usb_descriptor.c **** {
 843:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 844:tmk_core/protocol/usb_descriptor.c **** 
 845:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = {LANGUAGE_ID_ENG}
 846:tmk_core/protocol/usb_descriptor.c **** };
 847:tmk_core/protocol/usb_descriptor.c **** 
 848:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 849:tmk_core/protocol/usb_descriptor.c **** {
 850:tmk_core/protocol/usb_descriptor.c ****     /* subtract 1 for null terminator */
 851:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(MANUFACTURER))-1), .Type = DTYPE_S
 852:tmk_core/protocol/usb_descriptor.c **** 
 853:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = LSTR(MANUFACTURER)
 854:tmk_core/protocol/usb_descriptor.c **** };
 855:tmk_core/protocol/usb_descriptor.c **** 
 856:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 857:tmk_core/protocol/usb_descriptor.c **** {
 858:tmk_core/protocol/usb_descriptor.c ****     /* subtract 1 for null terminator */
 859:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(PRODUCT))-1), .Type = DTYPE_String
 860:tmk_core/protocol/usb_descriptor.c **** 
 861:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = LSTR(PRODUCT)
 862:tmk_core/protocol/usb_descriptor.c **** };
 863:tmk_core/protocol/usb_descriptor.c **** 
 864:tmk_core/protocol/usb_descriptor.c **** #ifndef SERIAL_NUMBER
 865:tmk_core/protocol/usb_descriptor.c ****     #define SERIAL_NUMBER 0
 866:tmk_core/protocol/usb_descriptor.c **** #endif
 867:tmk_core/protocol/usb_descriptor.c **** 
 868:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString =
 869:tmk_core/protocol/usb_descriptor.c **** {
 870:tmk_core/protocol/usb_descriptor.c ****     /* subtract 1 for null terminator */
 871:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(SERIAL_NUMBER))-1), .Type = DTYPE_
 872:tmk_core/protocol/usb_descriptor.c **** 
 873:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = LSTR(SERIAL_NUMBER)
 874:tmk_core/protocol/usb_descriptor.c **** };
 875:tmk_core/protocol/usb_descriptor.c **** 
 876:tmk_core/protocol/usb_descriptor.c **** 
 877:tmk_core/protocol/usb_descriptor.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 878:tmk_core/protocol/usb_descriptor.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 879:tmk_core/protocol/usb_descriptor.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 880:tmk_core/protocol/usb_descriptor.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 881:tmk_core/protocol/usb_descriptor.c ****  *  USB host.
 882:tmk_core/protocol/usb_descriptor.c ****  */
 883:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue,
 884:tmk_core/protocol/usb_descriptor.c ****                             const uint16_t wIndex,
 885:tmk_core/protocol/usb_descriptor.c ****                             const void** const DescriptorAddress)
 886:tmk_core/protocol/usb_descriptor.c **** {
  16               		.loc 1 886 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 887:tmk_core/protocol/usb_descriptor.c ****     const uint8_t  DescriptorType   = (wValue >> 8);
 888:tmk_core/protocol/usb_descriptor.c ****     const uint8_t  DescriptorIndex  = (wValue & 0xFF);
 889:tmk_core/protocol/usb_descriptor.c **** 
 890:tmk_core/protocol/usb_descriptor.c ****     const void* Address = NULL;
 891:tmk_core/protocol/usb_descriptor.c ****     uint16_t    Size    = NO_DESCRIPTOR;
 892:tmk_core/protocol/usb_descriptor.c **** 
 893:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType)
  23               		.loc 1 893 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
  26 0004 2330      		cpi r18,3
  27 0006 3105      		cpc r19,__zero_reg__
  28 0008 01F0      		breq .L3
  29 000a 00F4      		brsh .L4
  30 000c 2130      		cpi r18,1
  31 000e 3105      		cpc r19,__zero_reg__
  32 0010 01F0      		breq .L5
  33 0012 2230      		cpi r18,2
  34 0014 3105      		cpc r19,__zero_reg__
  35 0016 01F0      		breq .+2
  36 0018 00C0      		rjmp .L23
  37               	.LVL1:
 894:tmk_core/protocol/usb_descriptor.c ****     {
 895:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 896:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 897:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 898:tmk_core/protocol/usb_descriptor.c ****             break;
 899:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 900:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 901:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  38               		.loc 1 901 0
  39 001a 8FE9      		ldi r24,lo8(-97)
  40 001c 90E0      		ldi r25,0
  41               	.LVL2:
 900:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  42               		.loc 1 900 0
  43 001e 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  44 0020 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 902:tmk_core/protocol/usb_descriptor.c ****             break;
  45               		.loc 1 902 0
  46 0022 00C0      		rjmp .L2
  47               	.LVL3:
  48               	.L4:
 893:tmk_core/protocol/usb_descriptor.c ****     {
  49               		.loc 1 893 0
  50 0024 2132      		cpi r18,33
  51 0026 3105      		cpc r19,__zero_reg__
  52 0028 01F0      		breq .L7
  53 002a 2232      		cpi r18,34
  54 002c 3105      		cpc r19,__zero_reg__
  55 002e 01F0      		breq .L8
  56 0030 00C0      		rjmp .L23
  57               	.L5:
 897:tmk_core/protocol/usb_descriptor.c ****             break;
  58               		.loc 1 897 0
  59 0032 82E1      		ldi r24,lo8(18)
  60 0034 90E0      		ldi r25,0
  61               	.LVL4:
 896:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
  62               		.loc 1 896 0
  63 0036 20E0      		ldi r18,lo8(DeviceDescriptor)
  64 0038 30E0      		ldi r19,hi8(DeviceDescriptor)
  65 003a 00C0      		rjmp .L2
  66               	.LVL5:
  67               	.L3:
 903:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 904:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex )
  68               		.loc 1 904 0
  69 003c 9927      		clr r25
  70               	.LVL6:
  71 003e 8130      		cpi r24,1
  72 0040 9105      		cpc r25,__zero_reg__
  73 0042 01F0      		breq .L9
  74 0044 00F0      		brlo .L10
  75 0046 8230      		cpi r24,2
  76 0048 9105      		cpc r25,__zero_reg__
  77 004a 01F0      		breq .L11
  78 004c 0397      		sbiw r24,3
  79 004e 01F4      		brne .L23
  80               	.LVL7:
  81               	.LBB2:
 905:tmk_core/protocol/usb_descriptor.c ****             {
 906:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 907:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 908:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 909:tmk_core/protocol/usb_descriptor.c ****                     break;
 910:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
 911:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
 912:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 913:tmk_core/protocol/usb_descriptor.c ****                     break;
 914:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
 915:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
 916:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 917:tmk_core/protocol/usb_descriptor.c ****                     break;
 918:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
 919:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
 920:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
  82               		.loc 1 920 0
  83 0050 E0E0      		ldi r30,lo8(SerialNumberString)
  84 0052 F0E0      		ldi r31,hi8(SerialNumberString)
  85 0054 00C0      		rjmp .L24
  86               	.LVL8:
  87               	.L10:
  88               	.LBE2:
  89               	.LBB3:
 908:tmk_core/protocol/usb_descriptor.c ****                     break;
  90               		.loc 1 908 0
  91 0056 E0E0      		ldi r30,lo8(LanguageString)
  92 0058 F0E0      		ldi r31,hi8(LanguageString)
  93 005a 00C0      		rjmp .L24
  94               	.LVL9:
  95               	.L9:
  96               	.LBE3:
  97               	.LBB4:
 912:tmk_core/protocol/usb_descriptor.c ****                     break;
  98               		.loc 1 912 0
  99 005c E0E0      		ldi r30,lo8(ManufacturerString)
 100 005e F0E0      		ldi r31,hi8(ManufacturerString)
 101 0060 00C0      		rjmp .L24
 102               	.LVL10:
 103               	.L11:
 104               	.LBE4:
 105               	.LBB5:
 916:tmk_core/protocol/usb_descriptor.c ****                     break;
 106               		.loc 1 916 0
 107 0062 E0E0      		ldi r30,lo8(ProductString)
 108 0064 F0E0      		ldi r31,hi8(ProductString)
 109               	.LVL11:
 110               	.L24:
 111               	.LBE5:
 112               	.LBB6:
 113               		.loc 1 920 0
 114               	/* #APP */
 115               	 ;  920 "tmk_core/protocol/usb_descriptor.c" 1
 116 0066 8491      		lpm r24, Z
 117               		
 118               	 ;  0 "" 2
 119               	.LVL12:
 120               	/* #NOAPP */
 121               	.LBE6:
 122 0068 90E0      		ldi r25,0
 123               	.LVL13:
 919:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 124               		.loc 1 919 0
 125 006a 9F01      		movw r18,r30
 921:tmk_core/protocol/usb_descriptor.c ****                     break;
 126               		.loc 1 921 0
 127 006c 00C0      		rjmp .L2
 128               	.LVL14:
 129               	.L7:
 922:tmk_core/protocol/usb_descriptor.c ****             }
 923:tmk_core/protocol/usb_descriptor.c ****             break;
 924:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
 925:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 130               		.loc 1 925 0
 131 006e 6115      		cp r22,__zero_reg__
 132 0070 7105      		cpc r23,__zero_reg__
 133 0072 01F0      		breq .L13
 134 0074 6130      		cpi r22,1
 135 0076 7105      		cpc r23,__zero_reg__
 136 0078 01F4      		brne .L23
 137               	.LVL15:
 926:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 927:tmk_core/protocol/usb_descriptor.c ****             case KEYBOARD_INTERFACE:
 928:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Keyboard_HID;
 929:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 930:tmk_core/protocol/usb_descriptor.c ****                 break;
 931:tmk_core/protocol/usb_descriptor.c **** #endif
 932:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 933:tmk_core/protocol/usb_descriptor.c ****             case MOUSE_INTERFACE:
 934:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Mouse_HID;
 935:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 936:tmk_core/protocol/usb_descriptor.c ****                 break;
 937:tmk_core/protocol/usb_descriptor.c **** #endif
 938:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 939:tmk_core/protocol/usb_descriptor.c ****             case SHARED_INTERFACE:
 940:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Shared_HID;
 941:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 138               		.loc 1 941 0
 139 007a 89E0      		ldi r24,lo8(9)
 140 007c 90E0      		ldi r25,0
 141               	.LVL16:
 940:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 142               		.loc 1 940 0
 143 007e 20E0      		ldi r18,lo8(ConfigurationDescriptor+43)
 144 0080 30E0      		ldi r19,hi8(ConfigurationDescriptor+43)
 145               	.LVL17:
 942:tmk_core/protocol/usb_descriptor.c ****                 break;
 146               		.loc 1 942 0
 147 0082 00C0      		rjmp .L2
 148               	.LVL18:
 149               	.L13:
 929:tmk_core/protocol/usb_descriptor.c ****                 break;
 150               		.loc 1 929 0
 151 0084 89E0      		ldi r24,lo8(9)
 152 0086 90E0      		ldi r25,0
 153               	.LVL19:
 928:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 154               		.loc 1 928 0
 155 0088 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 156 008a 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 157 008c 00C0      		rjmp .L2
 158               	.LVL20:
 159               	.L8:
 943:tmk_core/protocol/usb_descriptor.c **** #endif
 944:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 945:tmk_core/protocol/usb_descriptor.c ****             case RAW_INTERFACE:
 946:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Raw_HID;
 947:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 948:tmk_core/protocol/usb_descriptor.c ****                 break;
 949:tmk_core/protocol/usb_descriptor.c **** #endif
 950:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 951:tmk_core/protocol/usb_descriptor.c ****             case CONSOLE_INTERFACE:
 952:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Console_HID;
 953:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 954:tmk_core/protocol/usb_descriptor.c ****                 break;
 955:tmk_core/protocol/usb_descriptor.c **** #endif
 956:tmk_core/protocol/usb_descriptor.c ****             }
 957:tmk_core/protocol/usb_descriptor.c ****             break;
 958:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
 959:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 160               		.loc 1 959 0
 161 008e 6115      		cp r22,__zero_reg__
 162 0090 7105      		cpc r23,__zero_reg__
 163 0092 01F0      		breq .L15
 164 0094 6130      		cpi r22,1
 165 0096 7105      		cpc r23,__zero_reg__
 166 0098 01F4      		brne .L23
 167               	.LVL21:
 960:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 961:tmk_core/protocol/usb_descriptor.c ****             case KEYBOARD_INTERFACE:
 962:tmk_core/protocol/usb_descriptor.c ****                 Address = &KeyboardReport;
 963:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(KeyboardReport);
 964:tmk_core/protocol/usb_descriptor.c ****                 break;
 965:tmk_core/protocol/usb_descriptor.c **** #endif
 966:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 967:tmk_core/protocol/usb_descriptor.c ****             case MOUSE_INTERFACE:
 968:tmk_core/protocol/usb_descriptor.c ****                 Address = &MouseReport;
 969:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(MouseReport);
 970:tmk_core/protocol/usb_descriptor.c ****                 break;
 971:tmk_core/protocol/usb_descriptor.c **** #endif
 972:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 973:tmk_core/protocol/usb_descriptor.c ****             case SHARED_INTERFACE:
 974:tmk_core/protocol/usb_descriptor.c ****                 Address = &SharedReport;
 975:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(SharedReport);
 168               		.loc 1 975 0
 169 009a 81E7      		ldi r24,lo8(113)
 170 009c 90E0      		ldi r25,0
 171               	.LVL22:
 974:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(SharedReport);
 172               		.loc 1 974 0
 173 009e 20E0      		ldi r18,lo8(SharedReport)
 174 00a0 30E0      		ldi r19,hi8(SharedReport)
 976:tmk_core/protocol/usb_descriptor.c ****                 break;
 175               		.loc 1 976 0
 176 00a2 00C0      		rjmp .L2
 177               	.LVL23:
 178               	.L15:
 963:tmk_core/protocol/usb_descriptor.c ****                 break;
 179               		.loc 1 963 0
 180 00a4 80E4      		ldi r24,lo8(64)
 181 00a6 90E0      		ldi r25,0
 182               	.LVL24:
 962:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(KeyboardReport);
 183               		.loc 1 962 0
 184 00a8 20E0      		ldi r18,lo8(KeyboardReport)
 185 00aa 30E0      		ldi r19,hi8(KeyboardReport)
 186 00ac 00C0      		rjmp .L2
 187               	.L23:
 891:tmk_core/protocol/usb_descriptor.c **** 
 188               		.loc 1 891 0
 189 00ae 80E0      		ldi r24,0
 190 00b0 90E0      		ldi r25,0
 890:tmk_core/protocol/usb_descriptor.c ****     uint16_t    Size    = NO_DESCRIPTOR;
 191               		.loc 1 890 0
 192 00b2 20E0      		ldi r18,0
 193 00b4 30E0      		ldi r19,0
 194               	.LVL25:
 195               	.L2:
 977:tmk_core/protocol/usb_descriptor.c **** #endif
 978:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 979:tmk_core/protocol/usb_descriptor.c ****             case RAW_INTERFACE:
 980:tmk_core/protocol/usb_descriptor.c ****                 Address = &RawReport;
 981:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(RawReport);
 982:tmk_core/protocol/usb_descriptor.c ****                 break;
 983:tmk_core/protocol/usb_descriptor.c **** #endif
 984:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 985:tmk_core/protocol/usb_descriptor.c ****             case CONSOLE_INTERFACE:
 986:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConsoleReport;
 987:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(ConsoleReport);
 988:tmk_core/protocol/usb_descriptor.c ****                 break;
 989:tmk_core/protocol/usb_descriptor.c **** #endif
 990:tmk_core/protocol/usb_descriptor.c ****             }
 991:tmk_core/protocol/usb_descriptor.c ****             break;
 992:tmk_core/protocol/usb_descriptor.c ****     }
 993:tmk_core/protocol/usb_descriptor.c **** 
 994:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
 196               		.loc 1 994 0
 197 00b6 FA01      		movw r30,r20
 198 00b8 3183      		std Z+1,r19
 199 00ba 2083      		st Z,r18
 995:tmk_core/protocol/usb_descriptor.c ****     return Size;
 996:tmk_core/protocol/usb_descriptor.c **** }
 200               		.loc 1 996 0
 201 00bc 0895      		ret
 202               		.cfi_endproc
 203               	.LFE100:
 205               	.global	SerialNumberString
 206               		.section	.progmem.data.SerialNumberString,"a",@progbits
 209               	SerialNumberString:
 210 0000 04        		.byte	4
 211 0001 03        		.byte	3
 212 0002 3000      		.string	"0"
 213 0004 00        		.string	""
 214 0005 00        		.string	""
 215               	.global	ProductString
 216               		.section	.progmem.data.ProductString,"a",@progbits
 219               	ProductString:
 220 0000 12        		.byte	18
 221 0001 03        		.byte	3
 222 0002 6B00      		.string	"k"
 223 0004 6500      		.string	"e"
 224 0006 7900      		.string	"y"
 225 0008 6200      		.string	"b"
 226 000a 6F00      		.string	"o"
 227 000c 6100      		.string	"a"
 228 000e 7200      		.string	"r"
 229 0010 6400      		.string	"d"
 230 0012 00        		.string	""
 231 0013 00        		.string	""
 232               	.global	ManufacturerString
 233               		.section	.progmem.data.ManufacturerString,"a",@progbits
 236               	ManufacturerString:
 237 0000 16        		.byte	22
 238 0001 03        		.byte	3
 239 0002 7100      		.string	"q"
 240 0004 6D00      		.string	"m"
 241 0006 6B00      		.string	"k"
 242 0008 6200      		.string	"b"
 243 000a 7500      		.string	"u"
 244 000c 6900      		.string	"i"
 245 000e 6C00      		.string	"l"
 246 0010 6400      		.string	"d"
 247 0012 6500      		.string	"e"
 248 0014 7200      		.string	"r"
 249 0016 00        		.string	""
 250 0017 00        		.string	""
 251               	.global	LanguageString
 252               		.section	.progmem.data.LanguageString,"a",@progbits
 255               	LanguageString:
 256 0000 04        		.byte	4
 257 0001 03        		.byte	3
 258 0002 0904      		.word	1033
 259               	.global	ConfigurationDescriptor
 260               		.section	.progmem.data.ConfigurationDescriptor,"a",@progbits
 263               	ConfigurationDescriptor:
 264 0000 09        		.byte	9
 265 0001 02        		.byte	2
 266 0002 9F00      		.word	159
 267 0004 04        		.byte	4
 268 0005 01        		.byte	1
 269 0006 00        		.byte	0
 270 0007 A0        		.byte	-96
 271 0008 FA        		.byte	-6
 272 0009 09        		.byte	9
 273 000a 04        		.byte	4
 274 000b 00        		.byte	0
 275 000c 00        		.byte	0
 276 000d 01        		.byte	1
 277 000e 03        		.byte	3
 278 000f 01        		.byte	1
 279 0010 01        		.byte	1
 280 0011 00        		.byte	0
 281 0012 09        		.byte	9
 282 0013 21        		.byte	33
 283 0014 1101      		.word	273
 284 0016 00        		.byte	0
 285 0017 01        		.byte	1
 286 0018 22        		.byte	34
 287 0019 4000      		.word	64
 288 001b 07        		.byte	7
 289 001c 05        		.byte	5
 290 001d 81        		.byte	-127
 291 001e 03        		.byte	3
 292 001f 0800      		.word	8
 293 0021 0A        		.byte	10
 294 0022 09        		.byte	9
 295 0023 04        		.byte	4
 296 0024 01        		.byte	1
 297 0025 00        		.byte	0
 298 0026 01        		.byte	1
 299 0027 03        		.byte	3
 300 0028 00        		.byte	0
 301 0029 00        		.byte	0
 302 002a 00        		.byte	0
 303 002b 09        		.byte	9
 304 002c 21        		.byte	33
 305 002d 1101      		.word	273
 306 002f 00        		.byte	0
 307 0030 01        		.byte	1
 308 0031 22        		.byte	34
 309 0032 7100      		.word	113
 310 0034 07        		.byte	7
 311 0035 05        		.byte	5
 312 0036 82        		.byte	-126
 313 0037 03        		.byte	3
 314 0038 2000      		.word	32
 315 003a 0A        		.byte	10
 316 003b 08        		.byte	8
 317 003c 0B        		.byte	11
 318 003d 02        		.byte	2
 319 003e 02        		.byte	2
 320 003f 01        		.byte	1
 321 0040 01        		.byte	1
 322 0041 00        		.byte	0
 323 0042 00        		.byte	0
 324 0043 09        		.byte	9
 325 0044 04        		.byte	4
 326 0045 02        		.byte	2
 327 0046 00        		.byte	0
 328 0047 00        		.byte	0
 329 0048 01        		.byte	1
 330 0049 01        		.byte	1
 331 004a 00        		.byte	0
 332 004b 00        		.byte	0
 333 004c 09        		.byte	9
 334 004d 24        		.byte	36
 335 004e 01        		.byte	1
 336 004f 0001      		.word	256
 337 0051 0900      		.word	9
 338 0053 01        		.byte	1
 339 0054 03        		.byte	3
 340 0055 09        		.byte	9
 341 0056 04        		.byte	4
 342 0057 03        		.byte	3
 343 0058 00        		.byte	0
 344 0059 02        		.byte	2
 345 005a 01        		.byte	1
 346 005b 03        		.byte	3
 347 005c 00        		.byte	0
 348 005d 00        		.byte	0
 349 005e 07        		.byte	7
 350 005f 24        		.byte	36
 351 0060 01        		.byte	1
 352 0061 0001      		.word	256
 353 0063 4100      		.word	65
 354 0065 06        		.byte	6
 355 0066 24        		.byte	36
 356 0067 02        		.byte	2
 357 0068 01        		.byte	1
 358 0069 01        		.byte	1
 359 006a 00        		.byte	0
 360 006b 06        		.byte	6
 361 006c 24        		.byte	36
 362 006d 02        		.byte	2
 363 006e 02        		.byte	2
 364 006f 02        		.byte	2
 365 0070 00        		.byte	0
 366 0071 09        		.byte	9
 367 0072 24        		.byte	36
 368 0073 03        		.byte	3
 369 0074 01        		.byte	1
 370 0075 03        		.byte	3
 371 0076 01        		.byte	1
 372 0077 02        		.byte	2
 373 0078 01        		.byte	1
 374 0079 00        		.byte	0
 375 007a 09        		.byte	9
 376 007b 24        		.byte	36
 377 007c 03        		.byte	3
 378 007d 02        		.byte	2
 379 007e 04        		.byte	4
 380 007f 01        		.byte	1
 381 0080 01        		.byte	1
 382 0081 01        		.byte	1
 383 0082 00        		.byte	0
 384 0083 09        		.byte	9
 385 0084 05        		.byte	5
 386 0085 04        		.byte	4
 387 0086 02        		.byte	2
 388 0087 4000      		.word	64
 389 0089 05        		.byte	5
 390 008a 00        		.byte	0
 391 008b 00        		.byte	0
 392 008c 05        		.byte	5
 393 008d 25        		.byte	37
 394 008e 01        		.byte	1
 395 008f 01        		.byte	1
 396 0090 01        		.byte	1
 397 0091 09        		.byte	9
 398 0092 05        		.byte	5
 399 0093 83        		.byte	-125
 400 0094 02        		.byte	2
 401 0095 4000      		.word	64
 402 0097 05        		.byte	5
 403 0098 00        		.byte	0
 404 0099 00        		.byte	0
 405 009a 05        		.byte	5
 406 009b 25        		.byte	37
 407 009c 01        		.byte	1
 408 009d 01        		.byte	1
 409 009e 03        		.byte	3
 410               	.global	DeviceDescriptor
 411               		.section	.progmem.data.DeviceDescriptor,"a",@progbits
 414               	DeviceDescriptor:
 415 0000 12        		.byte	18
 416 0001 01        		.byte	1
 417 0002 1001      		.word	272
 418 0004 00        		.byte	0
 419 0005 00        		.byte	0
 420 0006 00        		.byte	0
 421 0007 08        		.byte	8
 422 0008 EDFE      		.word	-275
 423 000a 6060      		.word	24672
 424 000c 0100      		.word	1
 425 000e 01        		.byte	1
 426 000f 02        		.byte	2
 427 0010 03        		.byte	3
 428 0011 01        		.byte	1
 429               	.global	SharedReport
 430               		.section	.progmem.data.SharedReport,"a",@progbits
 433               	SharedReport:
 434 0000 05        		.byte	5
 435 0001 01        		.byte	1
 436 0002 09        		.byte	9
 437 0003 80        		.byte	-128
 438 0004 A1        		.byte	-95
 439 0005 01        		.byte	1
 440 0006 85        		.byte	-123
 441 0007 03        		.byte	3
 442 0008 16        		.byte	22
 443 0009 01        		.byte	1
 444 000a 00        		.byte	0
 445 000b 26        		.byte	38
 446 000c 03        		.byte	3
 447 000d 00        		.byte	0
 448 000e 1A        		.byte	26
 449 000f 81        		.byte	-127
 450 0010 00        		.byte	0
 451 0011 2A        		.byte	42
 452 0012 83        		.byte	-125
 453 0013 00        		.byte	0
 454 0014 75        		.byte	117
 455 0015 10        		.byte	16
 456 0016 95        		.byte	-107
 457 0017 01        		.byte	1
 458 0018 81        		.byte	-127
 459 0019 00        		.byte	0
 460 001a C0        		.byte	-64
 461 001b 05        		.byte	5
 462 001c 0C        		.byte	12
 463 001d 09        		.byte	9
 464 001e 01        		.byte	1
 465 001f A1        		.byte	-95
 466 0020 01        		.byte	1
 467 0021 85        		.byte	-123
 468 0022 04        		.byte	4
 469 0023 16        		.byte	22
 470 0024 01        		.byte	1
 471 0025 00        		.byte	0
 472 0026 26        		.byte	38
 473 0027 9C        		.byte	-100
 474 0028 02        		.byte	2
 475 0029 1A        		.byte	26
 476 002a 01        		.byte	1
 477 002b 00        		.byte	0
 478 002c 2A        		.byte	42
 479 002d 9C        		.byte	-100
 480 002e 02        		.byte	2
 481 002f 75        		.byte	117
 482 0030 10        		.byte	16
 483 0031 95        		.byte	-107
 484 0032 01        		.byte	1
 485 0033 81        		.byte	-127
 486 0034 00        		.byte	0
 487 0035 C0        		.byte	-64
 488 0036 05        		.byte	5
 489 0037 01        		.byte	1
 490 0038 09        		.byte	9
 491 0039 06        		.byte	6
 492 003a A1        		.byte	-95
 493 003b 01        		.byte	1
 494 003c 85        		.byte	-123
 495 003d 05        		.byte	5
 496 003e 05        		.byte	5
 497 003f 07        		.byte	7
 498 0040 19        		.byte	25
 499 0041 E0        		.byte	-32
 500 0042 29        		.byte	41
 501 0043 E7        		.byte	-25
 502 0044 15        		.byte	21
 503 0045 00        		.byte	0
 504 0046 25        		.byte	37
 505 0047 01        		.byte	1
 506 0048 95        		.byte	-107
 507 0049 08        		.byte	8
 508 004a 75        		.byte	117
 509 004b 01        		.byte	1
 510 004c 81        		.byte	-127
 511 004d 02        		.byte	2
 512 004e 05        		.byte	5
 513 004f 08        		.byte	8
 514 0050 19        		.byte	25
 515 0051 01        		.byte	1
 516 0052 29        		.byte	41
 517 0053 05        		.byte	5
 518 0054 95        		.byte	-107
 519 0055 05        		.byte	5
 520 0056 75        		.byte	117
 521 0057 01        		.byte	1
 522 0058 91        		.byte	-111
 523 0059 02        		.byte	2
 524 005a 95        		.byte	-107
 525 005b 01        		.byte	1
 526 005c 75        		.byte	117
 527 005d 03        		.byte	3
 528 005e 91        		.byte	-111
 529 005f 01        		.byte	1
 530 0060 05        		.byte	5
 531 0061 07        		.byte	7
 532 0062 19        		.byte	25
 533 0063 00        		.byte	0
 534 0064 29        		.byte	41
 535 0065 EF        		.byte	-17
 536 0066 15        		.byte	21
 537 0067 00        		.byte	0
 538 0068 25        		.byte	37
 539 0069 01        		.byte	1
 540 006a 95        		.byte	-107
 541 006b F0        		.byte	-16
 542 006c 75        		.byte	117
 543 006d 01        		.byte	1
 544 006e 81        		.byte	-127
 545 006f 02        		.byte	2
 546 0070 C0        		.byte	-64
 547               	.global	KeyboardReport
 548               		.section	.progmem.data.KeyboardReport,"a",@progbits
 551               	KeyboardReport:
 552 0000 05        		.byte	5
 553 0001 01        		.byte	1
 554 0002 09        		.byte	9
 555 0003 06        		.byte	6
 556 0004 A1        		.byte	-95
 557 0005 01        		.byte	1
 558 0006 05        		.byte	5
 559 0007 07        		.byte	7
 560 0008 19        		.byte	25
 561 0009 E0        		.byte	-32
 562 000a 29        		.byte	41
 563 000b E7        		.byte	-25
 564 000c 15        		.byte	21
 565 000d 00        		.byte	0
 566 000e 25        		.byte	37
 567 000f 01        		.byte	1
 568 0010 95        		.byte	-107
 569 0011 08        		.byte	8
 570 0012 75        		.byte	117
 571 0013 01        		.byte	1
 572 0014 81        		.byte	-127
 573 0015 02        		.byte	2
 574 0016 95        		.byte	-107
 575 0017 01        		.byte	1
 576 0018 75        		.byte	117
 577 0019 08        		.byte	8
 578 001a 81        		.byte	-127
 579 001b 01        		.byte	1
 580 001c 05        		.byte	5
 581 001d 08        		.byte	8
 582 001e 19        		.byte	25
 583 001f 01        		.byte	1
 584 0020 29        		.byte	41
 585 0021 05        		.byte	5
 586 0022 95        		.byte	-107
 587 0023 05        		.byte	5
 588 0024 75        		.byte	117
 589 0025 01        		.byte	1
 590 0026 91        		.byte	-111
 591 0027 02        		.byte	2
 592 0028 95        		.byte	-107
 593 0029 01        		.byte	1
 594 002a 75        		.byte	117
 595 002b 03        		.byte	3
 596 002c 91        		.byte	-111
 597 002d 01        		.byte	1
 598 002e 05        		.byte	5
 599 002f 07        		.byte	7
 600 0030 19        		.byte	25
 601 0031 00        		.byte	0
 602 0032 29        		.byte	41
 603 0033 FF        		.byte	-1
 604 0034 15        		.byte	21
 605 0035 00        		.byte	0
 606 0036 26        		.byte	38
 607 0037 FF        		.byte	-1
 608 0038 00        		.byte	0
 609 0039 95        		.byte	-107
 610 003a 06        		.byte	6
 611 003b 75        		.byte	117
 612 003c 08        		.byte	8
 613 003d 81        		.byte	-127
 614 003e 00        		.byte	0
 615 003f C0        		.byte	-64
 616               		.text
 617               	.Letext0:
 618               		.file 2 "d:\\program files\\msys2\\home\\bnguy\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdin
 619               		.file 3 "d:\\program files\\msys2\\home\\bnguy\\qmk_utils\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.
 620               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 621               		.file 5 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/AudioClassCommon.h"
 622               		.file 6 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 623               		.file 7 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/MIDIClassCommon.h"
 624               		.file 8 "tmk_core/protocol/usb_descriptor.h"
 625               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb_descriptor.c
D:\Program Files\msys2\tmp\cccqO7of.s:2      *ABS*:0000003e __SP_H__
D:\Program Files\msys2\tmp\cccqO7of.s:3      *ABS*:0000003d __SP_L__
D:\Program Files\msys2\tmp\cccqO7of.s:4      *ABS*:0000003f __SREG__
D:\Program Files\msys2\tmp\cccqO7of.s:5      *ABS*:00000000 __tmp_reg__
D:\Program Files\msys2\tmp\cccqO7of.s:6      *ABS*:00000001 __zero_reg__
D:\Program Files\msys2\tmp\cccqO7of.s:13     .text.get_usb_descriptor:00000000 get_usb_descriptor
D:\Program Files\msys2\tmp\cccqO7of.s:263    .progmem.data.ConfigurationDescriptor:00000000 ConfigurationDescriptor
D:\Program Files\msys2\tmp\cccqO7of.s:414    .progmem.data.DeviceDescriptor:00000000 DeviceDescriptor
D:\Program Files\msys2\tmp\cccqO7of.s:209    .progmem.data.SerialNumberString:00000000 SerialNumberString
D:\Program Files\msys2\tmp\cccqO7of.s:255    .progmem.data.LanguageString:00000000 LanguageString
D:\Program Files\msys2\tmp\cccqO7of.s:236    .progmem.data.ManufacturerString:00000000 ManufacturerString
D:\Program Files\msys2\tmp\cccqO7of.s:219    .progmem.data.ProductString:00000000 ProductString
D:\Program Files\msys2\tmp\cccqO7of.s:433    .progmem.data.SharedReport:00000000 SharedReport
D:\Program Files\msys2\tmp\cccqO7of.s:551    .progmem.data.KeyboardReport:00000000 KeyboardReport

NO UNDEFINED SYMBOLS

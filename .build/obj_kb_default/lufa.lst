   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB128:
  14               		.file 1 "tmk_core/protocol/lufa/lufa.c"
   1:tmk_core/protocol/lufa/lufa.c **** /*
   2:tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/lufa/lufa.c ****  */
   7:tmk_core/protocol/lufa/lufa.c **** 
   8:tmk_core/protocol/lufa/lufa.c **** /*
   9:tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/lufa/lufa.c **** 
  12:tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:tmk_core/protocol/lufa/lufa.c **** */
  15:tmk_core/protocol/lufa/lufa.c **** 
  16:tmk_core/protocol/lufa/lufa.c **** /*
  17:tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/lufa/lufa.c **** 
  20:tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:tmk_core/protocol/lufa/lufa.c **** 
  29:tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:tmk_core/protocol/lufa/lufa.c ****   this software.
  37:tmk_core/protocol/lufa/lufa.c **** */
  38:tmk_core/protocol/lufa/lufa.c **** 
  39:tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:tmk_core/protocol/lufa/lufa.c **** #endif
  50:tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:tmk_core/protocol/lufa/lufa.c **** 
  52:tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:tmk_core/protocol/lufa/lufa.c **** #include "rgblight_reconfig.h"
  58:tmk_core/protocol/lufa/lufa.c **** 
  59:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  60:tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  61:tmk_core/protocol/lufa/lufa.c **** 
  62:tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  63:tmk_core/protocol/lufa/lufa.c **** #endif
  64:tmk_core/protocol/lufa/lufa.c **** 
  65:tmk_core/protocol/lufa/lufa.c **** 
  66:tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  67:tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  68:tmk_core/protocol/lufa/lufa.c **** #endif
  69:tmk_core/protocol/lufa/lufa.c **** 
  70:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  71:tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  72:tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  73:tmk_core/protocol/lufa/lufa.c ****   #else
  74:tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  75:tmk_core/protocol/lufa/lufa.c ****   #endif
  76:tmk_core/protocol/lufa/lufa.c **** #endif
  77:tmk_core/protocol/lufa/lufa.c **** 
  78:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  79:tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  80:tmk_core/protocol/lufa/lufa.c **** #endif
  81:tmk_core/protocol/lufa/lufa.c **** 
  82:tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  83:tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  84:tmk_core/protocol/lufa/lufa.c **** #endif
  85:tmk_core/protocol/lufa/lufa.c **** 
  86:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  87:tmk_core/protocol/lufa/lufa.c ****   #include "qmk_midi.h"
  88:tmk_core/protocol/lufa/lufa.c **** #endif
  89:tmk_core/protocol/lufa/lufa.c **** 
  90:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  91:tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  92:tmk_core/protocol/lufa/lufa.c **** #endif
  93:tmk_core/protocol/lufa/lufa.c **** //MidiDevice * midi_device;
  94:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  95:tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  96:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  97:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  98:tmk_core/protocol/lufa/lufa.c **** 
  99:tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
 100:tmk_core/protocol/lufa/lufa.c **** 
 101:tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 102:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 103:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 104:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 105:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 106:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 107:tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 108:tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 109:tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 110:tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 111:tmk_core/protocol/lufa/lufa.c ****     send_system,
 112:tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 113:tmk_core/protocol/lufa/lufa.c **** };
 114:tmk_core/protocol/lufa/lufa.c **** 
 115:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 116:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 117:tmk_core/protocol/lufa/lufa.c **** {
 118:tmk_core/protocol/lufa/lufa.c ****   .Config =
 119:tmk_core/protocol/lufa/lufa.c ****   {
 120:tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 121:tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 122:tmk_core/protocol/lufa/lufa.c ****     {
 123:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 124:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 125:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 126:tmk_core/protocol/lufa/lufa.c ****     },
 127:tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 128:tmk_core/protocol/lufa/lufa.c ****     {
 129:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 130:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 131:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 132:tmk_core/protocol/lufa/lufa.c ****     },
 133:tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 134:tmk_core/protocol/lufa/lufa.c ****     {
 135:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 136:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 137:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 138:tmk_core/protocol/lufa/lufa.c ****     },
 139:tmk_core/protocol/lufa/lufa.c ****   },
 140:tmk_core/protocol/lufa/lufa.c **** };
 141:tmk_core/protocol/lufa/lufa.c **** #endif
 142:tmk_core/protocol/lufa/lufa.c **** 
 143:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 144:tmk_core/protocol/lufa/lufa.c **** 
 145:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 146:tmk_core/protocol/lufa/lufa.c ****  *
 147:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 148:tmk_core/protocol/lufa/lufa.c ****  */
 149:tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 150:tmk_core/protocol/lufa/lufa.c **** {
 151:tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 152:tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 153:tmk_core/protocol/lufa/lufa.c **** 	{
 154:tmk_core/protocol/lufa/lufa.c **** 		return;
 155:tmk_core/protocol/lufa/lufa.c **** 	}
 156:tmk_core/protocol/lufa/lufa.c **** 
 157:tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 158:tmk_core/protocol/lufa/lufa.c **** 	{
 159:tmk_core/protocol/lufa/lufa.c **** 		return;
 160:tmk_core/protocol/lufa/lufa.c **** 	}
 161:tmk_core/protocol/lufa/lufa.c **** 
 162:tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 163:tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 164:tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 165:tmk_core/protocol/lufa/lufa.c **** 
 166:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 167:tmk_core/protocol/lufa/lufa.c **** 
 168:tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 169:tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 170:tmk_core/protocol/lufa/lufa.c **** 	{
 171:tmk_core/protocol/lufa/lufa.c **** 		// Write data
 172:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 173:tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 174:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 175:tmk_core/protocol/lufa/lufa.c **** 	}
 176:tmk_core/protocol/lufa/lufa.c **** 
 177:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 178:tmk_core/protocol/lufa/lufa.c **** }
 179:tmk_core/protocol/lufa/lufa.c **** 
 180:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 181:tmk_core/protocol/lufa/lufa.c ****  *
 182:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 183:tmk_core/protocol/lufa/lufa.c ****  */
 184:tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 185:tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 186:tmk_core/protocol/lufa/lufa.c **** {
 187:tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 188:tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 189:tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 190:tmk_core/protocol/lufa/lufa.c **** }
 191:tmk_core/protocol/lufa/lufa.c **** 
 192:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 193:tmk_core/protocol/lufa/lufa.c ****  *
 194:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 195:tmk_core/protocol/lufa/lufa.c ****  */
 196:tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 197:tmk_core/protocol/lufa/lufa.c **** {
 198:tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 199:tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 200:tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 201:tmk_core/protocol/lufa/lufa.c **** 
 202:tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 203:tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 204:tmk_core/protocol/lufa/lufa.c **** 	return;
 205:tmk_core/protocol/lufa/lufa.c **** 
 206:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 207:tmk_core/protocol/lufa/lufa.c **** 
 208:tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 209:tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 210:tmk_core/protocol/lufa/lufa.c **** 	{
 211:tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 212:tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 213:tmk_core/protocol/lufa/lufa.c **** 		{
 214:tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 215:tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 216:tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 217:tmk_core/protocol/lufa/lufa.c **** 		}
 218:tmk_core/protocol/lufa/lufa.c **** 
 219:tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 220:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 221:tmk_core/protocol/lufa/lufa.c **** 
 222:tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 223:tmk_core/protocol/lufa/lufa.c **** 		{
 224:tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 225:tmk_core/protocol/lufa/lufa.c **** 		}
 226:tmk_core/protocol/lufa/lufa.c **** 	}
 227:tmk_core/protocol/lufa/lufa.c **** }
 228:tmk_core/protocol/lufa/lufa.c **** #endif
 229:tmk_core/protocol/lufa/lufa.c **** 
 230:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 231:tmk_core/protocol/lufa/lufa.c ****  * Console
 232:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 233:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 234:tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 235:tmk_core/protocol/lufa/lufa.c ****  *
 236:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 237:tmk_core/protocol/lufa/lufa.c ****  */
 238:tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 239:tmk_core/protocol/lufa/lufa.c **** {
 240:tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 241:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 242:tmk_core/protocol/lufa/lufa.c ****         return;
 243:tmk_core/protocol/lufa/lufa.c **** 
 244:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 245:tmk_core/protocol/lufa/lufa.c **** 
 246:tmk_core/protocol/lufa/lufa.c **** #if 0
 247:tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 248:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 249:tmk_core/protocol/lufa/lufa.c **** 
 250:tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 251:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 252:tmk_core/protocol/lufa/lufa.c ****     {
 253:tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 254:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 255:tmk_core/protocol/lufa/lufa.c ****         {
 256:tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 257:tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 258:tmk_core/protocol/lufa/lufa.c **** 
 259:tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 260:tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 261:tmk_core/protocol/lufa/lufa.c **** 
 262:tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 263:tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 264:tmk_core/protocol/lufa/lufa.c ****         }
 265:tmk_core/protocol/lufa/lufa.c **** 
 266:tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 267:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 268:tmk_core/protocol/lufa/lufa.c ****     }
 269:tmk_core/protocol/lufa/lufa.c **** #endif
 270:tmk_core/protocol/lufa/lufa.c **** 
 271:tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 272:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 273:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 274:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 275:tmk_core/protocol/lufa/lufa.c ****         return;
 276:tmk_core/protocol/lufa/lufa.c ****     }
 277:tmk_core/protocol/lufa/lufa.c **** 
 278:tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 279:tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 280:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 281:tmk_core/protocol/lufa/lufa.c **** 
 282:tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 283:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 284:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 285:tmk_core/protocol/lufa/lufa.c ****     }
 286:tmk_core/protocol/lufa/lufa.c **** 
 287:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 288:tmk_core/protocol/lufa/lufa.c **** }
 289:tmk_core/protocol/lufa/lufa.c **** #endif
 290:tmk_core/protocol/lufa/lufa.c **** 
 291:tmk_core/protocol/lufa/lufa.c **** 
 292:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 293:tmk_core/protocol/lufa/lufa.c ****  * USB Events
 294:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 295:tmk_core/protocol/lufa/lufa.c **** /*
 296:tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 297:tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 298:tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 299:tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 300:tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 301:tmk_core/protocol/lufa/lufa.c **** */
 302:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 303:tmk_core/protocol/lufa/lufa.c ****  *
 304:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 305:tmk_core/protocol/lufa/lufa.c ****  */
 306:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 307:tmk_core/protocol/lufa/lufa.c **** {
 308:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 309:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 310:tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 311:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 312:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 313:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 314:tmk_core/protocol/lufa/lufa.c ****     }
 315:tmk_core/protocol/lufa/lufa.c **** }
 316:tmk_core/protocol/lufa/lufa.c **** 
 317:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 318:tmk_core/protocol/lufa/lufa.c ****  *
 319:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 320:tmk_core/protocol/lufa/lufa.c ****  */
 321:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 322:tmk_core/protocol/lufa/lufa.c **** {
 323:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 324:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 325:tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 326:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 327:tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 328:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 329:tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 330:tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 331:tmk_core/protocol/lufa/lufa.c ****     }
 332:tmk_core/protocol/lufa/lufa.c **** */
 333:tmk_core/protocol/lufa/lufa.c **** }
 334:tmk_core/protocol/lufa/lufa.c **** 
 335:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 336:tmk_core/protocol/lufa/lufa.c ****  *
 337:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 338:tmk_core/protocol/lufa/lufa.c ****  */
 339:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 340:tmk_core/protocol/lufa/lufa.c **** {
 341:tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 342:tmk_core/protocol/lufa/lufa.c **** }
 343:tmk_core/protocol/lufa/lufa.c **** 
 344:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 345:tmk_core/protocol/lufa/lufa.c ****  *
 346:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 347:tmk_core/protocol/lufa/lufa.c ****  */
 348:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 349:tmk_core/protocol/lufa/lufa.c **** {
 350:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 351:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 352:tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 353:tmk_core/protocol/lufa/lufa.c **** #endif
 354:tmk_core/protocol/lufa/lufa.c **** }
 355:tmk_core/protocol/lufa/lufa.c **** 
 356:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 357:tmk_core/protocol/lufa/lufa.c ****  *
 358:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 359:tmk_core/protocol/lufa/lufa.c ****  */
 360:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 361:tmk_core/protocol/lufa/lufa.c **** {
 362:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 363:tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 364:tmk_core/protocol/lufa/lufa.c **** 
 365:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 366:tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 367:tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 368:tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 369:tmk_core/protocol/lufa/lufa.c **** #endif
 370:tmk_core/protocol/lufa/lufa.c **** }
 371:tmk_core/protocol/lufa/lufa.c **** 
 372:tmk_core/protocol/lufa/lufa.c **** 
 373:tmk_core/protocol/lufa/lufa.c **** 
 374:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 375:tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 376:tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 377:tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 378:tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 379:tmk_core/protocol/lufa/lufa.c ****   } \
 380:tmk_core/protocol/lufa/lufa.c **** } while (0)
 381:tmk_core/protocol/lufa/lufa.c **** 
 382:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 383:tmk_core/protocol/lufa/lufa.c ****  *
 384:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 385:tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 386:tmk_core/protocol/lufa/lufa.c ****  */
 387:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 388:tmk_core/protocol/lufa/lufa.c **** {
 389:tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 390:tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 391:tmk_core/protocol/lufa/lufa.c ****     count = 0;
 392:tmk_core/protocol/lufa/lufa.c **** 
 393:tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 394:tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 395:tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 396:tmk_core/protocol/lufa/lufa.c **** }
 397:tmk_core/protocol/lufa/lufa.c **** 
 398:tmk_core/protocol/lufa/lufa.c **** #endif
 399:tmk_core/protocol/lufa/lufa.c **** 
 400:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 401:tmk_core/protocol/lufa/lufa.c ****  *
 402:tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 403:tmk_core/protocol/lufa/lufa.c ****  *
 404:tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 405:tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 406:tmk_core/protocol/lufa/lufa.c ****  */
 407:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 408:tmk_core/protocol/lufa/lufa.c **** {
 409:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 410:tmk_core/protocol/lufa/lufa.c **** 
 411:tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 412:tmk_core/protocol/lufa/lufa.c **** #ifndef KEYBOARD_SHARED_EP
 413:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 414:tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 415:tmk_core/protocol/lufa/lufa.c **** #endif
 416:tmk_core/protocol/lufa/lufa.c **** 
 417:tmk_core/protocol/lufa/lufa.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 418:tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 419:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 420:tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 421:tmk_core/protocol/lufa/lufa.c **** #endif
 422:tmk_core/protocol/lufa/lufa.c **** 
 423:tmk_core/protocol/lufa/lufa.c **** #ifdef SHARED_EP_ENABLE
 424:tmk_core/protocol/lufa/lufa.c ****     /* Setup Shared HID Report Endpoint */
 425:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(SHARED_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 426:tmk_core/protocol/lufa/lufa.c ****                                      SHARED_EPSIZE, ENDPOINT_BANK_SINGLE);
 427:tmk_core/protocol/lufa/lufa.c **** #endif
 428:tmk_core/protocol/lufa/lufa.c **** 
 429:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 430:tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 431:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 432:tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 433:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 434:tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 435:tmk_core/protocol/lufa/lufa.c **** #endif
 436:tmk_core/protocol/lufa/lufa.c **** 
 437:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 438:tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 439:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 440:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:tmk_core/protocol/lufa/lufa.c **** #if 0
 442:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 443:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 444:tmk_core/protocol/lufa/lufa.c **** #endif
 445:tmk_core/protocol/lufa/lufa.c **** #endif
 446:tmk_core/protocol/lufa/lufa.c **** 
 447:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 448:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 449:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 450:tmk_core/protocol/lufa/lufa.c **** #endif
 451:tmk_core/protocol/lufa/lufa.c **** 
 452:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 453:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 454:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 455:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 456:tmk_core/protocol/lufa/lufa.c **** #endif
 457:tmk_core/protocol/lufa/lufa.c **** }
 458:tmk_core/protocol/lufa/lufa.c **** 
 459:tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 460:tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 461:tmk_core/protocol/lufa/lufa.c **** 
 462:tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 463:tmk_core/protocol/lufa/lufa.c **** 
 464:tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 465:tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 466:tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 467:tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 468:tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 469:tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 470:tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 471:tmk_core/protocol/lufa/lufa.c **** */
 472:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 473:tmk_core/protocol/lufa/lufa.c ****  *
 474:tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 475:tmk_core/protocol/lufa/lufa.c ****  */
 476:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 477:tmk_core/protocol/lufa/lufa.c **** {
 478:tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 479:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 480:tmk_core/protocol/lufa/lufa.c **** 
 481:tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 482:tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 483:tmk_core/protocol/lufa/lufa.c ****     {
 484:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 485:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 486:tmk_core/protocol/lufa/lufa.c ****             {
 487:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 488:tmk_core/protocol/lufa/lufa.c **** 
 489:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 490:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 491:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 492:tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 493:tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 494:tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 495:tmk_core/protocol/lufa/lufa.c ****                     break;
 496:tmk_core/protocol/lufa/lufa.c ****                 }
 497:tmk_core/protocol/lufa/lufa.c **** 
 498:tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 499:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 500:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 501:tmk_core/protocol/lufa/lufa.c ****             }
 502:tmk_core/protocol/lufa/lufa.c **** 
 503:tmk_core/protocol/lufa/lufa.c ****             break;
 504:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 505:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 506:tmk_core/protocol/lufa/lufa.c ****             {
 507:tmk_core/protocol/lufa/lufa.c **** 
 508:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 509:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 510:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 511:tmk_core/protocol/lufa/lufa.c **** #if defined(SHARED_EP_ENABLE) && !defined(KEYBOARD_SHARED_EP)
 512:tmk_core/protocol/lufa/lufa.c ****                 case SHARED_INTERFACE:
 513:tmk_core/protocol/lufa/lufa.c **** #endif
 514:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 515:tmk_core/protocol/lufa/lufa.c **** 
 516:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 517:tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 518:tmk_core/protocol/lufa/lufa.c ****                           return;
 519:tmk_core/protocol/lufa/lufa.c ****                     }
 520:tmk_core/protocol/lufa/lufa.c **** 
 521:tmk_core/protocol/lufa/lufa.c ****                     if (Endpoint_BytesInEndpoint() == 2) {
 522:tmk_core/protocol/lufa/lufa.c ****                       uint8_t report_id = Endpoint_Read_8();
 523:tmk_core/protocol/lufa/lufa.c **** 
 524:tmk_core/protocol/lufa/lufa.c ****                       if (report_id == REPORT_ID_KEYBOARD || report_id == REPORT_ID_NKRO) {
 525:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 526:tmk_core/protocol/lufa/lufa.c ****                       }
 527:tmk_core/protocol/lufa/lufa.c ****                     } else {
 528:tmk_core/protocol/lufa/lufa.c ****                       keyboard_led_stats = Endpoint_Read_8();
 529:tmk_core/protocol/lufa/lufa.c ****                     }
 530:tmk_core/protocol/lufa/lufa.c **** 
 531:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 532:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 533:tmk_core/protocol/lufa/lufa.c ****                     break;
 534:tmk_core/protocol/lufa/lufa.c ****                 }
 535:tmk_core/protocol/lufa/lufa.c **** 
 536:tmk_core/protocol/lufa/lufa.c ****             }
 537:tmk_core/protocol/lufa/lufa.c **** 
 538:tmk_core/protocol/lufa/lufa.c ****             break;
 539:tmk_core/protocol/lufa/lufa.c **** 
 540:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 541:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 542:tmk_core/protocol/lufa/lufa.c ****             {
 543:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 544:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 545:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 546:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 547:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 548:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 549:tmk_core/protocol/lufa/lufa.c ****                 }
 550:tmk_core/protocol/lufa/lufa.c ****             }
 551:tmk_core/protocol/lufa/lufa.c **** 
 552:tmk_core/protocol/lufa/lufa.c ****             break;
 553:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 554:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 555:tmk_core/protocol/lufa/lufa.c ****             {
 556:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 557:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 558:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 559:tmk_core/protocol/lufa/lufa.c **** 
 560:tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 561:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 562:tmk_core/protocol/lufa/lufa.c ****                 }
 563:tmk_core/protocol/lufa/lufa.c ****             }
 564:tmk_core/protocol/lufa/lufa.c **** 
 565:tmk_core/protocol/lufa/lufa.c ****             break;
 566:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 567:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 568:tmk_core/protocol/lufa/lufa.c ****             {
 569:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 570:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 571:tmk_core/protocol/lufa/lufa.c **** 
 572:tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 573:tmk_core/protocol/lufa/lufa.c ****             }
 574:tmk_core/protocol/lufa/lufa.c **** 
 575:tmk_core/protocol/lufa/lufa.c ****             break;
 576:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 577:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 578:tmk_core/protocol/lufa/lufa.c ****             {
 579:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 580:tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 581:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 582:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 583:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 584:tmk_core/protocol/lufa/lufa.c ****             }
 585:tmk_core/protocol/lufa/lufa.c **** 
 586:tmk_core/protocol/lufa/lufa.c ****             break;
 587:tmk_core/protocol/lufa/lufa.c ****     }
 588:tmk_core/protocol/lufa/lufa.c **** 
 589:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 590:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 591:tmk_core/protocol/lufa/lufa.c **** #endif
 592:tmk_core/protocol/lufa/lufa.c **** }
 593:tmk_core/protocol/lufa/lufa.c **** 
 594:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 595:tmk_core/protocol/lufa/lufa.c ****  * Host driver
 596:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 597:tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 598:tmk_core/protocol/lufa/lufa.c ****  *
 599:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 600:tmk_core/protocol/lufa/lufa.c ****  */
 601:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 602:tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 602 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 603:tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 604:tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 604 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE128:
  27               		.section	.text.send_mouse,"ax",@progbits
  29               	send_mouse:
  30               	.LFB130:
 605:tmk_core/protocol/lufa/lufa.c **** 
 606:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 607:tmk_core/protocol/lufa/lufa.c ****  *
 608:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 609:tmk_core/protocol/lufa/lufa.c ****  */
 610:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 611:tmk_core/protocol/lufa/lufa.c **** {
 612:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 613:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 614:tmk_core/protocol/lufa/lufa.c **** 
 615:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 616:tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 617:tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 618:tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 619:tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 620:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 621:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x09);
 622:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x01);
 623:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->mods);
 624:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->reserved);
 625:tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 626:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->keys[i]);
 627:tmk_core/protocol/lufa/lufa.c ****       }
 628:tmk_core/protocol/lufa/lufa.c ****     #else
 629:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 630:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->mods);
 631:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->reserved);
 632:tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 633:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->keys[i]);
 634:tmk_core/protocol/lufa/lufa.c ****       }
 635:tmk_core/protocol/lufa/lufa.c ****     #endif
 636:tmk_core/protocol/lufa/lufa.c ****   }
 637:tmk_core/protocol/lufa/lufa.c **** #endif
 638:tmk_core/protocol/lufa/lufa.c **** 
 639:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 640:tmk_core/protocol/lufa/lufa.c ****       return;
 641:tmk_core/protocol/lufa/lufa.c ****     }
 642:tmk_core/protocol/lufa/lufa.c **** 
 643:tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 644:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = KEYBOARD_IN_EPNUM;
 645:tmk_core/protocol/lufa/lufa.c ****     uint8_t size = KEYBOARD_REPORT_SIZE;
 646:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 647:tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 648:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
 649:tmk_core/protocol/lufa/lufa.c ****         size = sizeof(struct nkro_report);
 650:tmk_core/protocol/lufa/lufa.c ****     }
 651:tmk_core/protocol/lufa/lufa.c **** #endif
 652:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 653:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 654:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 655:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 656:tmk_core/protocol/lufa/lufa.c **** 
 657:tmk_core/protocol/lufa/lufa.c ****     /* If we're in Boot Protocol, don't send any report ID or other funky fields */
 658:tmk_core/protocol/lufa/lufa.c ****     if (!keyboard_protocol) {
 659:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 660:tmk_core/protocol/lufa/lufa.c ****     } else {
 661:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, size, NULL);
 662:tmk_core/protocol/lufa/lufa.c ****     }
 663:tmk_core/protocol/lufa/lufa.c **** 
 664:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 665:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 666:tmk_core/protocol/lufa/lufa.c **** 
 667:tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 668:tmk_core/protocol/lufa/lufa.c **** }
 669:tmk_core/protocol/lufa/lufa.c ****  
 670:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 671:tmk_core/protocol/lufa/lufa.c ****  *
 672:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 673:tmk_core/protocol/lufa/lufa.c ****  */
 674:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 675:tmk_core/protocol/lufa/lufa.c **** {
  31               		.loc 1 675 0
  32               		.cfi_startproc
  33               	.LVL0:
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 0 */
  37               	.L__stack_usage = 0
  38 0000 0895      		ret
  39               		.cfi_endproc
  40               	.LFE130:
  42               		.section	.text.send_consumer,"ax",@progbits
  44               	send_consumer:
  45               	.LFB132:
 676:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 677:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 678:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 679:tmk_core/protocol/lufa/lufa.c **** 
 680:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 681:tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 682:tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 683:tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 684:tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 685:tmk_core/protocol/lufa/lufa.c ****     #else
 686:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 687:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 688:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 689:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 690:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 691:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 692:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 693:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 694:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 695:tmk_core/protocol/lufa/lufa.c ****     #endif
 696:tmk_core/protocol/lufa/lufa.c ****   }
 697:tmk_core/protocol/lufa/lufa.c **** #endif
 698:tmk_core/protocol/lufa/lufa.c **** 
 699:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 700:tmk_core/protocol/lufa/lufa.c ****       return;
 701:tmk_core/protocol/lufa/lufa.c ****     }
 702:tmk_core/protocol/lufa/lufa.c **** 
 703:tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 704:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 705:tmk_core/protocol/lufa/lufa.c **** 
 706:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 707:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 708:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 709:tmk_core/protocol/lufa/lufa.c **** 
 710:tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 711:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 712:tmk_core/protocol/lufa/lufa.c **** 
 713:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 714:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 715:tmk_core/protocol/lufa/lufa.c **** #endif
 716:tmk_core/protocol/lufa/lufa.c **** }
 717:tmk_core/protocol/lufa/lufa.c **** 
 718:tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 719:tmk_core/protocol/lufa/lufa.c ****  *
 720:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 721:tmk_core/protocol/lufa/lufa.c ****  */
 722:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 723:tmk_core/protocol/lufa/lufa.c **** {
 724:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 725:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 726:tmk_core/protocol/lufa/lufa.c **** 
 727:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 728:tmk_core/protocol/lufa/lufa.c ****         return;
 729:tmk_core/protocol/lufa/lufa.c **** 
 730:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 731:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 732:tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 733:tmk_core/protocol/lufa/lufa.c ****     };
 734:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 735:tmk_core/protocol/lufa/lufa.c **** 
 736:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 737:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 738:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 739:tmk_core/protocol/lufa/lufa.c **** 
 740:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 741:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 742:tmk_core/protocol/lufa/lufa.c **** #endif
 743:tmk_core/protocol/lufa/lufa.c **** }
 744:tmk_core/protocol/lufa/lufa.c **** 
 745:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 746:tmk_core/protocol/lufa/lufa.c ****  *
 747:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 748:tmk_core/protocol/lufa/lufa.c ****  */
 749:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 750:tmk_core/protocol/lufa/lufa.c **** {
  46               		.loc 1 750 0
  47               		.cfi_startproc
  48               	.LVL1:
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  53 0000 0895      		ret
  54               		.cfi_endproc
  55               	.LFE132:
  57               		.section	.text.send_keyboard,"ax",@progbits
  59               	send_keyboard:
  60               	.LFB129:
 611:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
  61               		.loc 1 611 0
  62               		.cfi_startproc
  63               	.LVL2:
 611:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
  64               		.loc 1 611 0
  65 0000 CF93      		push r28
  66               	.LCFI0:
  67               		.cfi_def_cfa_offset 3
  68               		.cfi_offset 28, -2
  69 0002 DF93      		push r29
  70               	.LCFI1:
  71               		.cfi_def_cfa_offset 4
  72               		.cfi_offset 29, -3
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 2 */
  76               	.L__stack_usage = 2
  77 0004 EC01      		movw r28,r24
  78               	.LVL3:
 613:tmk_core/protocol/lufa/lufa.c **** 
  79               		.loc 1 613 0
  80 0006 0E94 0000 		call where_to_send
  81               	.LVL4:
 639:tmk_core/protocol/lufa/lufa.c ****       return;
  82               		.loc 1 639 0
  83 000a 8230      		cpi r24,lo8(2)
  84 000c 01F0      		breq .L5
 639:tmk_core/protocol/lufa/lufa.c ****       return;
  85               		.loc 1 639 0 is_stmt 0 discriminator 1
  86 000e 8430      		cpi r24,lo8(4)
  87 0010 01F4      		brne .L4
  88               	.L5:
  89               	.LVL5:
 647:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
  90               		.loc 1 647 0 is_stmt 1
  91 0012 8091 0000 		lds r24,keyboard_protocol
  92               	.LVL6:
  93 0016 8823      		tst r24
  94 0018 01F0      		breq .L15
 647:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
  95               		.loc 1 647 0 is_stmt 0 discriminator 1
  96 001a 8091 0000 		lds r24,keymap_config
  97 001e 87FF      		sbrs r24,7
  98 0020 00C0      		rjmp .L15
 649:tmk_core/protocol/lufa/lufa.c ****     }
  99               		.loc 1 649 0 is_stmt 1
 100 0022 60E2      		ldi r22,lo8(32)
 648:tmk_core/protocol/lufa/lufa.c ****         size = sizeof(struct nkro_report);
 101               		.loc 1 648 0
 102 0024 82E0      		ldi r24,lo8(2)
 103 0026 00C0      		rjmp .L7
 104               	.L15:
 645:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 105               		.loc 1 645 0
 106 0028 68E0      		ldi r22,lo8(8)
 644:tmk_core/protocol/lufa/lufa.c ****     uint8_t size = KEYBOARD_REPORT_SIZE;
 107               		.loc 1 644 0
 108 002a 81E0      		ldi r24,lo8(1)
 109               	.L7:
 110               	.LVL7:
 111               	.LBB82:
 112               	.LBB83:
 113               		.file 2 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 114               		.loc 2 270 0
 115 002c 8093 E900 		sts 233,r24
 116               	.LVL8:
 117 0030 8FEF      		ldi r24,lo8(-1)
 118               	.LVL9:
 119               	.L8:
 120               	.LBE83:
 121               	.LBE82:
 122               	.LBB84:
 123               	.LBB85:
 271:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 124               		.loc 2 360 0
 125 0032 9091 E800 		lds r25,232
 126 0036 8150      		subi r24,lo8(-(-1))
 127               	.LVL10:
 128               	.LBE85:
 129               	.LBE84:
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 130               		.loc 1 654 0
 131 0038 95FD      		sbrc r25,5
 132 003a 00C0      		rjmp .L9
 133               	.LVL11:
 134               	.LBB86:
 135               	.LBB87:
 136               		.file 3 "c:\\msys64_2\\home\\egypt2\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h"
   1:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 256:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 258:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 262:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 137               		.loc 3 276 0
 138 003c 95ED      		ldi r25,lo8(-43)
 139 003e 9A95      	1:	dec r25
 140 0040 01F4      		brne 1b
 141 0042 0000      		nop
 142               	.LVL12:
 143               	.LBE87:
 144               	.LBE86:
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 145               		.loc 1 654 0
 146 0044 8111      		cpse r24,__zero_reg__
 147 0046 00C0      		rjmp .L8
 148               	.LVL13:
 149               	.L9:
 150               	.LBB88:
 151               	.LBB89:
 152               		.loc 2 360 0
 153 0048 8091 E800 		lds r24,232
 154               	.LBE89:
 155               	.LBE88:
 655:tmk_core/protocol/lufa/lufa.c **** 
 156               		.loc 1 655 0
 157 004c 85FF      		sbrs r24,5
 158 004e 00C0      		rjmp .L4
 658:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 159               		.loc 1 658 0
 160 0050 8091 0000 		lds r24,keyboard_protocol
 161 0054 8111      		cpse r24,__zero_reg__
 162 0056 00C0      		rjmp .L12
 659:tmk_core/protocol/lufa/lufa.c ****     } else {
 163               		.loc 1 659 0
 164 0058 40E0      		ldi r20,0
 165 005a 50E0      		ldi r21,0
 166 005c 68E0      		ldi r22,lo8(8)
 167 005e 70E0      		ldi r23,0
 168               	.LVL14:
 169 0060 00C0      		rjmp .L28
 170               	.LVL15:
 171               	.L12:
 661:tmk_core/protocol/lufa/lufa.c ****     }
 172               		.loc 1 661 0
 173 0062 70E0      		ldi r23,0
 174 0064 40E0      		ldi r20,0
 175 0066 50E0      		ldi r21,0
 176               	.LVL16:
 177               	.L28:
 178 0068 CE01      		movw r24,r28
 179 006a 0E94 0000 		call Endpoint_Write_Stream_LE
 180               	.LVL17:
 181               	.LBB90:
 182               	.LBB91:
 361:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 183               		.loc 2 456 0
 184 006e 8091 E800 		lds r24,232
 185 0072 8E77      		andi r24,lo8(126)
 186 0074 8093 E800 		sts 232,r24
 187               	.LBE91:
 188               	.LBE90:
 667:tmk_core/protocol/lufa/lufa.c **** }
 189               		.loc 1 667 0
 190 0078 80E2      		ldi r24,lo8(32)
 191 007a FE01      		movw r30,r28
 192 007c A0E0      		ldi r26,lo8(keyboard_report_sent)
 193 007e B0E0      		ldi r27,hi8(keyboard_report_sent)
 194               		0:
 195 0080 0190      		ld r0,Z+
 196 0082 0D92      		st X+,r0
 197 0084 8A95      		dec r24
 198 0086 01F4      		brne 0b
 199               	.L4:
 200               	/* epilogue start */
 668:tmk_core/protocol/lufa/lufa.c ****  
 201               		.loc 1 668 0
 202 0088 DF91      		pop r29
 203 008a CF91      		pop r28
 204               	.LVL18:
 205 008c 0895      		ret
 206               		.cfi_endproc
 207               	.LFE129:
 209               		.section	.text.send_system,"ax",@progbits
 211               	send_system:
 212               	.LFB143:
 213               		.cfi_startproc
 214               	/* prologue: function */
 215               	/* frame size = 0 */
 216               	/* stack size = 0 */
 217               	.L__stack_usage = 0
 218 0000 0895      		ret
 219               		.cfi_endproc
 220               	.LFE143:
 222               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 223               	.global	EVENT_USB_Device_Connect
 225               	EVENT_USB_Device_Connect:
 226               	.LFB121:
 307:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 227               		.loc 1 307 0
 228               		.cfi_startproc
 229               	/* prologue: function */
 230               	/* frame size = 0 */
 231               	/* stack size = 0 */
 232               	.L__stack_usage = 0
 310:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 233               		.loc 1 310 0
 234 0000 8091 0000 		lds r24,USB_IsInitialized
 235 0004 8111      		cpse r24,__zero_reg__
 236 0006 00C0      		rjmp .L31
 311:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 237               		.loc 1 311 0
 238 0008 0E94 0000 		call USB_Disable
 239               	.LVL19:
 312:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 240               		.loc 1 312 0
 241 000c 0E94 0000 		call USB_Init
 242               	.LVL20:
 243               	.LBB92:
 244               	.LBB93:
 245               	.LBB94:
 246               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 247               		.loc 4 113 0
 248 0010 8091 E200 		lds r24,226
 249 0014 8460      		ori r24,lo8(4)
 250 0016 8093 E200 		sts 226,r24
 251               	.LVL21:
 252               	.L31:
 253 001a 0895      		ret
 254               	.LBE94:
 255               	.LBE93:
 256               	.LBE92:
 257               		.cfi_endproc
 258               	.LFE121:
 260               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 261               	.global	EVENT_USB_Device_Disconnect
 263               	EVENT_USB_Device_Disconnect:
 264               	.LFB122:
 322:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 265               		.loc 1 322 0
 266               		.cfi_startproc
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 0 */
 270               	.L__stack_usage = 0
 325:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 271               		.loc 1 325 0
 272 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 273 0004 0895      		ret
 274               		.cfi_endproc
 275               	.LFE122:
 277               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 278               	.global	EVENT_USB_Device_Reset
 280               	EVENT_USB_Device_Reset:
 281               	.LFB145:
 282               		.cfi_startproc
 283               	/* prologue: function */
 284               	/* frame size = 0 */
 285               	/* stack size = 0 */
 286               	.L__stack_usage = 0
 287 0000 0895      		ret
 288               		.cfi_endproc
 289               	.LFE145:
 291               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 292               	.global	EVENT_USB_Device_Suspend
 294               	EVENT_USB_Device_Suspend:
 295               	.LFB124:
 349:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 296               		.loc 1 349 0
 297               		.cfi_startproc
 298               	/* prologue: function */
 299               	/* frame size = 0 */
 300               	/* stack size = 0 */
 301               	.L__stack_usage = 0
 302 0000 0895      		ret
 303               		.cfi_endproc
 304               	.LFE124:
 306               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 307               	.global	EVENT_USB_Device_WakeUp
 309               	EVENT_USB_Device_WakeUp:
 310               	.LFB125:
 361:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 311               		.loc 1 361 0
 312               		.cfi_startproc
 313               	/* prologue: function */
 314               	/* frame size = 0 */
 315               	/* stack size = 0 */
 316               	.L__stack_usage = 0
 363:tmk_core/protocol/lufa/lufa.c **** 
 317               		.loc 1 363 0
 318 0000 0C94 0000 		jmp suspend_wakeup_init
 319               	.LVL22:
 320               		.cfi_endproc
 321               	.LFE125:
 323               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 324               	.global	EVENT_USB_Device_ConfigurationChanged
 326               	EVENT_USB_Device_ConfigurationChanged:
 327               	.LFB126:
 408:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 328               		.loc 1 408 0
 329               		.cfi_startproc
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
 334               	.LVL23:
 335               	.LBB95:
 336               	.LBB96:
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 337               		.loc 2 210 0
 338 0000 42E0      		ldi r20,lo8(2)
 339 0002 61EC      		ldi r22,lo8(-63)
 340 0004 81E0      		ldi r24,lo8(1)
 341 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 342               	.LVL24:
 343               	.LBE96:
 344               	.LBE95:
 345               	.LBB97:
 346               	.LBB98:
 347 000a 42E2      		ldi r20,lo8(34)
 348 000c 61EC      		ldi r22,lo8(-63)
 349 000e 82E0      		ldi r24,lo8(2)
 350 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 351               	.LVL25:
 352               	.LBE98:
 353               	.LBE97:
 354               	.LBB99:
 355               	.LBB100:
 356 0014 42E3      		ldi r20,lo8(50)
 357 0016 61E8      		ldi r22,lo8(-127)
 358 0018 83E0      		ldi r24,lo8(3)
 359 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 360               	.LVL26:
 361               	.LBE100:
 362               	.LBE99:
 363               	.LBB101:
 364               	.LBB102:
 365 001e 42E3      		ldi r20,lo8(50)
 366 0020 60E8      		ldi r22,lo8(-128)
 367 0022 84E0      		ldi r24,lo8(4)
 368 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 369               	.LVL27:
 370               	.LBE102:
 371               	.LBE101:
 372               		.cfi_endproc
 373               	.LFE126:
 375               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 376               	.global	EVENT_USB_Device_ControlRequest
 378               	EVENT_USB_Device_ControlRequest:
 379               	.LFB127:
 477:tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 380               		.loc 1 477 0
 381               		.cfi_startproc
 382               	/* prologue: function */
 383               	/* frame size = 0 */
 384               	/* stack size = 0 */
 385               	.L__stack_usage = 0
 386               	.LVL28:
 482:tmk_core/protocol/lufa/lufa.c ****     {
 387               		.loc 1 482 0
 388 0000 8091 0000 		lds r24,USB_ControlRequest+1
 389 0004 8330      		cpi r24,lo8(3)
 390 0006 01F4      		brne .+2
 391 0008 00C0      		rjmp .L40
 392 000a 00F4      		brsh .L41
 393 000c 8130      		cpi r24,lo8(1)
 394 000e 01F0      		breq .L42
 395 0010 8230      		cpi r24,lo8(2)
 396 0012 01F4      		brne .+2
 397 0014 00C0      		rjmp .L43
 398 0016 0895      		ret
 399               	.L41:
 400 0018 8A30      		cpi r24,lo8(10)
 401 001a 01F4      		brne .+2
 402 001c 00C0      		rjmp .L44
 403 001e 8B30      		cpi r24,lo8(11)
 404 0020 01F4      		brne .+2
 405 0022 00C0      		rjmp .L45
 406 0024 8930      		cpi r24,lo8(9)
 407 0026 01F0      		breq .+2
 408 0028 00C0      		rjmp .L38
 409 002a 00C0      		rjmp .L69
 410               	.L42:
 485:tmk_core/protocol/lufa/lufa.c ****             {
 411               		.loc 1 485 0
 412 002c 8091 0000 		lds r24,USB_ControlRequest
 413 0030 813A      		cpi r24,lo8(-95)
 414 0032 01F0      		breq .+2
 415 0034 00C0      		rjmp .L38
 416               	.LBB103:
 417               	.LBB104:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 418               		.loc 2 444 0
 419 0036 8091 E800 		lds r24,232
 420 003a 877F      		andi r24,lo8(-9)
 421 003c 8093 E800 		sts 232,r24
 422               	.LBE104:
 423               	.LBE103:
 490:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 424               		.loc 1 490 0
 425 0040 8091 0000 		lds r24,USB_ControlRequest+4
 426 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 427 0048 892B      		or r24,r25
 428 004a 01F4      		brne .L66
 494:tmk_core/protocol/lufa/lufa.c ****                     break;
 429               		.loc 1 494 0
 430 004c 60E2      		ldi r22,lo8(32)
 493:tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 431               		.loc 1 493 0
 432 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 433 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 434 0052 00C0      		rjmp .L48
 435               	.L66:
 479:tmk_core/protocol/lufa/lufa.c **** 
 436               		.loc 1 479 0
 437 0054 60E0      		ldi r22,0
 478:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 438               		.loc 1 478 0
 439 0056 80E0      		ldi r24,0
 440 0058 90E0      		ldi r25,0
 441               	.L48:
 442               	.LVL29:
 499:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 443               		.loc 1 499 0
 444 005a 70E0      		ldi r23,0
 445 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 446               	.LVL30:
 447               	.LBB105:
 448               	.LBB106:
 457:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 449               		.loc 2 471 0
 450 0060 8091 E800 		lds r24,232
 451 0064 8B77      		andi r24,lo8(123)
 452 0066 8093 E800 		sts 232,r24
 453 006a 0895      		ret
 454               	.LVL31:
 455               	.L69:
 456               	.LBE106:
 457               	.LBE105:
 505:tmk_core/protocol/lufa/lufa.c ****             {
 458               		.loc 1 505 0
 459 006c 8091 0000 		lds r24,USB_ControlRequest
 460 0070 8132      		cpi r24,lo8(33)
 461 0072 01F0      		breq .+2
 462 0074 00C0      		rjmp .L38
 509:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 463               		.loc 1 509 0
 464 0076 8091 0000 		lds r24,USB_ControlRequest+4
 465 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 466 007e 0297      		sbiw r24,2
 467 0080 00F0      		brlo .+2
 468 0082 00C0      		rjmp .L38
 469               	.LBB107:
 470               	.LBB108:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 471               		.loc 2 444 0
 472 0084 8091 E800 		lds r24,232
 473 0088 877F      		andi r24,lo8(-9)
 474 008a 8093 E800 		sts 232,r24
 475               	.L52:
 476               	.LBE108:
 477               	.LBE107:
 478               	.LBB109:
 479               	.LBB110:
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 480               		.loc 2 419 0
 481 008e 8091 E800 		lds r24,232
 482               	.LBE110:
 483               	.LBE109:
 516:tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 484               		.loc 1 516 0
 485 0092 82FD      		sbrc r24,2
 486 0094 00C0      		rjmp .L70
 517:tmk_core/protocol/lufa/lufa.c ****                           return;
 487               		.loc 1 517 0
 488 0096 8091 0000 		lds r24,USB_DeviceState
 489 009a 8111      		cpse r24,__zero_reg__
 490 009c 00C0      		rjmp .L52
 491 009e 00C0      		rjmp .L38
 492               	.L70:
 493               	.LBB111:
 494               	.LBB112:
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 495               		.loc 2 227 0
 496 00a0 2091 F300 		lds r18,243
 497 00a4 8091 F200 		lds r24,242
 498               	.LBE112:
 499               	.LBE111:
 521:tmk_core/protocol/lufa/lufa.c ****                       uint8_t report_id = Endpoint_Read_8();
 500               		.loc 1 521 0
 501 00a8 90E0      		ldi r25,0
 502 00aa 922B      		or r25,r18
 503 00ac 0297      		sbiw r24,2
 504 00ae 01F4      		brne .L54
 505               	.LBB113:
 506               	.LBB114:
 507               	.LBB115:
 472:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 508               		.loc 2 542 0
 509 00b0 8091 F100 		lds r24,241
 510               	.LBE115:
 511               	.LBE114:
 524:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 512               		.loc 1 524 0
 513 00b4 8B7F      		andi r24,lo8(-5)
 514 00b6 8130      		cpi r24,lo8(1)
 515 00b8 01F4      		brne .L55
 516               	.L54:
 517               	.LBE113:
 518               	.LBB116:
 519               	.LBB117:
 520               		.loc 2 542 0
 521 00ba 8091 F100 		lds r24,241
 522               	.LBE117:
 523               	.LBE116:
 528:tmk_core/protocol/lufa/lufa.c ****                     }
 524               		.loc 1 528 0
 525 00be 8093 0000 		sts keyboard_led_stats,r24
 526               	.L55:
 527               	.LBB118:
 528               	.LBB119:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 529               		.loc 2 471 0
 530 00c2 8091 E800 		lds r24,232
 531 00c6 8B77      		andi r24,lo8(123)
 532 00c8 00C0      		rjmp .L67
 533               	.L40:
 534               	.LBE119:
 535               	.LBE118:
 541:tmk_core/protocol/lufa/lufa.c ****             {
 536               		.loc 1 541 0
 537 00ca 8091 0000 		lds r24,USB_ControlRequest
 538 00ce 813A      		cpi r24,lo8(-95)
 539 00d0 01F0      		breq .+2
 540 00d2 00C0      		rjmp .L38
 543:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 541               		.loc 1 543 0
 542 00d4 8091 0000 		lds r24,USB_ControlRequest+4
 543 00d8 9091 0000 		lds r25,USB_ControlRequest+4+1
 544 00dc 892B      		or r24,r25
 545 00de 01F0      		breq .+2
 546 00e0 00C0      		rjmp .L38
 547               	.LBB120:
 548               	.LBB121:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 549               		.loc 2 444 0
 550 00e2 8091 E800 		lds r24,232
 551 00e6 877F      		andi r24,lo8(-9)
 552 00e8 8093 E800 		sts 232,r24
 553               	.L56:
 554               	.LBE121:
 555               	.LBE120:
 556               	.LBB122:
 557               	.LBB123:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 558               		.loc 2 407 0 discriminator 1
 559 00ec 8091 E800 		lds r24,232
 560               	.LBE123:
 561               	.LBE122:
 545:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 562               		.loc 1 545 0 discriminator 1
 563 00f0 80FF      		sbrs r24,0
 564 00f2 00C0      		rjmp .L56
 546:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 565               		.loc 1 546 0
 566 00f4 8091 0000 		lds r24,keyboard_protocol
 567               	.LVL32:
 568 00f8 00C0      		rjmp .L68
 569               	.LVL33:
 570               	.L45:
 554:tmk_core/protocol/lufa/lufa.c ****             {
 571               		.loc 1 554 0
 572 00fa 8091 0000 		lds r24,USB_ControlRequest
 573 00fe 8132      		cpi r24,lo8(33)
 574 0100 01F4      		brne .L38
 556:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 575               		.loc 1 556 0
 576 0102 8091 0000 		lds r24,USB_ControlRequest+4
 577 0106 9091 0000 		lds r25,USB_ControlRequest+4+1
 578 010a 892B      		or r24,r25
 579 010c 01F4      		brne .L38
 580               	.LBB124:
 581               	.LBB125:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582               		.loc 2 444 0
 583 010e 8091 E800 		lds r24,232
 584 0112 877F      		andi r24,lo8(-9)
 585 0114 8093 E800 		sts 232,r24
 586               	.LBE125:
 587               	.LBE124:
 558:tmk_core/protocol/lufa/lufa.c **** 
 588               		.loc 1 558 0
 589 0118 0E94 0000 		call Endpoint_ClearStatusStage
 590               	.LVL34:
 560:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 591               		.loc 1 560 0
 592 011c 8091 0000 		lds r24,USB_ControlRequest+2
 593 0120 8093 0000 		sts keyboard_protocol,r24
 561:tmk_core/protocol/lufa/lufa.c ****                 }
 594               		.loc 1 561 0
 595 0124 0C94 0000 		jmp clear_keyboard
 596               	.LVL35:
 597               	.L44:
 567:tmk_core/protocol/lufa/lufa.c ****             {
 598               		.loc 1 567 0
 599 0128 8091 0000 		lds r24,USB_ControlRequest
 600 012c 8132      		cpi r24,lo8(33)
 601 012e 01F4      		brne .L38
 602               	.LBB126:
 603               	.LBB127:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 604               		.loc 2 444 0
 605 0130 8091 E800 		lds r24,232
 606 0134 877F      		andi r24,lo8(-9)
 607 0136 8093 E800 		sts 232,r24
 608               	.LBE127:
 609               	.LBE126:
 570:tmk_core/protocol/lufa/lufa.c **** 
 610               		.loc 1 570 0
 611 013a 0E94 0000 		call Endpoint_ClearStatusStage
 612               	.LVL36:
 572:tmk_core/protocol/lufa/lufa.c ****             }
 613               		.loc 1 572 0
 614 013e 8091 0000 		lds r24,USB_ControlRequest+3
 615 0142 8093 0000 		sts keyboard_idle,r24
 616 0146 0895      		ret
 617               	.L43:
 577:tmk_core/protocol/lufa/lufa.c ****             {
 618               		.loc 1 577 0
 619 0148 8091 0000 		lds r24,USB_ControlRequest
 620 014c 813A      		cpi r24,lo8(-95)
 621 014e 01F4      		brne .L38
 622               	.LBB128:
 623               	.LBB129:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 624               		.loc 2 444 0
 625 0150 8091 E800 		lds r24,232
 626 0154 877F      		andi r24,lo8(-9)
 627 0156 8093 E800 		sts 232,r24
 628               	.L57:
 629               	.LBE129:
 630               	.LBE128:
 631               	.LBB130:
 632               	.LBB131:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 633               		.loc 2 407 0 discriminator 1
 634 015a 8091 E800 		lds r24,232
 635               	.LBE131:
 636               	.LBE130:
 580:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 637               		.loc 1 580 0 discriminator 1
 638 015e 80FF      		sbrs r24,0
 639 0160 00C0      		rjmp .L57
 581:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 640               		.loc 1 581 0
 641 0162 8091 0000 		lds r24,keyboard_idle
 642               	.L68:
 643               	.LVL37:
 644               	.LBB132:
 645               	.LBB133:
 543:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 646               		.loc 2 554 0
 647 0166 8093 F100 		sts 241,r24
 648               	.LVL38:
 649               	.LBE133:
 650               	.LBE132:
 651               	.LBB134:
 652               	.LBB135:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 653               		.loc 2 456 0
 654 016a 8091 E800 		lds r24,232
 655 016e 8E77      		andi r24,lo8(126)
 656               	.L67:
 657 0170 8093 E800 		sts 232,r24
 658               	.LBE135:
 659               	.LBE134:
 583:tmk_core/protocol/lufa/lufa.c ****             }
 660               		.loc 1 583 0
 661 0174 0C94 0000 		jmp Endpoint_ClearStatusStage
 662               	.LVL39:
 663               	.L38:
 664 0178 0895      		ret
 665               		.cfi_endproc
 666               	.LFE127:
 668               		.section	.text.sendchar,"ax",@progbits
 669               	.global	sendchar
 671               	sendchar:
 672               	.LFB133:
 751:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 752:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 753:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 754:tmk_core/protocol/lufa/lufa.c **** 
 755:tmk_core/protocol/lufa/lufa.c **** 
 756:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 757:tmk_core/protocol/lufa/lufa.c ****       return;
 758:tmk_core/protocol/lufa/lufa.c ****     }
 759:tmk_core/protocol/lufa/lufa.c **** 
 760:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 761:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 762:tmk_core/protocol/lufa/lufa.c ****         .usage = data
 763:tmk_core/protocol/lufa/lufa.c ****     };
 764:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 765:tmk_core/protocol/lufa/lufa.c **** 
 766:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 767:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 768:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 769:tmk_core/protocol/lufa/lufa.c **** 
 770:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 771:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 772:tmk_core/protocol/lufa/lufa.c **** #endif
 773:tmk_core/protocol/lufa/lufa.c **** }
 774:tmk_core/protocol/lufa/lufa.c **** 
 775:tmk_core/protocol/lufa/lufa.c **** 
 776:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 777:tmk_core/protocol/lufa/lufa.c ****  * sendchar
 778:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 779:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 780:tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 781:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 782:tmk_core/protocol/lufa/lufa.c ****  *
 783:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 784:tmk_core/protocol/lufa/lufa.c ****  */
 785:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 786:tmk_core/protocol/lufa/lufa.c **** {
 787:tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 788:tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 789:tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 790:tmk_core/protocol/lufa/lufa.c **** 
 791:tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 792:tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 793:tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 794:tmk_core/protocol/lufa/lufa.c **** 
 795:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 796:tmk_core/protocol/lufa/lufa.c ****         return -1;
 797:tmk_core/protocol/lufa/lufa.c **** 
 798:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 799:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 800:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 801:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 802:tmk_core/protocol/lufa/lufa.c ****     }
 803:tmk_core/protocol/lufa/lufa.c **** 
 804:tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 805:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 806:tmk_core/protocol/lufa/lufa.c ****     }
 807:tmk_core/protocol/lufa/lufa.c **** 
 808:tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 809:tmk_core/protocol/lufa/lufa.c **** 
 810:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 811:tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 812:tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 813:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 814:tmk_core/protocol/lufa/lufa.c ****         }
 815:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 816:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 817:tmk_core/protocol/lufa/lufa.c ****         }
 818:tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 819:tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 820:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 821:tmk_core/protocol/lufa/lufa.c ****         }
 822:tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 823:tmk_core/protocol/lufa/lufa.c ****     }
 824:tmk_core/protocol/lufa/lufa.c **** 
 825:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 826:tmk_core/protocol/lufa/lufa.c **** 
 827:tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 828:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 829:tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 830:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 831:tmk_core/protocol/lufa/lufa.c ****     } else {
 832:tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 833:tmk_core/protocol/lufa/lufa.c ****     }
 834:tmk_core/protocol/lufa/lufa.c **** 
 835:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 836:tmk_core/protocol/lufa/lufa.c ****     return 0;
 837:tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 838:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 839:tmk_core/protocol/lufa/lufa.c ****     return -1;
 840:tmk_core/protocol/lufa/lufa.c **** }
 841:tmk_core/protocol/lufa/lufa.c **** #else
 842:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 843:tmk_core/protocol/lufa/lufa.c **** {
 673               		.loc 1 843 0
 674               		.cfi_startproc
 675               	.LVL40:
 676               	/* prologue: function */
 677               	/* frame size = 0 */
 678               	/* stack size = 0 */
 679               	.L__stack_usage = 0
 844:tmk_core/protocol/lufa/lufa.c ****     return 0;
 845:tmk_core/protocol/lufa/lufa.c **** }
 680               		.loc 1 845 0
 681 0000 80E0      		ldi r24,0
 682               	.LVL41:
 683 0002 0895      		ret
 684               		.cfi_endproc
 685               	.LFE133:
 687               		.section	.text.send_midi_packet,"ax",@progbits
 688               	.global	send_midi_packet
 690               	send_midi_packet:
 691               	.LFB134:
 846:tmk_core/protocol/lufa/lufa.c **** #endif
 847:tmk_core/protocol/lufa/lufa.c **** 
 848:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 849:tmk_core/protocol/lufa/lufa.c ****  * MIDI
 850:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 851:tmk_core/protocol/lufa/lufa.c **** 
 852:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 853:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 854:tmk_core/protocol/lufa/lufa.c **** {
 855:tmk_core/protocol/lufa/lufa.c ****   .Config =
 856:tmk_core/protocol/lufa/lufa.c ****   {
 857:tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 858:tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 859:tmk_core/protocol/lufa/lufa.c ****     {
 860:tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 861:tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 862:tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 863:tmk_core/protocol/lufa/lufa.c ****     },
 864:tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 865:tmk_core/protocol/lufa/lufa.c ****     {
 866:tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 867:tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 868:tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 869:tmk_core/protocol/lufa/lufa.c ****     },
 870:tmk_core/protocol/lufa/lufa.c ****   },
 871:tmk_core/protocol/lufa/lufa.c **** };
 872:tmk_core/protocol/lufa/lufa.c **** 
 873:tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t* event) {
 692               		.loc 1 873 0
 693               		.cfi_startproc
 694               	.LVL42:
 695               	/* prologue: function */
 696               	/* frame size = 0 */
 697               	/* stack size = 0 */
 698               	.L__stack_usage = 0
 874:tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, event);
 699               		.loc 1 874 0
 700 0000 BC01      		movw r22,r24
 701 0002 80E0      		ldi r24,lo8(USB_MIDI_Interface)
 702 0004 90E0      		ldi r25,hi8(USB_MIDI_Interface)
 703               	.LVL43:
 704 0006 0C94 0000 		jmp MIDI_Device_SendEventPacket
 705               	.LVL44:
 706               		.cfi_endproc
 707               	.LFE134:
 709               		.section	.text.recv_midi_packet,"ax",@progbits
 710               	.global	recv_midi_packet
 712               	recv_midi_packet:
 713               	.LFB135:
 875:tmk_core/protocol/lufa/lufa.c **** }
 876:tmk_core/protocol/lufa/lufa.c **** 
 877:tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t* const event) {
 714               		.loc 1 877 0
 715               		.cfi_startproc
 716               	.LVL45:
 717               	/* prologue: function */
 718               	/* frame size = 0 */
 719               	/* stack size = 0 */
 720               	.L__stack_usage = 0
 878:tmk_core/protocol/lufa/lufa.c ****   return MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, event);
 721               		.loc 1 878 0
 722 0000 BC01      		movw r22,r24
 723 0002 80E0      		ldi r24,lo8(USB_MIDI_Interface)
 724 0004 90E0      		ldi r25,hi8(USB_MIDI_Interface)
 725               	.LVL46:
 726 0006 0C94 0000 		jmp MIDI_Device_ReceiveEventPacket
 727               	.LVL47:
 728               		.cfi_endproc
 729               	.LFE135:
 731               		.section	.text.Init_ADC1,"ax",@progbits
 732               	.global	Init_ADC1
 734               	Init_ADC1:
 735               	.LFB138:
 879:tmk_core/protocol/lufa/lufa.c **** }
 880:tmk_core/protocol/lufa/lufa.c **** 
 881:tmk_core/protocol/lufa/lufa.c **** #endif
 882:tmk_core/protocol/lufa/lufa.c **** 
 883:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 884:tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 885:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 886:tmk_core/protocol/lufa/lufa.c **** 
 887:tmk_core/protocol/lufa/lufa.c **** 
 888:tmk_core/protocol/lufa/lufa.c **** 
 889:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 890:tmk_core/protocol/lufa/lufa.c ****  * main
 891:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 892:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 893:tmk_core/protocol/lufa/lufa.c ****  *
 894:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 895:tmk_core/protocol/lufa/lufa.c ****  */
 896:tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 897:tmk_core/protocol/lufa/lufa.c **** {
 898:tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 899:tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 900:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 901:tmk_core/protocol/lufa/lufa.c **** 
 902:tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 903:tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 904:tmk_core/protocol/lufa/lufa.c **** 
 905:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 906:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 907:tmk_core/protocol/lufa/lufa.c **** }
 908:tmk_core/protocol/lufa/lufa.c **** 
 909:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
 910:tmk_core/protocol/lufa/lufa.c ****  *
 911:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 912:tmk_core/protocol/lufa/lufa.c ****  */
 913:tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
 914:tmk_core/protocol/lufa/lufa.c **** {
 915:tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
 916:tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
 917:tmk_core/protocol/lufa/lufa.c **** 
 918:tmk_core/protocol/lufa/lufa.c ****     USB_Init();
 919:tmk_core/protocol/lufa/lufa.c **** 
 920:tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
 921:tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
 922:tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 923:tmk_core/protocol/lufa/lufa.c **** }
 924:tmk_core/protocol/lufa/lufa.c **** 
 925:tmk_core/protocol/lufa/lufa.c **** /** \brief Main
 926:tmk_core/protocol/lufa/lufa.c ****  *
 927:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 928:tmk_core/protocol/lufa/lufa.c ****  */
 929:tmk_core/protocol/lufa/lufa.c **** void Init_ADC1(void){
 736               		.loc 1 929 0
 737               		.cfi_startproc
 738               	/* prologue: function */
 739               	/* frame size = 0 */
 740               	/* stack size = 0 */
 741               	.L__stack_usage = 0
 930:tmk_core/protocol/lufa/lufa.c **** 	
 931:tmk_core/protocol/lufa/lufa.c **** 	ADMUX = ( 1 << REFS0);   // External reference voltage on Avcc with capacitor
 742               		.loc 1 931 0
 743 0000 80E4      		ldi r24,lo8(64)
 744 0002 8093 7C00 		sts 124,r24
 932:tmk_core/protocol/lufa/lufa.c **** 	ADCSRB |= ( 1 << MUX5); //ADC 8
 745               		.loc 1 932 0
 746 0006 EBE7      		ldi r30,lo8(123)
 747 0008 F0E0      		ldi r31,0
 748 000a 8081      		ld r24,Z
 749 000c 8062      		ori r24,lo8(32)
 750 000e 8083      		st Z,r24
 933:tmk_core/protocol/lufa/lufa.c **** 	ADCSRA =(1 << ADPS2)| (1 << ADPS1) |(1 << ADPS0); // prescale /64 consider 8MHZ clock
 751               		.loc 1 933 0
 752 0010 EAE7      		ldi r30,lo8(122)
 753 0012 F0E0      		ldi r31,0
 754 0014 87E0      		ldi r24,lo8(7)
 755 0016 8083      		st Z,r24
 934:tmk_core/protocol/lufa/lufa.c **** 	ADCSRA |= ( 1 << ADEN );  // Enable ADC
 756               		.loc 1 934 0
 757 0018 8081      		ld r24,Z
 758 001a 8068      		ori r24,lo8(-128)
 759 001c 8083      		st Z,r24
 760 001e 0895      		ret
 761               		.cfi_endproc
 762               	.LFE138:
 764               		.section	.text.AMP_calculator,"ax",@progbits
 765               	.global	AMP_calculator
 767               	AMP_calculator:
 768               	.LFB139:
 935:tmk_core/protocol/lufa/lufa.c **** }
 936:tmk_core/protocol/lufa/lufa.c **** 
 937:tmk_core/protocol/lufa/lufa.c **** uint16_t AMP_calculator(void){
 769               		.loc 1 937 0
 770               		.cfi_startproc
 771               	/* prologue: function */
 772               	/* frame size = 0 */
 773               	/* stack size = 0 */
 774               	.L__stack_usage = 0
 938:tmk_core/protocol/lufa/lufa.c **** 	uint16_t sample_f;
 939:tmk_core/protocol/lufa/lufa.c **** 	ADCSRA |= (1<<ADSC);  //Start ADC conversion
 775               		.loc 1 939 0
 776 0000 8091 7A00 		lds r24,122
 777 0004 8064      		ori r24,lo8(64)
 778 0006 8093 7A00 		sts 122,r24
 779               	.L76:
 940:tmk_core/protocol/lufa/lufa.c **** 	while((ADCSRA & (1 << ADSC)));
 780               		.loc 1 940 0 discriminator 1
 781 000a 8091 7A00 		lds r24,122
 782 000e 86FD      		sbrc r24,6
 783 0010 00C0      		rjmp .L76
 941:tmk_core/protocol/lufa/lufa.c **** 	sample_f = ADC ;
 784               		.loc 1 941 0
 785 0012 8091 7800 		lds r24,120
 786 0016 9091 7900 		lds r25,120+1
 787               	.LVL48:
 942:tmk_core/protocol/lufa/lufa.c **** 	return (sample_f >> 3);
 943:tmk_core/protocol/lufa/lufa.c **** }
 788               		.loc 1 943 0
 789 001a 23E0      		ldi r18,3
 790               		1:
 791 001c 9695      		lsr r25
 792 001e 8795      		ror r24
 793 0020 2A95      		dec r18
 794 0022 01F4      		brne 1b
 795               	.LVL49:
 796 0024 0895      		ret
 797               		.cfi_endproc
 798               	.LFE139:
 800               		.section	.text.startup.main,"ax",@progbits
 801               		.weak	main
 803               	main:
 804               	.LFB140:
 944:tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
 945:tmk_core/protocol/lufa/lufa.c **** int main(void)
 946:tmk_core/protocol/lufa/lufa.c **** {
 805               		.loc 1 946 0
 806               		.cfi_startproc
 807 0000 0F93      		push r16
 808               	.LCFI2:
 809               		.cfi_def_cfa_offset 3
 810               		.cfi_offset 16, -2
 811 0002 1F93      		push r17
 812               	.LCFI3:
 813               		.cfi_def_cfa_offset 4
 814               		.cfi_offset 17, -3
 815 0004 CF93      		push r28
 816               	.LCFI4:
 817               		.cfi_def_cfa_offset 5
 818               		.cfi_offset 28, -4
 819 0006 DF93      		push r29
 820               	.LCFI5:
 821               		.cfi_def_cfa_offset 6
 822               		.cfi_offset 29, -5
 823 0008 00D0      		rcall .
 824 000a 00D0      		rcall .
 825               	.LCFI6:
 826               		.cfi_def_cfa_offset 10
 827 000c CDB7      		in r28,__SP_L__
 828 000e DEB7      		in r29,__SP_H__
 829               	.LCFI7:
 830               		.cfi_def_cfa_register 28
 831               	/* prologue: function */
 832               	/* frame size = 4 */
 833               	/* stack size = 8 */
 834               	.L__stack_usage = 8
 947:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 948:tmk_core/protocol/lufa/lufa.c ****     setup_midi();
 835               		.loc 1 948 0
 836 0010 0E94 0000 		call setup_midi
 837               	.LVL50:
 949:tmk_core/protocol/lufa/lufa.c **** #endif
 950:tmk_core/protocol/lufa/lufa.c ****     midi_device_init(&midi_device);
 838               		.loc 1 950 0
 839 0014 80E0      		ldi r24,lo8(midi_device)
 840 0016 90E0      		ldi r25,hi8(midi_device)
 841 0018 0E94 0000 		call midi_device_init
 842               	.LVL51:
 951:tmk_core/protocol/lufa/lufa.c ****     Init_ADC1();
 843               		.loc 1 951 0
 844 001c 0E94 0000 		call Init_ADC1
 845               	.LVL52:
 846               	.LBB146:
 847               	.LBB147:
 899:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 848               		.loc 1 899 0
 849 0020 84B7      		in r24,0x34
 850 0022 877F      		andi r24,lo8(-9)
 851 0024 84BF      		out 0x34,r24
 852               	.LBB148:
 853               	.LBB149:
 854               		.file 5 "c:\\msys64_2\\home\\egypt2\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\avr\\wdt.h"
   1:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    All rights reserved.
   4:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   5:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   8:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions of source code must retain the above copyright
   9:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  11:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      the documentation and/or other materials provided with the
  14:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      distribution.
  15:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  16:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      contributors may be used to endorse or promote products derived
  18:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      from this software without specific prior written permission.
  19:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  20:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  32:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* $Id$ */
  33:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  34:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
  35:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  */
  37:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  38:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef _AVR_WDT_H_
  39:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _AVR_WDT_H_
  40:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  41:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <avr/io.h>
  42:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <stdint.h>
  43:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  44:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \file */
  45:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  48:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     This header file declares the interface to some inline macros
  49:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     to prevent the watchdog timer configuration from being
  51:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     accidentally altered by a crashing application, a special timed
  52:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     sequence is required in order to change it.  The macros within
  53:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     this header file handle the required sequence automatically
  54:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the manipulation.
  56:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  57:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \note Depending on the fuse configuration of the particular
  58:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     device, further restrictions might apply, in particular it might
  59:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     be disallowed to turn off the watchdog timer.
  60:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  61:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     timer remains active even after a system reset (except a power-on
  64:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the following:
  68:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  69:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code
  70:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <stdint.h>
  71:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <avr/wdt.h>
  72:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  73:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  75:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void) \
  76:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((naked)) \
  77:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((section(".init3")));
  78:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void)
  79:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     {
  80:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       mcusr_mirror = MCUSR;
  81:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       MCUSR = 0;
  82:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       wdt_disable();
  83:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     }
  84:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \endcode
  85:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  86:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     clearing the watchdog reset flag before disabling the
  89:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     watchdog is required, according to the datasheet.
  90:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  91:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  92:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
  93:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
  94:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    a call to this instruction is required before the timer expires,
  96:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  98:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  99:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 101:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef __DOXYGEN__
 102:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 103:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDP3)
 104:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 106:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       0x00
 107:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 108:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 109:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTCSR)
 110:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(WDTCR)
 112:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 114:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 116:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 117:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTOE)
 118:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 120:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 122:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 123:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif	/* !__DOXYGEN__ */
 124:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 125:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 126:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
 127:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
 128:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    through \c WDP3 bits).
 133:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 134:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 136:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 137:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 138:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(__AVR_XMEGA__)
 139:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 140:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 142:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 143:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 144:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 145:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 146:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"wdr"									"\n\t" \
 147:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	: [tmp]					"=r" (temp) \
 155:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 162:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 163:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 164:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 165:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 166:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 167:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 168:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"wdr"								"\n\t" \
 169:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]            "=r" (temp) \
 174:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 179:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 180:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 181:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 183:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
 184:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    wdt_enable(timeout) for xmega devices
 185:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    registers to the CCP register
 187:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** At the same time,
 188:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    3) set timeout (timeout)
 191:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    sync is finished).
 194:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 195:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 196:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 197:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 198:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (         \
 199:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]                "=r" (temp) \
 208:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 216:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 217:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 218:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 219:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 220:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 221:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : \
 227:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 233:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** );
 234:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 235:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 237:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(__AVR_TINY__)
 238:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 239:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(value) \
 240:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 241:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 243:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 244:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /* no outputs */  \
 248:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 254:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** )
 255:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 256:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 257:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 258:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp_wd; \
 259:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 260:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 262:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 263:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /*no output */ \
 269:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 275:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 276:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }while(0)
 277:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 278:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(CCP)
 279:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 280:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 281:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 282:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 283:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 284:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 286:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 287:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 289:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 290:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 294:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 300:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 301:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 302:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 304:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 305:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 307:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 308:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 312:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 318:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 319:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 320:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 322:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 323:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 325:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 326:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 330:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 336:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 337:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 338:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 339:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  	{
 340:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 341:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 343:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 344:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 348:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 354:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 355:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 356:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 357:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 358:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 359:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 360:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 361:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 362:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 364:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 365:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 366:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 368:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 369:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 375:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 381:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 382:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 383:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 385:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 386:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 387:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 389:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 390:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 396:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 402:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 403:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 404:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 406:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 407:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 408:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 410:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 411:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 417:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 423:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 424:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 425:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 426:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 427:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 428:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 429:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 431:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 432:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 438:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 444:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 445:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 446:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 447:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 448:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 449:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 450:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 451:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 452:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 453:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 454:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 456:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 457:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 458:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 459:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 460:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %1" "\n\t"
 461:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 462:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %2" "\n \t"
 463:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 464:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 465:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 466:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 467:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 468:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 469:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 470:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 471:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 472:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 473:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 474:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 475:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 476:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 477:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %1" "\n\t"
 478:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 479:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %2" "\n \t"
 480:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 481:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 482:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 483:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 484:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 485:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 486:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 487:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 488:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 489:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 490:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 491:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 492:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 493:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 494:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 495:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 496:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 497:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 498:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 499:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli"                        "\n\t"
 500:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr"                        "\n\t"
 501:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 502:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 503:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 504:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 505:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 506:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 507:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 508:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 509:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 510:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 511:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 512:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 513:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 514:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 515:c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 855               		.loc 5 515 0
 856               	/* #APP */
 857               	 ;  515 "c:\msys64_2\home\egypt2\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h" 1
 858 0026 0FB6      		in __tmp_reg__,__SREG__
 859 0028 F894      		cli
 860 002a A895      		wdr
 861 002c 8091 6000 		lds r24,96
 862 0030 8861      		ori r24,24
 863 0032 8093 6000 		sts 96,r24
 864 0036 1092 6000 		sts 96,__zero_reg__
 865 003a 0FBE      		out __SREG__,__tmp_reg__
 866               		
 867               	 ;  0 "" 2
 868               	/* #NOAPP */
 869               	.LBE149:
 870               	.LBE148:
 905:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 871               		.loc 1 905 0
 872 003c 80E8      		ldi r24,lo8(-128)
 873 003e 8093 6100 		sts 97,r24
 906:tmk_core/protocol/lufa/lufa.c **** }
 874               		.loc 1 906 0
 875 0042 1092 6100 		sts 97,__zero_reg__
 876               	.LBE147:
 877               	.LBE146:
 952:tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 953:tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 878               		.loc 1 953 0
 879 0046 0E94 0000 		call keyboard_setup
 880               	.LVL53:
 881               	.LBB150:
 882               	.LBB151:
 916:tmk_core/protocol/lufa/lufa.c **** 
 883               		.loc 1 916 0
 884 004a 0E94 0000 		call USB_Disable
 885               	.LVL54:
 918:tmk_core/protocol/lufa/lufa.c **** 
 886               		.loc 1 918 0
 887 004e 0E94 0000 		call USB_Init
 888               	.LVL55:
 889               	.LBB152:
 890               	.LBB153:
 891               	.LBB154:
 892               		.loc 4 113 0
 893 0052 8091 E200 		lds r24,226
 894 0056 8460      		ori r24,lo8(4)
 895 0058 8093 E200 		sts 226,r24
 896               	.LVL56:
 897               	.LBE154:
 898               	.LBE153:
 899               	.LBE152:
 900               	.LBE151:
 901               	.LBE150:
 954:tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 955:tmk_core/protocol/lufa/lufa.c ****     sei();
 902               		.loc 1 955 0
 903               	/* #APP */
 904               	 ;  955 "tmk_core/protocol/lufa/lufa.c" 1
 905 005c 7894      		sei
 906               	 ;  0 "" 2
 956:tmk_core/protocol/lufa/lufa.c **** 
 957:tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
 958:tmk_core/protocol/lufa/lufa.c ****     serial_init();
 959:tmk_core/protocol/lufa/lufa.c **** #endif
 960:tmk_core/protocol/lufa/lufa.c **** 
 961:tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
 962:tmk_core/protocol/lufa/lufa.c **** 
 963:tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
 964:tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
 965:tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
 966:tmk_core/protocol/lufa/lufa.c ****             ;
 967:tmk_core/protocol/lufa/lufa.c ****     #else
 968:tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
 969:tmk_core/protocol/lufa/lufa.c ****     #endif
 970:tmk_core/protocol/lufa/lufa.c ****     }
 971:tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
 972:tmk_core/protocol/lufa/lufa.c **** #else
 973:tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 907               		.loc 1 973 0
 908               	/* #NOAPP */
 909 005e 0E94 0000 		call USB_USBTask
 910               	.LVL57:
 974:tmk_core/protocol/lufa/lufa.c **** #endif
 975:tmk_core/protocol/lufa/lufa.c ****     /* init modules */
 976:tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 911               		.loc 1 976 0
 912 0062 0E94 0000 		call keyboard_init
 913               	.LVL58:
 977:tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 914               		.loc 1 977 0
 915 0066 80E0      		ldi r24,lo8(lufa_driver)
 916 0068 90E0      		ldi r25,hi8(lufa_driver)
 917 006a 0E94 0000 		call host_set_driver
 918               	.LVL59:
 919               	.LBB155:
 978:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 979:tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
 980:tmk_core/protocol/lufa/lufa.c **** #endif
 981:tmk_core/protocol/lufa/lufa.c **** 
 982:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 983:tmk_core/protocol/lufa/lufa.c ****     virtser_init();
 984:tmk_core/protocol/lufa/lufa.c **** #endif
 985:tmk_core/protocol/lufa/lufa.c **** 
 986:tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 987:tmk_core/protocol/lufa/lufa.c ****     while (1) {
 988:tmk_core/protocol/lufa/lufa.c ****         #if !defined(NO_USB_STARTUP_CHECK)
 989:tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 990:tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 991:tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 992:tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 993:tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 994:tmk_core/protocol/lufa/lufa.c ****             }
 995:tmk_core/protocol/lufa/lufa.c ****         }
 996:tmk_core/protocol/lufa/lufa.c ****         #endif
 997:tmk_core/protocol/lufa/lufa.c **** 		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 920               		.loc 1 997 0
 921 006e 01E0      		ldi r16,lo8(1)
 922 0070 10E1      		ldi r17,lo8(16)
 923               	.L79:
 989:tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 924               		.loc 1 989 0
 925 0072 8091 0000 		lds r24,USB_DeviceState
 926 0076 8530      		cpi r24,lo8(5)
 927 0078 01F4      		brne .L87
 991:tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 928               		.loc 1 991 0
 929 007a 0E94 0000 		call suspend_power_down
 930               	.LVL60:
 992:tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 931               		.loc 1 992 0
 932 007e 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 933 0082 8823      		tst r24
 934 0084 01F0      		breq .L79
 992:tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 935               		.loc 1 992 0 is_stmt 0 discriminator 1
 936 0086 0E94 0000 		call suspend_wakeup_condition
 937               	.LVL61:
 938 008a 8823      		tst r24
 939 008c 01F0      		breq .L79
 993:tmk_core/protocol/lufa/lufa.c ****             }
 940               		.loc 1 993 0 is_stmt 1
 941 008e 0E94 0000 		call USB_Device_SendRemoteWakeup
 942               	.LVL62:
 943 0092 00C0      		rjmp .L79
 944               	.L87:
 945               		.loc 1 997 0
 946 0094 1982      		std Y+1,__zero_reg__
 947 0096 1A82      		std Y+2,__zero_reg__
 948 0098 1B82      		std Y+3,__zero_reg__
 949 009a 1C82      		std Y+4,__zero_reg__
 950 009c 0A83      		std Y+2,r16
 951 009e 1B83      		std Y+3,r17
 998:tmk_core/protocol/lufa/lufa.c **** 		{
 999:tmk_core/protocol/lufa/lufa.c **** 			//.Event       = MIDI_EVENT(0, MIDICommand),
1000:tmk_core/protocol/lufa/lufa.c **** 			
1001:tmk_core/protocol/lufa/lufa.c **** 			.Data1       = 0 | 1,
1002:tmk_core/protocol/lufa/lufa.c **** 			.Data2       = 16,
1003:tmk_core/protocol/lufa/lufa.c **** 			.Data3       = AMP_calculator(),
 952               		.loc 1 1003 0
 953 00a0 0E94 0000 		call AMP_calculator
 954               	.LVL63:
 997:tmk_core/protocol/lufa/lufa.c **** 		{
 955               		.loc 1 997 0
 956 00a4 8C83      		std Y+4,r24
1004:tmk_core/protocol/lufa/lufa.c **** 		};
1005:tmk_core/protocol/lufa/lufa.c **** 		
1006:tmk_core/protocol/lufa/lufa.c **** 		send_midi_packet(&MIDIEvent);
 957               		.loc 1 1006 0
 958 00a6 CE01      		movw r24,r28
 959 00a8 0196      		adiw r24,1
 960 00aa 0E94 0000 		call send_midi_packet
 961               	.LVL64:
1007:tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 962               		.loc 1 1007 0
 963 00ae 0E94 0000 		call keyboard_task
 964               	.LVL65:
1008:tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
 965               		.loc 1 1008 0
 966 00b2 80E0      		ldi r24,lo8(USB_MIDI_Interface)
 967 00b4 90E0      		ldi r25,hi8(USB_MIDI_Interface)
 968 00b6 0E94 0000 		call MIDI_Device_USBTask
 969               	.LVL66:
1009:tmk_core/protocol/lufa/lufa.c **** 
1010:tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1011:tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
 970               		.loc 1 1011 0
 971 00ba 0E94 0000 		call rgblight_task
 972               	.LVL67:
 973               	.LBE155:
1012:tmk_core/protocol/lufa/lufa.c **** #endif
1013:tmk_core/protocol/lufa/lufa.c **** 
1014:tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1015:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1016:tmk_core/protocol/lufa/lufa.c **** #endif
1017:tmk_core/protocol/lufa/lufa.c **** 
1018:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1019:tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1020:tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1021:tmk_core/protocol/lufa/lufa.c **** #endif
1022:tmk_core/protocol/lufa/lufa.c **** 
1023:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1024:tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1025:tmk_core/protocol/lufa/lufa.c **** #endif
1026:tmk_core/protocol/lufa/lufa.c **** 
1027:tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1028:tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1029:tmk_core/protocol/lufa/lufa.c **** #endif
1030:tmk_core/protocol/lufa/lufa.c **** 
1031:tmk_core/protocol/lufa/lufa.c ****     }
 974               		.loc 1 1031 0
 975 00be 00C0      		rjmp .L79
 976               		.cfi_endproc
 977               	.LFE140:
 979               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 980               	.global	CALLBACK_USB_GetDescriptor
 982               	CALLBACK_USB_GetDescriptor:
 983               	.LFB141:
1032:tmk_core/protocol/lufa/lufa.c **** }
1033:tmk_core/protocol/lufa/lufa.c **** 
1034:tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
1035:tmk_core/protocol/lufa/lufa.c ****                                     const uint16_t wIndex,
1036:tmk_core/protocol/lufa/lufa.c ****                                     const void** const DescriptorAddress)
1037:tmk_core/protocol/lufa/lufa.c **** {
 984               		.loc 1 1037 0
 985               		.cfi_startproc
 986               	.LVL68:
 987               	/* prologue: function */
 988               	/* frame size = 0 */
 989               	/* stack size = 0 */
 990               	.L__stack_usage = 0
1038:tmk_core/protocol/lufa/lufa.c ****   return get_usb_descriptor(wValue, wIndex, DescriptorAddress);
 991               		.loc 1 1038 0
 992 0000 0C94 0000 		jmp get_usb_descriptor
 993               	.LVL69:
 994               		.cfi_endproc
 995               	.LFE141:
 997               	.global	USB_MIDI_Interface
 998               		.section	.data.USB_MIDI_Interface,"aw",@progbits
 1001               	USB_MIDI_Interface:
 1002 0000 03        		.byte	3
 1003 0001 83        		.byte	-125
 1004 0002 4000      		.word	64
 1005 0004 00        		.zero	1
 1006 0005 01        		.byte	1
 1007 0006 04        		.byte	4
 1008 0007 4000      		.word	64
 1009 0009 00        		.zero	1
 1010 000a 01        		.byte	1
 1011 000b 00        		.zero	1
 1012               	.global	lufa_driver
 1013               		.section	.data.lufa_driver,"aw",@progbits
 1016               	lufa_driver:
 1017 0000 0000      		.word	gs(keyboard_leds)
 1018 0002 0000      		.word	gs(send_keyboard)
 1019 0004 0000      		.word	gs(send_mouse)
 1020 0006 0000      		.word	gs(send_system)
 1021 0008 0000      		.word	gs(send_consumer)
 1022               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1025               	keyboard_report_sent:
 1026 0000 0000 0000 		.zero	32
 1026      0000 0000 
 1026      0000 0000 
 1026      0000 0000 
 1026      0000 0000 
 1027               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1030               	keyboard_led_stats:
 1031 0000 00        		.zero	1
 1032               	.global	keyboard_protocol
 1033               		.section	.data.keyboard_protocol,"aw",@progbits
 1036               	keyboard_protocol:
 1037 0000 01        		.byte	1
 1038               	.global	keyboard_idle
 1039               		.section	.bss.keyboard_idle,"aw",@nobits
 1042               	keyboard_idle:
 1043 0000 00        		.zero	1
 1044               		.text
 1045               	.Letext0:
 1046               		.file 6 "c:\\msys64_2\\home\\egypt2\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 1047               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Endpoint.h"
 1048               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1049               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1050               		.file 10 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1051               		.file 11 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/MIDIClassCommon.h"
 1052               		.file 12 "lib/lufa/LUFA/Drivers/USB/Class/Device/MIDIClassDevice.h"
 1053               		.file 13 "tmk_core/protocol/usb_descriptor.h"
 1054               		.file 14 "tmk_core/common/report.h"
 1055               		.file 15 "tmk_core/protocol/midi/midi_function_types.h"
 1056               		.file 16 "tmk_core/protocol/midi/midi_device.h"
 1057               		.file 17 "tmk_core/protocol/midi/bytequeue/bytequeue.h"
 1058               		.file 18 "tmk_core/common/host_driver.h"
 1059               		.file 19 "quantum/keycode_config.h"
 1060               		.file 20 "tmk_core/protocol/lufa/outputselect.h"
 1061               		.file 21 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1062               		.file 22 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1063               		.file 23 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1064               		.file 24 "tmk_core/common/action_util.h"
 1065               		.file 25 "tmk_core/protocol/midi/qmk_midi.h"
 1066               		.file 26 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1067               		.file 27 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1068               		.file 28 "tmk_core/common/suspend.h"
 1069               		.file 29 "tmk_core/common/action.h"
 1070               		.file 30 "tmk_core/common/keyboard.h"
 1071               		.file 31 "quantum/rgblight.h"
 1072               		.file 32 "tmk_core/protocol/midi/midi.h"
 1073               		.file 33 "tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lufa.c
C:\msys64_2\tmp\cch7TVKt.s:2      *ABS*:0000003e __SP_H__
C:\msys64_2\tmp\cch7TVKt.s:3      *ABS*:0000003d __SP_L__
C:\msys64_2\tmp\cch7TVKt.s:4      *ABS*:0000003f __SREG__
C:\msys64_2\tmp\cch7TVKt.s:5      *ABS*:00000000 __tmp_reg__
C:\msys64_2\tmp\cch7TVKt.s:6      *ABS*:00000001 __zero_reg__
C:\msys64_2\tmp\cch7TVKt.s:12     .text.keyboard_leds:00000000 keyboard_leds
C:\msys64_2\tmp\cch7TVKt.s:1030   .bss.keyboard_led_stats:00000000 keyboard_led_stats
C:\msys64_2\tmp\cch7TVKt.s:29     .text.send_mouse:00000000 send_mouse
C:\msys64_2\tmp\cch7TVKt.s:44     .text.send_consumer:00000000 send_consumer
C:\msys64_2\tmp\cch7TVKt.s:59     .text.send_keyboard:00000000 send_keyboard
C:\msys64_2\tmp\cch7TVKt.s:1036   .data.keyboard_protocol:00000000 keyboard_protocol
C:\msys64_2\tmp\cch7TVKt.s:1025   .bss.keyboard_report_sent:00000000 keyboard_report_sent
C:\msys64_2\tmp\cch7TVKt.s:211    .text.send_system:00000000 send_system
C:\msys64_2\tmp\cch7TVKt.s:225    .text.EVENT_USB_Device_Connect:00000000 EVENT_USB_Device_Connect
C:\msys64_2\tmp\cch7TVKt.s:263    .text.EVENT_USB_Device_Disconnect:00000000 EVENT_USB_Device_Disconnect
C:\msys64_2\tmp\cch7TVKt.s:280    .text.EVENT_USB_Device_Reset:00000000 EVENT_USB_Device_Reset
C:\msys64_2\tmp\cch7TVKt.s:294    .text.EVENT_USB_Device_Suspend:00000000 EVENT_USB_Device_Suspend
C:\msys64_2\tmp\cch7TVKt.s:309    .text.EVENT_USB_Device_WakeUp:00000000 EVENT_USB_Device_WakeUp
C:\msys64_2\tmp\cch7TVKt.s:326    .text.EVENT_USB_Device_ConfigurationChanged:00000000 EVENT_USB_Device_ConfigurationChanged
C:\msys64_2\tmp\cch7TVKt.s:378    .text.EVENT_USB_Device_ControlRequest:00000000 EVENT_USB_Device_ControlRequest
C:\msys64_2\tmp\cch7TVKt.s:1042   .bss.keyboard_idle:00000000 keyboard_idle
C:\msys64_2\tmp\cch7TVKt.s:671    .text.sendchar:00000000 sendchar
C:\msys64_2\tmp\cch7TVKt.s:690    .text.send_midi_packet:00000000 send_midi_packet
C:\msys64_2\tmp\cch7TVKt.s:1001   .data.USB_MIDI_Interface:00000000 USB_MIDI_Interface
C:\msys64_2\tmp\cch7TVKt.s:712    .text.recv_midi_packet:00000000 recv_midi_packet
C:\msys64_2\tmp\cch7TVKt.s:734    .text.Init_ADC1:00000000 Init_ADC1
C:\msys64_2\tmp\cch7TVKt.s:767    .text.AMP_calculator:00000000 AMP_calculator
C:\msys64_2\tmp\cch7TVKt.s:803    .text.startup.main:00000000 main
C:\msys64_2\tmp\cch7TVKt.s:1016   .data.lufa_driver:00000000 lufa_driver
C:\msys64_2\tmp\cch7TVKt.s:982    .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
where_to_send
keymap_config
Endpoint_Write_Stream_LE
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
USB_DeviceState
Endpoint_ClearStatusStage
clear_keyboard
MIDI_Device_SendEventPacket
MIDI_Device_ReceiveEventPacket
setup_midi
midi_device
midi_device_init
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
MIDI_Device_USBTask
rgblight_task
get_usb_descriptor
__do_copy_data
__do_clear_bss
